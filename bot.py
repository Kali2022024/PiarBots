import asyncio
import logging
import sqlite3
import os
import getpass
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import timedelta
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError, PhoneNumberInvalidError, PhoneCodeExpiredError
from dotenv import load_dotenv
from config import TELEGRAM_BOT_TOKEN

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# API –¥–∞–Ω—ñ –∑ .env —Ñ–∞–π–ª—É
API_ID = int(os.getenv("API_ID", "0"))
API_HASH = os.getenv("API_HASH", "")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö (—Ç–∞ —Å–∞–º–∞ —â–æ –π —É authorizade.py)
class Database:
    def __init__(self, db_path: str = "accounts.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS accounts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    phone_number TEXT UNIQUE NOT NULL,
                    api_id INTEGER NOT NULL,
                    api_hash TEXT NOT NULL,
                    session_string TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    username TEXT,
                    user_id INTEGER,
                    is_active BOOLEAN DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_used TIMESTAMP
                )
            """)
            conn.commit()
    
    def add_account(self, phone_number: str, api_id: int, api_hash: str, 
                   session_string: str = None, first_name: str = None, 
                   last_name: str = None, username: str = None, 
                   user_id: int = None) -> bool:
        """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT OR REPLACE INTO accounts 
                    (phone_number, api_id, api_hash, session_string, first_name, 
                     last_name, username, user_id, is_active, last_used)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1, CURRENT_TIMESTAMP)
                """, (phone_number, api_id, api_hash, session_string, 
                      first_name, last_name, username, user_id))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return False
    
    def get_accounts(self) -> list:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∞–∫–∫–∞—É–Ω—Ç–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT * FROM accounts WHERE is_active = 1 
                    ORDER BY created_at DESC
                """)
                accounts = []
                for row in cursor.fetchall():
                    accounts.append(dict(row))
                return accounts
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤: {e}")
            return []
    
    def delete_account(self, phone_number: str) -> bool:
        """–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ —Ñ–∞–π–ª —Å–µ—Å—ñ—ó"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("DELETE FROM accounts WHERE phone_number = ?", (phone_number,))
                conn.commit()
                
                if cursor.rowcount > 0:
                    # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª —Å–µ—Å—ñ—ó
                    session_name = f"sessions/temp_{phone_number.replace('+', '').replace('-', '')}"
                    if os.path.exists(session_name + ".session"):
                        os.remove(session_name + ".session")
                    if os.path.exists(session_name + ".session-journal"):
                        os.remove(session_name + ".session-journal")
                    return True
                return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return False


# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class RegistrationStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()
    waiting_for_phone_to_delete = State()  # –î–æ–¥–∞–Ω–æ —Å—Ç–∞–Ω –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç–∞

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
if not API_ID or not API_HASH:
    logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞: API_ID –∞–±–æ API_HASH –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    logger.error("–°—Ç–≤–æ—Ä—ñ—Ç—å .env —Ñ–∞–π–ª –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏")
    exit(1)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    welcome_text = f"""
üçΩÔ∏è –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Piar Bot

üÜî –í–∞—à ID: {message.from_user.id}

–Ø –±–æ—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º–∏ –≤ telegram)

üí° –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/register_number - –ü—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
/accounts - –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
/delete_account - –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç
/status_account - —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")]
    ])
    
    await message.answer(welcome_text, reply_markup=keyboard)

# –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π callback handler
@router.callback_query(lambda c: c.data == "delete_account")
async def delete_account_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback.message.answer("üîÑ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    await state.set_state(RegistrationStates.waiting_for_phone_to_delete)
    await callback.answer()

@router.message(RegistrationStates.waiting_for_phone_to_delete)
async def process_delete_phone(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    phone_number = message.text.strip()
    
    if not phone_number.startswith('+') or len(phone_number) < 10:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (—Ñ–æ—Ä–º–∞—Ç +380XXXXXXXXX):")
        return
    
    success = db.delete_account(phone_number)
    if success:
        await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω!")
    
    await state.clear()

@router.message(Command("register_number"))
async def cmd_register_number(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /register_number"""
    await message.answer(
        "üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (—Ñ–æ—Ä–º–∞—Ç +380XXXXXXXXX):"
    )
    await state.set_state(RegistrationStates.waiting_for_phone)

@router.message(RegistrationStates.waiting_for_phone)
async def process_phone_number(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    phone_number = message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
    if not phone_number.startswith('+') or len(phone_number) < 10:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (—Ñ–æ—Ä–º–∞—Ç +380XXXXXXXXX):")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–∫–∫–∞—É–Ω—Ç –≤–∂–µ —ñ—Å–Ω—É—î
    accounts = db.get_accounts()
    for account in accounts:
        if account['phone_number'] == phone_number:
            await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!")
            await state.clear()
            return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(phone_number=phone_number)
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
        session_name = f"sessions/temp_{phone_number.replace('+', '').replace('-', '')}"
        client = TelegramClient(session_name, API_ID, API_HASH)
        
        await message.answer("üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram...")
        await client.connect()
        
        if not await client.is_user_authorized():
            await message.answer(f"üì± –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–¥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞ {phone_number}...")
            try:
                await client.send_code_request(phone_number)
                await message.answer("‚úÖ –ö–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:")
                await state.set_state(RegistrationStates.waiting_for_code)
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç –≤ —Å—Ç–∞–Ω—ñ
                await state.update_data(client=client)
            except Exception as e:
                await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ–¥—É: {e}")
                await client.disconnect()
                await state.clear()
                return
        else:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
            await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!")
            await client.disconnect()
            await state.clear()
            
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        await state.clear()

@router.message(RegistrationStates.waiting_for_code)
async def process_verification_code(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–¥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    code = message.text.strip()
    data = await state.get_data()
    phone_number = data['phone_number']
    client = data['client']
    
    try:
        await client.sign_in(phone=phone_number, code=code)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        me = await client.get_me()
        session_string = client.session.save()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        success = db.add_account(
            phone_number=phone_number,
            api_id=API_ID,
            api_hash=API_HASH,
            session_string=session_string,
            first_name=me.first_name,
            last_name=me.last_name,
            username=me.username,
            user_id=me.id
        )
        
        if success:
            success_message = f"""
‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!</b>

üì± <b>–ù–æ–º–µ—Ä:</b> {phone_number}
üë§ <b>–Ü–º'—è:</b> {me.first_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üë§ <b>–ü—Ä—ñ–∑–≤–∏—â–µ:</b> {me.last_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üîó <b>Username:</b> @{me.username or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üÜî <b>ID:</b> {me.id}
            """
            await message.answer(success_message, parse_mode='HTML')
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö!")
            
    except SessionPasswordNeededError:
        await message.answer("üîê –£–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–≤–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é (2FA). –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:")
        await state.set_state(RegistrationStates.waiting_for_password)
        return
    except PhoneCodeInvalidError:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    except PhoneCodeExpiredError:
        await message.answer("‚ùå –ö–æ–¥ –∑–∞—Å—Ç–∞—Ä—ñ–≤! –ü–æ—á–Ω—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /register_number")
        await client.disconnect()
        await state.clear()
        return
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        await client.disconnect()
        await state.clear()
        return
    
    finally:
        if 'client' in data:
            await client.disconnect()
        await state.clear()

@router.message(RegistrationStates.waiting_for_password)
async def process_2fa_password(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–∞—Ä–æ–ª—è 2FA"""
    password = message.text.strip()
    data = await state.get_data()
    phone_number = data['phone_number']
    client = data['client']
    
    try:
        await client.sign_in(password=password)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        me = await client.get_me()
        session_string = client.session.save()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        success = db.add_account(
            phone_number=phone_number,
            api_id=API_ID,
            api_hash=API_HASH,
            session_string=session_string,
            first_name=me.first_name,
            last_name=me.last_name,
            username=me.username,
            user_id=me.id
        )
        
        if success:
            success_message = f"""
‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!</b>

üì± <b>–ù–æ–º–µ—Ä:</b> {phone_number}
üë§ <b>–Ü–º'—è:</b> {me.first_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üë§ <b>–ü—Ä—ñ–∑–≤–∏—â–µ:</b> {me.last_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üîó <b>Username:</b> @{me.username or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üÜî <b>ID:</b> {me.id}
            """
            await message.answer(success_message, parse_mode='HTML')
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö!")
            
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
    finally:
        await client.disconnect()
        await state.clear()

@router.message(Command("accounts"))
async def cmd_accounts(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /accounts - –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    try:
        accounts = db.get_accounts()
        
        if not accounts:
            await message.answer("üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register_number –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
            return
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
        accounts_text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:</b>\n\n"
        
        for i, account in enumerate(accounts, 1):
            status_emoji = "‚úÖ" if account['is_active'] else "‚ùå"
            accounts_text += f"{i}. {status_emoji} <b>{account['phone_number']}</b>\n"
            accounts_text += f"   üë§ {account['first_name'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'} {account['last_name'] or ''}\n"
            if account['username']:
                accounts_text += f"   üîó @{account['username']}\n"
            accounts_text += f"   üÜî ID: {account['user_id']}\n"
            accounts_text += f"   üìÖ –î–æ–¥–∞–Ω–æ: {account['created_at']}\n"
            if account['last_used']:
                accounts_text += f"   üïí –û—Å—Ç–∞–Ω–Ω—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {account['last_used']}\n"
            accounts_text += "\n"
        
        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ, —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        if len(accounts_text) > 4000:
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª—ñ–≤
            parts = []
            current_part = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:</b>\n\n"
            
            for i, account in enumerate(accounts, 1):
                account_text = f"{i}. ‚úÖ <b>{account['phone_number']}</b>\n"
                account_text += f"   üë§ {account['first_name'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'} {account['last_name'] or ''}\n"
                if account['username']:
                    account_text += f"   üîó @{account['username']}\n"
                account_text += f"   üÜî ID: {account['user_id']}\n"
                account_text += f"   üìÖ –î–æ–¥–∞–Ω–æ: {account['created_at']}\n\n"
                
                if len(current_part + account_text) > 4000:
                    parts.append(current_part)
                    current_part = account_text
                else:
                    current_part += account_text
            
            if current_part:
                parts.append(current_part)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω–∏
            for part in parts:
                await message.answer(part, parse_mode='HTML')
        else:
            await message.answer(accounts_text, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç—ñ–≤: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(Command("delete_account"))
async def cmd_delete_account(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /delete_account - –≤–∏–¥–∞–ª—è—î –∞–∫–∫–∞—É–Ω—Ç"""
    await message.answer("üîÑ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")
    await state.set_state(RegistrationStates.waiting_for_phone_to_delete)


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏
        dp.include_router(router)
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    asyncio.run(main())