import os
import logging
from aiogram import Bot, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import Database

logger = logging.getLogger(__name__)

class TemplateStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_text = State()
    waiting_for_media = State()
    editing_template = State()

class TemplateManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database()
    
    def get_template_keyboard(self, templates: list) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —à–∞–±–ª–æ–Ω–∞–º–∏"""
        keyboard = []
        
        for template in templates:
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–∫–æ–Ω–∫—É –∑–∞ —Ç–∏–ø–æ–º
            icon = self._get_template_icon(template['message_type'])
            button_text = f"{icon} {template['name']}"
            
            keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"select_template_{template['id']}"
                )
            ])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        keyboard.append([
            InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —à–∞–±–ª–æ–Ω", callback_data="add_template"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_templates")
        ])
        keyboard.append([
            InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_templates")
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def _get_template_icon(self, message_type: str) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        icons = {
            'text': 'üìù',
            'photo': 'üñºÔ∏è',
            'video': 'üé•',
            'audio': 'üéµ',
            'voice': 'üé§',
            'document': 'üìÑ',
            'sticker': 'üòÄ',
            'animation': 'üé¨'
        }
        return icons.get(message_type, 'üìÑ')
    
    async def save_template_from_message(self, message: types.Message, name: str) -> bool:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ —à–∞–±–ª–æ–Ω –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            message_type = 'text'
            text = None
            file_id = None
            file_path = None
            file_name = None
            file_size = None
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∑–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ
            if message.photo:
                message_type = 'photo'
                file_id = message.photo[-1].file_id
                file_name = f"photo_{file_id}.jpg"
                file_size = message.photo[-1].file_size
                text = message.caption
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ
                file_path = await self._download_media(file_id, file_name)
                
            elif message.video:
                message_type = 'video'
                file_id = message.video.file_id
                file_name = message.video.file_name or f"video_{file_id}.mp4"
                file_size = message.video.file_size
                text = message.caption
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–µ–æ
                file_path = await self._download_media(file_id, file_name)
                
            elif message.audio:
                message_type = 'audio'
                file_id = message.audio.file_id
                file_name = message.audio.file_name or f"audio_{file_id}.mp3"
                file_size = message.audio.file_size
                text = message.caption
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞—É–¥—ñ–æ
                file_path = await self._download_media(file_id, file_name)
                
            elif message.voice:
                message_type = 'voice'
                file_id = message.voice.file_id
                file_name = f"voice_{file_id}.ogg"
                file_size = message.voice.file_size
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                file_path = await self._download_media(file_id, file_name)
                
            elif message.document:
                message_type = 'document'
                file_id = message.document.file_id
                file_name = message.document.file_name or f"document_{file_id}"
                file_size = message.document.file_size
                text = message.caption
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
                file_path = await self._download_media(file_id, file_name)
                
            elif message.sticker:
                message_type = 'sticker'
                file_id = message.sticker.file_id
                file_name = f"sticker_{file_id}.webp"
                file_size = message.sticker.file_size
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç—ñ–∫–µ—Ä
                file_path = await self._download_media(file_id, file_name)
                
            elif message.animation:
                message_type = 'animation'
                file_id = message.animation.file_id
                file_name = message.animation.file_name or f"animation_{file_id}.gif"
                file_size = message.animation.file_size
                text = message.caption
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
                file_path = await self._download_media(file_id, file_name)
                
            else:
                # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                message_type = 'text'
                text = message.text
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–∞–±–ª–æ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            print(f"DEBUG: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–∞–±–ª–æ–Ω –≤ –ë–î:")
            print(f"DEBUG: name: {name}")
            print(f"DEBUG: message_type: {message_type}")
            print(f"DEBUG: text: {text}")
            print(f"DEBUG: file_id: {file_id}")
            print(f"DEBUG: file_path: {file_path}")
            print(f"DEBUG: file_name: {file_name}")
            print(f"DEBUG: file_size: {file_size}")
            
            template_id = self.db.add_template(
                name=name,
                message_type=message_type,
                text=text,
                file_id=file_id,
                file_path=file_path,
                file_name=file_name,
                file_size=file_size
            )
            
            if template_id:
                logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ ID: {template_id}")
                return True
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —à–∞–±–ª–æ–Ω—É '{name}'")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —à–∞–±–ª–æ–Ω—É: {e}")
            return False
    
    async def _download_media(self, file_id: str, file_name: str) -> str:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª"""
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É media_files —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
            os.makedirs("media_files", exist_ok=True)
            
            # –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            file_path = os.path.join("media_files", file_name)
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
            file = await self.bot.get_file(file_id)
            await self.bot.download_file(file.file_path, file_path)
            
            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {file_path}")
            return file_path
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É {file_id}: {e}")
            return None
    
    def get_template_for_broadcast(self, template_id: int) -> dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
        template = self.db.get_template(template_id)
        if not template:
            return None
        
        print(f"DEBUG: get_template_for_broadcast - template_id: {template_id}")
        print(f"DEBUG: template from DB: {template}")
        
        # –§–æ—Ä–º—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
        message_data = {
            'type': template['message_type'],
            'text': template['text']
        }
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª —è–∫—â–æ —î
        if template['file_path'] and os.path.exists(template['file_path']):
            message_data['file_path'] = template['file_path']
            message_data['file_id'] = template['file_id']
            print(f"DEBUG: File exists, added to message_data: {template['file_path']}")
        else:
            print(f"DEBUG: File path: {template['file_path']}, exists: {os.path.exists(template['file_path']) if template['file_path'] else False}")
        
        print(f"DEBUG: Final message_data: {message_data}")
        return message_data
    
    def get_edit_template_keyboard(self, template_id: int) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É"""
        keyboard = [
            [
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É", callback_data=f"edit_template_name_{template_id}"),
                InlineKeyboardButton(text="üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data=f"edit_template_text_{template_id}")
            ],
            [
                InlineKeyboardButton(text="üîÑ –ó–∞–º—ñ–Ω–∏—Ç–∏ –º–µ–¥—ñ–∞", callback_data=f"edit_template_media_{template_id}"),
                InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_template_{template_id}")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_templates")
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_templates_list_keyboard(self) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å–ø–∏—Å–∫–æ–º —à–∞–±–ª–æ–Ω—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
        templates = self.db.get_templates()
        keyboard = []
        
        for template in templates:
            icon = self._get_template_icon(template['message_type'])
            button_text = f"{icon} {template['name']}"
            
            keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"edit_template_{template['id']}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_templates")
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
