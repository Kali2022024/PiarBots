import logging
from aiogram import Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states import GroupStates, DeletePackageStates

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≥—Ä—É–ø
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ (–±—É–¥–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É)
db = None

def init_groups_module(database):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è –≥—Ä—É–ø"""
    global db
    db = database

@router.callback_query(lambda c: c.data == "Groups_for_account")
async def groups_for_account_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä—É–ø"""
    await callback.message.answer("üì¶ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–∞–∫–µ—Ç—É –≥—Ä—É–ø:")
    await state.set_state(GroupStates.waiting_for_package_name)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("select_account_for_group_"))
async def select_account_for_group_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä—É–ø"""
    account_phone = callback.data.replace("select_account_for_group_", "")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç
    await state.update_data(selected_account=account_phone)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –ø–∞–∫–µ—Ç–∏ –≥—Ä—É–ø –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    packages = db.get_group_packages(account_phone)
    
    if packages:
        groups_text = f"üì¶ <b>–ü–∞–∫–µ—Ç–∏ –≥—Ä—É–ø –¥–ª—è {account_phone}:</b>\n\n"
        for package in packages:
            groups_text += f"üì¶ <b>{package['name']}</b> ({package['groups_count']} –≥—Ä—É–ø)\n"
            groups_text += f"   üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {package['created_at']}\n\n"
    else:
        groups_text = f"üì¶ <b>–ü–∞–∫–µ—Ç–∏ –≥—Ä—É–ø –¥–ª—è {account_phone}:</b>\n\n–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É", callback_data="add_new_group")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Groups_for_account")]
    ])
    
    await callback.message.answer(groups_text, parse_mode='HTML', reply_markup=keyboard)
    await callback.answer()

@router.callback_query(lambda c: c.data == "add_new_group")
async def add_new_group_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—Ä—É–ø–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–∫–µ—Ç –≥—Ä—É–ø", callback_data="create_group_package")],
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –æ–¥–Ω—É –≥—Ä—É–ø—É", callback_data="add_single_group")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Groups_for_account")]
    ])
    
    await callback.message.answer(
        "üìù –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä—É–ø:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "create_group_package")
async def create_group_package_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—É –≥—Ä—É–ø"""
    await callback.message.answer("üì¶ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–∞–∫–µ—Ç—É –≥—Ä—É–ø:")
    await state.set_state(GroupStates.waiting_for_package_name)
    await callback.answer()

@router.message(GroupStates.waiting_for_package_name)
async def process_package_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –ø–∞–∫–µ—Ç—É –≥—Ä—É–ø"""
    package_name = message.text.strip()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞–∫–∫–∞—É–Ω—Ç–∏
    accounts = db.get_accounts()
    
    if not accounts:
        await message.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
        await state.clear()
        return
    
    await message.answer(
        f"üì¶ <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—É '{package_name}':</b>\n\n"
        f"üë• <b>–ê–∫–∫–∞—É–Ω—Ç—ñ–≤:</b> {len(accounts)}\n\n"
        f"üìã –í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ ID –≥—Ä—É–ø —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2105953426,2064362674,2133142559):",
        parse_mode='HTML'
    )
    await state.update_data(package_name=package_name)
    await state.set_state(GroupStates.waiting_for_group_list)

@router.callback_query(lambda c: c.data == "add_single_group")
async def add_single_group_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–¥–Ω—ñ—î—ó –≥—Ä—É–ø–∏"""
    await callback.message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏:")
    await state.set_state(GroupStates.waiting_for_group_name)
    await callback.answer()

@router.callback_query(lambda c: c.data == "add_group_list")
async def add_group_list_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥—Ä—É–ø –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞–∫–∫–∞—É–Ω—Ç–∏
    accounts = db.get_accounts()
    
    if not accounts:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤. –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.")
        await callback.answer()
        return
    
    await callback.message.answer(
        f"üìã <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥—Ä—É–ø –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:</b>\n\n"
        f"üë• <b>–ê–∫–∫–∞—É–Ω—Ç—ñ–≤:</b> {len(accounts)}\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ ID –≥—Ä—É–ø —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2105953426,2064362674,2133142559):"
    )
    await state.set_state(GroupStates.waiting_for_group_list)
    await callback.answer()

@router.message(GroupStates.waiting_for_group_name)
async def process_group_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –≥—Ä—É–ø–∏"""
    group_name = message.text.strip()
    await state.update_data(group_name=group_name)
    
    await message.answer("üÜî –í–≤–µ–¥—ñ—Ç—å ID –≥—Ä—É–ø–∏ –∞–±–æ username (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @groupname –∞–±–æ -1001234567890):")
    await state.set_state(GroupStates.waiting_for_group_id)

@router.message(GroupStates.waiting_for_group_id)
async def process_group_id(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ ID –≥—Ä—É–ø–∏"""
    group_id = message.text.strip()
    data = await state.get_data()
    group_name = data['group_name']
    account_phone = data['selected_account']
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ username —Ç–∞ ID
    group_username = None
    if group_id.startswith('@'):
        group_username = group_id
        group_id = group_id[1:]  # –í–∏–¥–∞–ª—è—î–º–æ @
    elif group_id.isdigit():
        # –Ø–∫—â–æ —Ü–µ —á–∏—Å–ª–æ, –¥–æ–¥–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å -100
        if not group_id.startswith('-100'):
            group_id = f"-100{group_id}"
    
    # –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    success = db.add_group(group_name, group_id, group_username, account_phone)
    
    if success:
        await message.answer(f"‚úÖ –ì—Ä—É–ø–∞ '{group_name}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ –¥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}!")
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≥—Ä—É–ø–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    
    await state.clear()

@router.message(GroupStates.waiting_for_group_list)
async def process_group_list(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    group_list_text = message.text.strip()
    data = await state.get_data()
    package_name = data.get('package_name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ –∫–æ–º–∞—Ö
    group_ids = [gid.strip() for gid in group_list_text.split(',') if gid.strip()]
    
    if not group_ids:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞–∫–∫–∞—É–Ω—Ç–∏
    accounts = db.get_accounts()
    
    if not accounts:
        await message.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
        await state.clear()
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–∏–π –∞–∫–∫–∞—É–Ω—Ç —è–∫ –≤–ª–∞—Å–Ω–∏–∫–∞ –ø–∞–∫–µ—Ç—É
    first_account = accounts[0]['phone_number']
    package_id = db.create_group_package(package_name, first_account)
    
    if not package_id:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—É.")
        await state.clear()
        return
    
    # –°–ø–æ—á–∞—Ç–∫—É —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Å–ø–∏—Å–∫—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    unique_groups = []
    seen_groups = set()  # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Å–ø–∏—Å–∫—É
    
    for group_id in group_ids:
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —á–∏—Å–ª–æ
            if not group_id.isdigit():
                continue
            
            # –î–æ–¥–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å -100 –¥–ª—è –≥—Ä—É–ø (—è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î)
            if not group_id.startswith('-100'):
                full_group_id = f"-100{group_id}"
            else:
                full_group_id = group_id
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Å–ø–∏—Å–∫—É
            if full_group_id in seen_groups:
                continue
            seen_groups.add(full_group_id)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥—Ä—É–ø–∞ –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö (–¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)
            if not db.group_exists_in_database(full_group_id):
                unique_groups.append(full_group_id)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥—Ä—É–ø–∏ {group_id}: {e}")
    
    if not unique_groups:
        await message.answer("‚ùå –í—Å—ñ –≥—Ä—É–ø–∏ –∑—ñ —Å–ø–∏—Å–∫—É –≤–∂–µ –¥–æ–¥–∞–Ω—ñ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        await state.clear()
        return
    
    # –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø–∏ –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
    total_added = 0
    total_accounts = len(accounts)
    
    for account in accounts:
        account_phone = account['phone_number']
        added_for_account = 0
        
        for group_id in unique_groups:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏
            group_name = f"–ì—Ä—É–ø–∞ {group_id.replace('-100', '')}"
            
            # –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            success = db.add_group(group_name, group_id, None, account_phone, package_id)
            if success:
                added_for_account += 1
                total_added += 1
        
        logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ {added_for_account} –≥—Ä—É–ø –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = f"""
‚úÖ <b>–ü–∞–∫–µ—Ç –≥—Ä—É–ø '{package_name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!</b>

üì¶ <b>–ü–∞–∫–µ—Ç:</b> {package_name}
üë• <b>–ê–∫–∫–∞—É–Ω—Ç—ñ–≤:</b> {total_accounts}
üìã <b>–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≥—Ä—É–ø:</b> {len(unique_groups)}
‚úÖ <b>–í—Å—å–æ–≥–æ –¥–æ–¥–∞–Ω–æ:</b> {total_added} –∑–∞–ø–∏—Å—ñ–≤

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ì—Ä—É–ø –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {len(unique_groups)}
‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {total_added}
    """
    
    await message.answer(result_text, parse_mode='HTML')
    await state.clear()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—ñ–≤ –≥—Ä—É–ø
@router.callback_query(lambda c: c.data == "delete_group_package")
async def delete_group_package_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—É –≥—Ä—É–ø"""
    await callback.message.answer("üóëÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–∞–∫–µ—Ç—É –≥—Ä—É–ø –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    await state.set_state(DeletePackageStates.waiting_for_package_name)
    await callback.answer()

@router.message(DeletePackageStates.waiting_for_package_name)
async def process_delete_package_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –ø–∞–∫–µ—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    package_name = message.text.strip()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–∞–∫–µ—Ç–∏ –≥—Ä—É–ø
    packages = db.get_all_group_packages()
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–∞–∫–µ—Ç–∏ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é
    matching_packages = [p for p in packages if p['name'].lower() == package_name.lower()]
    
    if not matching_packages:
        await message.answer(f"‚ùå –ü–∞–∫–µ—Ç '{package_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏
    packages_text = f"üîç <b>–ó–Ω–∞–π–¥–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏ –∑ –Ω–∞–∑–≤–æ—é '{package_name}':</b>\n\n"
    
    for i, package in enumerate(matching_packages, 1):
        packages_text += f"{i}. üì¶ <b>{package['name']}</b>\n"
        packages_text += f"   üë§ <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {package['account_phone']}\n"
        packages_text += f"   üìÖ <b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {package['created_at']}\n\n"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    keyboard_buttons = []
    for i, package in enumerate(matching_packages, 1):
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞–∫–µ—Ç {i}",
            callback_data=f"confirm_delete_package_{package['id']}"
        )])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_delete")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(packages_text, parse_mode='HTML', reply_markup=keyboard)
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("confirm_delete_package_"))
async def confirm_delete_package_callback(callback: CallbackQuery):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—É –≥—Ä—É–ø"""
    package_id = int(callback.data.replace("confirm_delete_package_", ""))
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞–∫–µ—Ç
    package = db.get_group_package(package_id)
    
    if not package:
        await callback.message.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–∞–∫–µ—Ç
    success = db.delete_group_package(package_id, package['account_phone'])
    
    if success:
        await callback.message.answer(f"‚úÖ –ü–∞–∫–µ—Ç '{package['name']}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–∞–∫–µ—Ç—É.")
    
    await callback.answer()
