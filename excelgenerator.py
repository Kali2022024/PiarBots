import os
import logging
from datetime import datetime
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

class ExcelGenerator:
    def __init__(self):
        self.workbook = None
        self.worksheet = None
        
    def create_broadcast_statistics_excel(self, statistics: dict, history: list = None) -> str:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ Excel —Ñ–∞–π–ª –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é —Ä–æ–∑—Å–∏–ª–æ–∫"""
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–Ω–∏–≥—É
            self.workbook = Workbook()
            self.worksheet = self.workbook.active
            self.worksheet.title = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫"
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤
            self._setup_styles()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self._add_header()
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self._add_summary_statistics(statistics['total'])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            self._add_account_statistics(statistics['by_accounts'])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ (FloodWait)
            self._add_floodwait_statistics(statistics.get('floodwait_accounts', []))
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞—Ö
            self._add_chat_statistics(statistics['by_chats'])
            
            # –î–µ—Ç–∞–ª—å–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è (—è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–∞)
            if history:
                self._add_detailed_history(history)
            
            # –ê–≤—Ç–æ–ø—ñ–¥–≥–æ–Ω–∫–∞ —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫
            self._auto_adjust_columns()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
            filename = f"broadcast_statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            filepath = os.path.join("media_files", filename)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            os.makedirs("media_files", exist_ok=True)
            
            self.workbook.save(filepath)
            logger.info(f"‚úÖ Excel —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ: {filepath}")
            
            return filepath
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ Excel —Ñ–∞–π–ª—É: {e}")
            return None
    
    def _setup_styles(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ –¥–ª—è Excel"""
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        self.header_font = Font(name='Arial', size=12, bold=True, color='FFFFFF')
        self.header_fill = PatternFill(start_color='366092', end_color='366092', fill_type='solid')
        
        # –ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.subheader_font = Font(name='Arial', size=11, bold=True, color='000000')
        self.subheader_fill = PatternFill(start_color='D9E1F2', end_color='D9E1F2', fill_type='solid')
        
        # –ó–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç
        self.normal_font = Font(name='Arial', size=10)
        
        # –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
        self.center_alignment = Alignment(horizontal='center', vertical='center')
        self.left_alignment = Alignment(horizontal='left', vertical='center')
        
        # –†–∞–º–∫–∏
        self.thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
    
    def _add_header(self):
        """–î–æ–¥–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        self.worksheet.merge_cells('A1:F1')
        header_cell = self.worksheet['A1']
        header_cell.value = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫ - {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        header_cell.font = self.header_font
        header_cell.fill = self.header_fill
        header_cell.alignment = self.center_alignment
        header_cell.border = self.thin_border
        
        # –ü—Ä–æ–ø—É—Å–∫ —Ä—è–¥–∫–∞
        self.current_row = 3
    
    def _add_summary_statistics(self, total_stats: dict):
        """–î–æ–¥–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó
        self.worksheet.merge_cells(f'A{self.current_row}:F{self.current_row}')
        section_cell = self.worksheet[f'A{self.current_row}']
        section_cell.value = "üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        section_cell.font = self.subheader_font
        section_cell.fill = self.subheader_fill
        section_cell.alignment = self.center_alignment
        section_cell.border = self.thin_border
        self.current_row += 1
        
        # –î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_data = [
            ["–ü–æ–∫–∞–∑–Ω–∏–∫", "–ó–Ω–∞—á–µ–Ω–Ω—è"],
            ["–í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–æ–∫", total_stats['total_sends']],
            ["–£—Å–ø—ñ—à–Ω–∏—Ö –≤—ñ–¥–ø—Ä–∞–≤–æ–∫", total_stats['successful_sends']],
            ["–ù–µ–≤–¥–∞–ª–∏—Ö –≤—ñ–¥–ø—Ä–∞–≤–æ–∫", total_stats['failed_sends']],
            ["–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —á–∞—Ç—ñ–≤", total_stats['unique_chats']],
            ["–ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤", total_stats['unique_accounts']],
            ["–í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ", f"{(total_stats['successful_sends'] / max(total_stats['total_sends'], 1) * 100):.1f}%"]
        ]
        
        for row_data in stats_data:
            for col_idx, value in enumerate(row_data, 1):
                cell = self.worksheet.cell(row=self.current_row, column=col_idx)
                cell.value = value
                cell.font = self.normal_font
                cell.alignment = self.left_alignment
                cell.border = self.thin_border
                
                # –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
                if col_idx == 1:
                    cell.font = Font(name='Arial', size=10, bold=True)
                    cell.fill = PatternFill(start_color='F2F2F2', end_color='F2F2F2', fill_type='solid')
            self.current_row += 1
        
        # –ü—Ä–æ–ø—É—Å–∫ —Ä—è–¥–∫–∞
        self.current_row += 1
    
    def _add_account_statistics(self, account_stats: list):
        """–î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö"""
        if not account_stats:
            return
            
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó
        self.worksheet.merge_cells(f'A{self.current_row}:F{self.current_row}')
        section_cell = self.worksheet[f'A{self.current_row}']
        section_cell.value = "üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö"
        section_cell.font = self.subheader_font
        section_cell.fill = self.subheader_fill
        section_cell.alignment = self.center_alignment
        section_cell.border = self.thin_border
        self.current_row += 1
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        headers = ["–ê–∫–∫–∞—É–Ω—Ç", "–Ü–º'—è", "–í—Å—å–æ–≥–æ", "–£—Å–ø—ñ—à–Ω–æ", "–ù–µ–≤–¥–∞–ª–æ", "–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å"]
        for col_idx, header in enumerate(headers, 1):
            cell = self.worksheet.cell(row=self.current_row, column=col_idx)
            cell.value = header
            cell.font = self.subheader_font
            cell.fill = self.subheader_fill
            cell.alignment = self.center_alignment
            cell.border = self.thin_border
        self.current_row += 1
        
        # –î–∞–Ω—ñ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        for account_data in account_stats:
            phone, first_name, last_name, total, successful, failed = account_data
            
            # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è –∞–∫–∫–∞—É–Ω—Ç–∞
            account_name = f"{first_name or ''} {last_name or ''}".strip()
            if not account_name:
                account_name = phone
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å
            success_rate = (successful / max(total, 1)) * 100
            
            row_data = [phone, account_name, total, successful, failed, f"{success_rate:.1f}%"]
            
            for col_idx, value in enumerate(row_data, 1):
                cell = self.worksheet.cell(row=self.current_row, column=col_idx)
                cell.value = value
                cell.font = self.normal_font
                cell.alignment = self.center_alignment
                cell.border = self.thin_border
                
                # –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
                if col_idx == 6:  # –ö–æ–ª–æ–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
                    if success_rate >= 90:
                        cell.fill = PatternFill(start_color='C6EFCE', end_color='C6EFCE', fill_type='solid')
                    elif success_rate >= 70:
                        cell.fill = PatternFill(start_color='FFEB9C', end_color='FFEB9C', fill_type='solid')
                    else:
                        cell.fill = PatternFill(start_color='FFC7CE', end_color='FFC7CE', fill_type='solid')
            
            self.current_row += 1
        
        # –ü—Ä–æ–ø—É—Å–∫ —Ä—è–¥–∫–∞
        self.current_row += 1
    
    def _add_floodwait_statistics(self, floodwait_stats: list):
        """–î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ (FloodWait)"""
        if not floodwait_stats:
            return
            
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó
        self.worksheet.merge_cells(f'A{self.current_row}:D{self.current_row}')
        section_cell = self.worksheet[f'A{self.current_row}']
        section_cell.value = "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∏ (FloodWait)"
        section_cell.font = self.subheader_font
        section_cell.fill = PatternFill(start_color='FFEB9C', end_color='FFEB9C', fill_type='solid')  # –ñ–æ–≤—Ç–∏–π —Ñ–æ–Ω
        section_cell.alignment = self.center_alignment
        section_cell.border = self.thin_border
        self.current_row += 1
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        headers = ["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å FloodWait", "–û—Å—Ç–∞–Ω–Ω—ñ–π FloodWait", "–°—Ç–∞—Ç—É—Å"]
        for col_idx, header in enumerate(headers, 1):
            cell = self.worksheet.cell(row=self.current_row, column=col_idx)
            cell.value = header
            cell.font = self.subheader_font
            cell.fill = PatternFill(start_color='FFEB9C', end_color='FFEB9C', fill_type='solid')
            cell.alignment = self.center_alignment
            cell.border = self.thin_border
        self.current_row += 1
        
        # –î–∞–Ω—ñ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
        for account_data in floodwait_stats:
            phone, floodwait_count, last_floodwait = account_data
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ FloodWait
            if last_floodwait:
                try:
                    if isinstance(last_floodwait, str):
                        last_date = datetime.fromisoformat(last_floodwait.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
                    else:
                        last_date = str(last_floodwait)
                except:
                    last_date = str(last_floodwait)
            else:
                last_date = "–ù–µ–≤—ñ–¥–æ–º–æ"
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º–Ω–æ—Å—Ç—ñ
            if floodwait_count >= 10:
                status = "üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∏–π"
                status_color = 'FFC7CE'  # –ß–µ—Ä–≤–æ–Ω–∏–π
            elif floodwait_count >= 5:
                status = "üü° –ü—Ä–æ–±–ª–µ–º–Ω–∏–π"
                status_color = 'FFEB9C'  # –ñ–æ–≤—Ç–∏–π
            else:
                status = "üü† –£–≤–∞–≥–∞"
                status_color = 'FFD8CC'  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
            
            row_data = [phone, floodwait_count, last_date, status]
            
            for col_idx, value in enumerate(row_data, 1):
                cell = self.worksheet.cell(row=self.current_row, column=col_idx)
                cell.value = value
                cell.font = self.normal_font
                cell.alignment = self.center_alignment
                cell.border = self.thin_border
                
                # –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
                if col_idx == 4:  # –ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å—É
                    cell.fill = PatternFill(start_color=status_color, end_color=status_color, fill_type='solid')
                elif col_idx == 1:  # –ö–æ–ª–æ–Ω–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
                    cell.fill = PatternFill(start_color='FFEB9C', end_color='FFEB9C', fill_type='solid')
            
            self.current_row += 1
        
        # –ü—Ä–æ–ø—É—Å–∫ —Ä—è–¥–∫–∞
        self.current_row += 1
    
    def _add_chat_statistics(self, chat_stats: list):
        """–î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Ç–∞—Ö"""
        if not chat_stats:
            return
            
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó
        self.worksheet.merge_cells(f'A{self.current_row}:F{self.current_row}')
        section_cell = self.worksheet[f'A{self.current_row}']
        section_cell.value = "üí¨ –¢–æ–ø —á–∞—Ç—ñ–≤ –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–æ–∫"
        section_cell.font = self.subheader_font
        section_cell.fill = self.subheader_fill
        section_cell.alignment = self.center_alignment
        section_cell.border = self.thin_border
        self.current_row += 1
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        headers = ["ID —á–∞—Ç—É", "–ù–∞–∑–≤–∞ —á–∞—Ç—É", "–í—Å—å–æ–≥–æ", "–£—Å–ø—ñ—à–Ω–æ", "–ù–µ–≤–¥–∞–ª–æ", "–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å"]
        for col_idx, header in enumerate(headers, 1):
            cell = self.worksheet.cell(row=self.current_row, column=col_idx)
            cell.value = header
            cell.font = self.subheader_font
            cell.fill = self.subheader_fill
            cell.alignment = self.center_alignment
            cell.border = self.thin_border
        self.current_row += 1
        
        # –î–∞–Ω—ñ –ø–æ —á–∞—Ç–∞—Ö
        for chat_data in chat_stats:
            chat_id, chat_title, total, successful, failed = chat_data
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å
            success_rate = (successful / max(total, 1)) * 100
            
            row_data = [chat_id, chat_title or "–ë–µ–∑ –Ω–∞–∑–≤–∏", total, successful, failed, f"{success_rate:.1f}%"]
            
            for col_idx, value in enumerate(row_data, 1):
                cell = self.worksheet.cell(row=self.current_row, column=col_idx)
                cell.value = value
                cell.font = self.normal_font
                cell.alignment = self.center_alignment
                cell.border = self.thin_border
                
                # –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
                if col_idx == 6:  # –ö–æ–ª–æ–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
                    if success_rate >= 90:
                        cell.fill = PatternFill(start_color='C6EFCE', end_color='C6EFCE', fill_type='solid')
                    elif success_rate >= 70:
                        cell.fill = PatternFill(start_color='FFEB9C', end_color='FFEB9C', fill_type='solid')
                    else:
                        cell.fill = PatternFill(start_color='FFC7CE', end_color='FFC7CE', fill_type='solid')
            
            self.current_row += 1
        
        # –ü—Ä–æ–ø—É—Å–∫ —Ä—è–¥–∫–∞
        self.current_row += 1
    
    def _add_detailed_history(self, history: list):
        """–î–æ–¥–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é"""
        if not history:
            return
            
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó
        self.worksheet.merge_cells(f'A{self.current_row}:I{self.current_row}')
        section_cell = self.worksheet[f'A{self.current_row}']
        section_cell.value = "üìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—Å–∏–ª–æ–∫"
        section_cell.font = self.subheader_font
        section_cell.fill = self.subheader_fill
        section_cell.alignment = self.center_alignment
        section_cell.border = self.thin_border
        self.current_row += 1
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        headers = ["–î–∞—Ç–∞/–ß–∞—Å", "–ê–∫–∫–∞—É–Ω—Ç", "ID —á–∞—Ç—É", "–ù–∞–∑–≤–∞ —á–∞—Ç—É", "–¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–°—Ç–∞—Ç—É—Å", "–ü–æ–º–∏–ª–∫–∞/FloodWait", "Broadcast ID", "–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"]
        for col_idx, header in enumerate(headers, 1):
            cell = self.worksheet.cell(row=self.current_row, column=col_idx)
            cell.value = header
            cell.font = self.subheader_font
            cell.fill = self.subheader_fill
            cell.alignment = self.center_alignment
            cell.border = self.thin_border
        self.current_row += 1
        
        # –ü—ñ–¥—Ä–∞—Ö—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        floodwait_accounts = set()
        successful_chats = set()
        total_messages = len(history)
        successful_messages = 0
        failed_messages = 0
        
        # –î–∞–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó
        for record in history:
            if len(record) < 12:
                continue
                
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: id, broadcast_id, account_phone, chat_id, chat_title, 
            # message_type, message_text, file_path, file_id, success, error_message, sent_at, ...
            record_id = record[0]
            broadcast_id = record[1]
            account_phone = record[2]
            chat_id = record[3] 
            chat_title = record[4]
            message_type = record[5]
            message_text = record[6] if record[6] else ""
            file_path = record[7] if record[7] else ""
            file_id = record[8] if record[8] else ""
            success = bool(record[9]) if record[9] is not None else False
            error_message = record[10] if record[10] else ""
            sent_at = record[11]
            
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if success:
                successful_messages += 1
            else:
                failed_messages += 1
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
            if sent_at:
                try:
                    if isinstance(sent_at, str):
                        date_str = datetime.fromisoformat(sent_at.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
                    else:
                        date_str = str(sent_at)
                except:
                    date_str = str(sent_at)
            else:
                date_str = "–ù–µ–≤—ñ–¥–æ–º–æ"
            
            # –°—Ç–∞—Ç—É—Å —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è –ø–æ–º–∏–ª–æ–∫
            if success:
                status = "‚úÖ –£—Å–ø—ñ—à–Ω–æ"
                successful_chats.add(str(chat_id))
            else:
                if error_message and isinstance(error_message, str) and "FloodWait" in error_message:
                    status = "‚è≥ FloodWait"
                    floodwait_accounts.add(str(account_phone))
                else:
                    status = "‚ùå –ü–æ–º–∏–ª–∫–∞"
            
            # –°–∫–æ—Ä–æ—á—É—î–º–æ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if message_text and isinstance(message_text, str) and len(message_text) > 50:
                short_message = message_text[:50] + "..."
            else:
                short_message = str(message_text) if message_text else ""
            
            row_data = [
                date_str,
                account_phone,
                chat_id,
                chat_title or "–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞",
                message_type or "text",
                status,
                error_message or "",
                broadcast_id,
                short_message
            ]
            
            for col_idx, value in enumerate(row_data, 1):
                cell = self.worksheet.cell(row=self.current_row, column=col_idx)
                cell.value = value
                cell.font = self.normal_font
                cell.alignment = self.left_alignment
                cell.border = self.thin_border
                
                # –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
                if col_idx == 6:  # –ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å—É
                    if success:
                        cell.fill = PatternFill(start_color='C6EFCE', end_color='C6EFCE', fill_type='solid')
                    elif "FloodWait" in status:
                        cell.fill = PatternFill(start_color='FFEB9C', end_color='FFEB9C', fill_type='solid')
                    else:
                        cell.fill = PatternFill(start_color='FFC7CE', end_color='FFC7CE', fill_type='solid')
                
                # –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
                if col_idx == 2 and account_phone in floodwait_accounts:  # –ö–æ–ª–æ–Ω–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
                    cell.fill = PatternFill(start_color='FFEB9C', end_color='FFEB9C', fill_type='solid')
            
            self.current_row += 1
        
        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.current_row += 1
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—ñ–¥—Å—É–º–∫—É
        self.worksheet.merge_cells(f'A{self.current_row}:I{self.current_row}')
        summary_cell = self.worksheet[f'A{self.current_row}']
        summary_cell.value = "üìä –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        summary_cell.font = self.subheader_font
        summary_cell.fill = self.subheader_fill
        summary_cell.alignment = self.center_alignment
        summary_cell.border = self.thin_border
        self.current_row += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary_data = [
            ["–ü–æ–∫–∞–∑–Ω–∏–∫", "–ó–Ω–∞—á–µ–Ω–Ω—è"],
            ["–í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", total_messages],
            ["–£—Å–ø—ñ—à–Ω–∏—Ö –≤—ñ–¥–ø—Ä–∞–≤–æ–∫", successful_messages],
            ["–ù–µ–≤–¥–∞–ª–∏—Ö –≤—ñ–¥–ø—Ä–∞–≤–æ–∫", failed_messages],
            ["–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —á–∞—Ç—ñ–≤ (—É—Å–ø—ñ—à–Ω—ñ)", len(successful_chats)],
            ["–ü—Ä–æ–±–ª–µ–º–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ (FloodWait)", len(floodwait_accounts)],
            ["–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å (%)", f"{(successful_messages / max(total_messages, 1) * 100):.1f}%"]
        ]
        
        if floodwait_accounts:
            summary_data.append(["–ê–∫–∫–∞—É–Ω—Ç–∏ –∑ FloodWait", ", ".join(sorted(floodwait_accounts))])
        
        for row_data in summary_data:
            for col_idx, value in enumerate(row_data, 1):
                cell = self.worksheet.cell(row=self.current_row, column=col_idx)
                cell.value = value
                cell.font = self.normal_font
                cell.alignment = self.left_alignment
                cell.border = self.thin_border
                
                # –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
                if col_idx == 1:
                    cell.font = Font(name='Arial', size=10, bold=True)
                    cell.fill = PatternFill(start_color='F2F2F2', end_color='F2F2F2', fill_type='solid')
            self.current_row += 1
    
    def _auto_adjust_columns(self):
        """–ê–≤—Ç–æ–ø—ñ–¥–≥–æ–Ω–∫–∞ —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫"""
        for column in self.worksheet.columns:
            max_length = 0
            column_letter = get_column_letter(column[0].column)
            
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            
            adjusted_width = min(max_length + 2, 50)  # –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤
            self.worksheet.column_dimensions[column_letter].width = adjusted_width
