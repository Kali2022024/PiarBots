import asyncio
import random
import os
import logging
from aiogram.fsm.context import FSMContext
from states import RegistrationStates

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –µ–º–æ–¥–∑—ñ —Ç–∞ —Å—Ç–∏–∫–µ—Ä—ñ–≤
RANDOM_EMOJIS = ['üòä', 'üëç', 'üî•', 'üíØ', '‚ú®', 'üéâ', 'üöÄ', 'üí™', '‚≠ê', '‚ù§Ô∏è', 'üòç', 'ü§©', 'üíñ', 'üåü', 'üéä', 'üéà', 'üéÅ', 'üèÜ', 'ü•á', 'üíé']

def add_random_emoji_to_text(text: str) -> str:
    """–î–æ–¥–∞—î –≤–∏–ø–∞–¥–∫–æ–≤—ñ –µ–º–æ—Ü—ñ—ó –¥–æ —Ç–µ–∫—Å—Ç—É"""
    # –í–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±–∏—Ä–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–º–æ—Ü—ñ–π (1-3)
    num_emojis = random.randint(1, 3)
    
    # –í–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±–∏—Ä–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –µ–º–æ—Ü—ñ–π
    positions = random.sample(range(len(text) + 1), min(num_emojis, len(text) + 1))
    positions.sort()
    
    # –î–æ–¥–∞—î–º–æ –µ–º–æ—Ü—ñ—ó
    result = text
    for i, pos in enumerate(positions):
        emoji = random.choice(RANDOM_EMOJIS)
        result = result[:pos + i] + emoji + result[pos + i:]
    
    return result

async def simulate_typing(client, entity, duration: int = None):
    """–Ü–º—ñ—Ç—É—î —Å—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç...'"""
    if duration is None:
        duration = random.randint(2, 5)  # 2-5 —Å–µ–∫—É–Ω–¥
    
    try:
        await client.send_read_acknowledge(entity)
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        action = client.action(entity, 'typing')
        await action
        await asyncio.sleep(duration)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º—ñ—Ç—É–≤–∞—Ç–∏ –¥—Ä—É–∫: {e}")

async def add_random_pause():
    """–î–æ–¥–∞—î –≤–∏–ø–∞–¥–∫–æ–≤—É –ø–∞—É–∑—É –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    # –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–∞—É–∑–∞ –≤—ñ–¥ 1 –¥–æ 3 —Å–µ–∫—É–Ω–¥
    pause_time = random.uniform(1.0, 3.0)
    await asyncio.sleep(pause_time)

def should_send_sticker() -> bool:
    """–í–∏–∑–Ω–∞—á–∞—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–∏–∫–µ—Ä –∑–∞–º—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É"""
    # 10% —à–∞–Ω—Å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–∏–∫–µ—Ä
    return random.random() < 0.1

def get_media_type_from_file(file_path: str) -> str:
    """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º"""
    extension = os.path.splitext(file_path.lower())[1]
    
    image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp']
    video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.webm', '.flv']
    audio_extensions = ['.mp3', '.wav', '.ogg', '.m4a', '.flac', '.aac']
    
    if extension in image_extensions:
        return 'photo'
    elif extension in video_extensions:
        return 'video'
    elif extension in audio_extensions:
        return 'audio'
    else:
        return 'document'

async def download_media_file(bot, file_id: str, file_path: str) -> bool:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –º–µ–¥—ñ–∞-—Ñ–∞–π–ª –∑ Telegram"""
    try:
        file = await bot.get_file(file_id)
        await bot.download_file(file.file_path, file_path)
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É {file_id}: {e}")
        return False

def should_add_emoji_to_caption() -> bool:
    """–í–∏–∑–Ω–∞—á–∞—î —á–∏ –¥–æ–¥–∞–≤–∞—Ç–∏ –µ–º–æ—Ü—ñ—ó –¥–æ –ø—ñ–¥–ø–∏—Å—É –º–µ–¥—ñ–∞"""
    # 70% —à–∞–Ω—Å –¥–æ–¥–∞—Ç–∏ –µ–º–æ—Ü—ñ—ó –¥–æ –ø—ñ–¥–ø–∏—Å—É
    return random.random() < 0.7

def should_send_sticker_with_media() -> bool:
    """–í–∏–∑–Ω–∞—á–∞—î —á–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Å—Ç–∏–∫–µ—Ä —Ä–∞–∑–æ–º –∑ –º–µ–¥—ñ–∞"""
    # 15% —à–∞–Ω—Å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–∏–∫–µ—Ä —Ä–∞–∑–æ–º –∑ –º–µ–¥—ñ–∞
    return random.random() < 0.15

# ========== –°–ü–Ü–õ–¨–ù–Ü –§–£–ù–ö–¶–Ü–á ==========

async def show_accounts_list(message_or_callback, db):
    """–°–ø—ñ–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    try:
        accounts = db.get_accounts()
        
        if not accounts:
            text = "üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register_number –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."
            if hasattr(message_or_callback, 'message'):
                await message_or_callback.message.answer(text)
                await message_or_callback.answer()
            else:
                await message_or_callback.answer(text)
            return
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
        accounts_text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:</b>\n\n"
        
        for i, account in enumerate(accounts, 1):
            status_emoji = "‚úÖ" if account['is_active'] else "‚ùå"
            accounts_text += f"{i}. {status_emoji} <b>{account['phone_number']}</b>\n"
            accounts_text += f"   üë§ {account['first_name'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'} {account['last_name'] or ''}\n"
            if account['username']:
                accounts_text += f"   üîó @{account['username']}\n"
            accounts_text += f"   üÜî ID: {account['user_id']}\n"
            accounts_text += f"   üìÖ –î–æ–¥–∞–Ω–æ: {account['created_at']}\n"
            if account['last_used']:
                accounts_text += f"   üïí –û—Å—Ç–∞–Ω–Ω—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {account['last_used']}\n"
            accounts_text += "\n"
        
        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ, —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        if len(accounts_text) > 4000:
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª—ñ–≤
            parts = []
            current_part = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:</b>\n\n"
            
            for i, account in enumerate(accounts, 1):
                account_text = f"{i}. ‚úÖ <b>{account['phone_number']}</b>\n"
                account_text += f"   üë§ {account['first_name'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'} {account['last_name'] or ''}\n"
                if account['username']:
                    account_text += f"   üîó @{account['username']}\n"
                account_text += f"   üÜî ID: {account['user_id']}\n"
                account_text += f"   üìÖ –î–æ–¥–∞–Ω–æ: {account['created_at']}\n\n"
                
                if len(current_part + account_text) > 4000:
                    parts.append(current_part)
                    current_part = account_text
                else:
                    current_part += account_text
            
            if current_part:
                parts.append(current_part)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω–∏
            for part in parts:
                if hasattr(message_or_callback, 'message'):
                    await message_or_callback.message.answer(part, parse_mode='HTML')
                else:
                    await message_or_callback.answer(part, parse_mode='HTML')
        else:
            if hasattr(message_or_callback, 'message'):
                await message_or_callback.message.answer(accounts_text, parse_mode='HTML')
                await message_or_callback.answer()
            else:
                await message_or_callback.answer(accounts_text, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç—ñ–≤: {e}")
        error_text = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer(error_text)
            await message_or_callback.answer()
        else:
            await message_or_callback.answer(error_text)

async def start_registration_process(message_or_callback, state: FSMContext):
    """–°–ø—ñ–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"""
    text = "üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (—Ñ–æ—Ä–º–∞—Ç +380XXXXXXXXX):"
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.answer(text)
    else:
        await message_or_callback.answer(text)
    await state.set_state(RegistrationStates.waiting_for_phone)
