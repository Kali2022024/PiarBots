import asyncio
import logging
import os
import random
import sqlite3
from aiogram import Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from telethon import TelegramClient
from telethon.errors import FloodWaitError
from states import MassBroadcastStates
from utils import download_media_file
from templates import TemplateManager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
router = Router()

async def handle_stop_message_command(message: Message, state: FSMContext):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /stop_message"""
    # –ü–∞—Ä—Å–∏–º–æ –∫–æ–º–∞–Ω–¥—É
    command_parts = message.text.strip().split()
    
    if len(command_parts) == 1:
        # –ó—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
        await state.update_data(stop_broadcast=True)
        
        try:
            with sqlite3.connect(db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE broadcast_status 
                    SET status = 'completed', finished_at = CURRENT_TIMESTAMP
                    WHERE status IN ('pending', 'running')
                """)
                updated_count = cursor.rowcount
                conn.commit()
                
            if updated_count > 0:
                await message.answer(f"üõë <b>–ö–æ–º–∞–Ω–¥–∞ –∑—É–ø–∏–Ω–∫–∏ –≤—Å—ñ—Ö —Ä–æ–∑—Å–∏–ª–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–∞!</b>\n\n"
                                   f"‚úÖ –ó—É–ø–∏–Ω–µ–Ω–æ {updated_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫\n"
                                   f"üîÑ –¶–∏–∫–ª—ñ—á–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –±—É–¥—É—Ç—å –∑—É–ø–∏–Ω–µ–Ω—ñ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª—É\n\n"
                                   f"üìä –í—Å—ñ –∞–∫–∫–∞—É–Ω—Ç–∏ —Ç–µ–ø–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –Ω–æ–≤–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫.",
                                   parse_mode='HTML')
            else:
                await message.answer("üõë <b>–ö–æ–º–∞–Ω–¥–∞ –∑—É–ø–∏–Ω–∫–∏ –≤—Å—ñ—Ö —Ä–æ–∑—Å–∏–ª–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–∞!</b>\n\n"
                                   "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n"
                                   "üîÑ –¶–∏–∫–ª—ñ—á–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –±—É–¥—É—Ç—å –∑—É–ø–∏–Ω–µ–Ω—ñ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª—É",
                                   parse_mode='HTML')
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –≤—Å—ñ—Ö —Ä–æ–∑—Å–∏–ª–æ–∫: {e}")
            await message.answer("üõë <b>–ö–æ–º–∞–Ω–¥–∞ –∑—É–ø–∏–Ω–∫–∏ –≤—Å—ñ—Ö —Ä–æ–∑—Å–∏–ª–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–∞!</b>\n\n"
                               "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—ñ–≤, –∞–ª–µ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                               parse_mode='HTML')
    
    elif len(command_parts) == 2:
        # –ó—É–ø–∏–Ω—è—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        phone_number = command_parts[1]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–∫–∫–∞—É–Ω—Ç —ñ—Å–Ω—É—î
        accounts = db.get_accounts()
        account_exists = any(acc['phone_number'] == phone_number for acc in accounts)
        
        if not account_exists:
            await message.answer(f"‚ùå <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!</b>\n\n"
                               f"üì± –ù–æ–º–µ—Ä: {phone_number}\n"
                               f"‚ÑπÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                               parse_mode='HTML')
            return True
        
        try:
            with sqlite3.connect(db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE broadcast_status 
                    SET status = 'completed', finished_at = CURRENT_TIMESTAMP
                    WHERE account_phone = ? AND status IN ('pending', 'running')
                """, (phone_number,))
                updated_count = cursor.rowcount
                conn.commit()
            
            # –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç Telegram –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            disconnect_success = await disconnect_account_client(phone_number)
                
            if updated_count > 0:
                disconnect_info = "üîå –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π" if disconnect_success else "‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –Ω–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π"
                await message.answer(f"üõë <b>–ö–æ–º–∞–Ω–¥–∞ –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞!</b>\n\n"
                                   f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {phone_number}\n"
                                   f"‚úÖ –ó—É–ø–∏–Ω–µ–Ω–æ {updated_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫\n"
                                   f"{disconnect_info}\n\n"
                                   f"üìä –ê–∫–∫–∞—É–Ω—Ç —Ç–µ–ø–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –Ω–æ–≤–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫.",
                                   parse_mode='HTML')
            else:
                disconnect_info = "üîå –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π" if disconnect_success else "‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –Ω–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π"
                await message.answer(f"üõë <b>–ö–æ–º–∞–Ω–¥–∞ –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞!</b>\n\n"
                                   f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {phone_number}\n"
                                   f"‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫ –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n"
                                   f"{disconnect_info}",
                                   parse_mode='HTML')
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone_number}: {e}")
            await message.answer(f"üõë <b>–ö–æ–º–∞–Ω–¥–∞ –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞!</b>\n\n"
                               f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {phone_number}\n"
                               f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—ñ–≤",
                               parse_mode='HTML')
    
    else:
        # –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏
        await message.answer("‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏!</b>\n\n"
                           "üìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:</b>\n"
                           "‚Ä¢ <code>/stop_message</code> - –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ —Ä–æ–∑—Å–∏–ª–∫–∏\n"
                           "‚Ä¢ <code>/stop_message +380123456789</code> - –∑—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
                           parse_mode='HTML')
    
    return True

async def disconnect_account_client(account_phone: str) -> bool:
    """–í—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç Telegram –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ—î—Å—Ç—Ä –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
        global active_clients
        if account_phone in active_clients:
            client = active_clients[account_phone]
            if client.is_connected():
                logger.info(f"üîå –ó–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –≤ —Ä–µ—î—Å—Ç—Ä—ñ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}, –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ...")
                await client.disconnect()
                unregister_active_client(account_phone)
                logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –∑ —Ä–µ—î—Å—Ç—Ä—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone} –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π")
        
        # –¢–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–ª—ñ—î–Ω—Ç —á–µ—Ä–µ–∑ database.py
        existing_client = db.get_client(account_phone) if hasattr(db, 'get_client') else None
        
        if existing_client and existing_client.is_connected():
            logger.info(f"üîå –ó–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç —á–µ—Ä–µ–∑ DB –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}, –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ...")
            await existing_client.disconnect()
            logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç —á–µ—Ä–µ–∑ DB –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone} –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ —ñ–º–µ–Ω–∞ —Å–µ—Å—ñ–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        phone_clean = account_phone.replace('+', '').replace('-', '')
        session_names = [
            f"sessions/temp_{phone_clean}",
            f"session_{phone_clean}",
            f"session_{account_phone}",
            f"session.session"  # –∑–∞–≥–∞–ª—å–Ω–∞ —Å–µ—Å—ñ—è
        ]
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∞
        accounts = db.get_accounts()
        account = None
        for acc in accounts:
            if acc['phone_number'] == account_phone:
                account = acc
                break
        
        if not account:
            logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
            return False
        
        disconnected_any = False
        
        # –ü—Ä–æ–±—É—î–º–æ –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Å–µ—Å—ñ—ó
        for session_name in session_names:
            try:
                logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Å—ñ—é: {session_name}")
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–∂–ª–∏–≤–æ—ó —Å–µ—Å—ñ—ó
                client = TelegramClient(session_name, account['api_id'], account['api_hash'])
                
                # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω
                await client.connect()
                
                if await client.is_user_authorized():
                    logger.info(f"üîå –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç: {session_name}")
                    await client.disconnect()
                    disconnected_any = True
                    logger.info(f"‚úÖ –ö–ª—ñ—î–Ω—Ç {session_name} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π")
                else:
                    await client.disconnect()
                    logger.info(f"‚ÑπÔ∏è –ö–ª—ñ—î–Ω—Ç {session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
                    
            except Exception as session_error:
                logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ —Å–µ—Å—ñ—î—é {session_name}: {session_error}")
                continue
        
        if disconnected_any:
            logger.info(f"‚úÖ –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
            return True
        else:
            logger.info(f"‚ÑπÔ∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
            return True  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ True, –æ—Å–∫—ñ–ª—å–∫–∏ –º–µ—Ç–∞ –¥–æ—Å—è–≥–Ω—É—Ç–∞ - –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑'—î–¥–Ω–∞–Ω—å
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}: {e}")
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ (–±—É–¥—É—Ç—å —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É)
db = None
bot = None
template_manager = None

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ä–µ—î—Å—Ç—Ä –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
active_clients = {}

def register_active_client(account_phone: str, client):
    """–†–µ—î—Å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç"""
    global active_clients
    active_clients[account_phone] = client
    logger.info(f"üìã –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è {account_phone}")

def unregister_active_client(account_phone: str):
    """–í–∏–¥–∞–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç –∑ —Ä–µ—î—Å—Ç—Ä—É"""
    global active_clients
    if account_phone in active_clients:
        del active_clients[account_phone]
        logger.info(f"üìã –í–∏–¥–∞–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç –∑ —Ä–µ—î—Å—Ç—Ä—É –¥–ª—è {account_phone}")

async def disconnect_all_active_clients():
    """–í—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏"""
    global active_clients
    for account_phone, client in list(active_clients.items()):
        try:
            if client.is_connected():
                await client.disconnect()
                logger.info(f"‚úÖ –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è {account_phone}")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ {account_phone}: {e}")
        finally:
            unregister_active_client(account_phone)

def init_mass_broadcast_module(database, telegram_bot):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    global db, bot, template_manager
    db = database
    bot = telegram_bot
    template_manager = TemplateManager(telegram_bot)

def get_media_type_names():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –Ω–∞–∑–≤ —Ç–∏–ø—ñ–≤ –º–µ–¥—ñ–∞"""
    return {
        "photo": "üñºÔ∏è —Ñ–æ—Ç–æ",
        "audio": "üéµ –∞—É–¥—ñ–æ", 
        "video": "üé¨ –≤—ñ–¥–µ–æ",
        "document": "üìÑ –¥–æ–∫—É–º–µ–Ω—Ç",
        "animation": "üé¨ –≥—ñ—Ñ–∫–∞",
        "sticker": "üé≠ —Å—Ç—ñ–∫–µ—Ä",
        "voice": "üé§ –≥–æ–ª–æ—Å–æ–≤–µ"
    }

async def handle_media_type_selection(message_type: str, phone: str = None, is_mass_broadcast: bool = False):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ç–∏–ø—É –º–µ–¥—ñ–∞ —Ç–∞ –ø–æ–∫–∞–∑—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–Ω–æ–ø–∫–∏"""
    media_type_names = get_media_type_names()
    
    if message_type in ("voice", "sticker"):
        # –î–ª—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö —Ç–∞ —Å—Ç—ñ–∫–µ—Ä—ñ–≤ —Ç—ñ–ª—å–∫–∏ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É
        if is_mass_broadcast:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìé –ë–µ–∑ –ø—ñ–¥–ø–∏—Å—É", callback_data="mass_media_no_caption")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Mass_broadcast")]
            ])
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìé –ë–µ–∑ –ø—ñ–¥–ø–∏—Å—É", callback_data="media_no_caption")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"mass_account_message_{phone}")]
            ])
    else:
        # –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –º–µ–¥—ñ–∞ - –∑ –ø—ñ–¥–ø–∏—Å–æ–º –∞–±–æ –±–µ–∑
        if is_mass_broadcast:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìé –ë–µ–∑ –ø—ñ–¥–ø–∏—Å—É", callback_data="mass_media_no_caption")],
                [InlineKeyboardButton(text="üìù –ó –ø—ñ–¥–ø–∏—Å–æ–º", callback_data="mass_media_with_caption")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Mass_broadcast")]
            ])
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìé –ë–µ–∑ –ø—ñ–¥–ø–∏—Å—É", callback_data="media_no_caption")],
                [InlineKeyboardButton(text="üìù –ó –ø—ñ–¥–ø–∏—Å–æ–º", callback_data="media_with_caption")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"mass_account_message_{phone}")]
            ])
    
    return keyboard, media_type_names[message_type]


async def process_media_file_common(message, message_type, phone, media_dir):
    """–ó–∞–≥–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤"""
    file_id = None
    file_path = None
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –º–µ–¥—ñ–∞ —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ file_id
    if message_type == "photo" and message.photo:
        file_id = message.photo[-1].file_id
        file_path = f"{media_dir}/photo_{file_id}.jpg"
    elif message_type == "audio" and message.audio:
        file_id = message.audio.file_id
        file_path = f"{media_dir}/audio_{file_id}.mp3"
    elif message_type == "video" and message.video:
        file_id = message.video.file_id
        file_path = f"{media_dir}/video_{file_id}.mp4"
    elif message_type == "document" and message.document:
        file_id = message.document.file_id
        file_path = f"{media_dir}/document_{file_id}"
    elif message_type == "sticker" and message.sticker:
        file_id = message.sticker.file_id
        file_path = f"{media_dir}/sticker_{file_id}.webp"
    elif message_type == "voice" and message.voice:
        file_id = message.voice.file_id
        file_path = f"{media_dir}/voice_{file_id}.ogg"
    elif message_type == "animation" and message.animation:
        file_id = message.animation.file_id
        file_path = f"{media_dir}/animation_{file_id}.mp4"
    
    if not file_id:
        return None, None, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ —Ç–∏–ø–∏ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤
    success = await download_media_file(bot, file_id, file_path)
    
    if not success:
        return None, None, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ file_id —Ç–∞ file_path
    return file_id, file_path

@router.callback_query(lambda c: c.data == "Mass_broadcast")
async def mass_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    accounts = db.get_accounts()
    
    if not accounts:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤. –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.")
        await callback.answer()
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    settings = db.get_mass_broadcast_settings()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    settings_text = f"‚öôÔ∏è <b>–ü–æ—Ç–æ—á–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏:</b>\n\n"
    settings_text += f"‚è±Ô∏è <b>–Ü–Ω—Ç–µ—Ä–≤–∞–ª:</b> {settings['interval_seconds']} —Å–µ–∫—É–Ω–¥\n"
    if settings['use_random_interval']:
        settings_text += f"üé≤ <b>–†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª:</b> {settings['min_random_seconds']}-{settings['max_random_seconds']} —Å–µ–∫—É–Ω–¥\n"
    else:
        settings_text += f"üé≤ <b>–†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª:</b> –í–∏–º–∫–Ω–µ–Ω–æ\n"
    settings_text += f"üë• <b>–ê–∫–∫–∞—É–Ω—Ç—ñ–≤:</b> {len(accounts)}\n\n"
    settings_text += "üìù –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –†—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤", callback_data="mass_different_messages")],
        [InlineKeyboardButton(text="1 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤", callback_data="mass_one_message_for_all_accounts")]
    ])

    await callback.message.answer(settings_text, parse_mode='HTML', reply_markup=keyboard)
    await state.set_state(MassBroadcastStates.waiting_for_message)
    await callback.answer()
#====================== –ó–ê–ì–ê–õ–¨–ù–ê –†–û–ó–°–ò–õ–ö–ê 1 –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –î–õ–Ø –í–°–Ü–• –ê–ö–ö–ê–£–ù–¢–Ü–í ======================

@router.callback_query(lambda c: c.data == "mass_one_message_for_all_accounts")
async def mass_one_message_for_all_accounts_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ 1 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data="one_message_type_text")],
        [InlineKeyboardButton(text="üñºÔ∏è –§–æ—Ç–æ", callback_data="one_message_type_photo")],
        [InlineKeyboardButton(text="üéµ –ê—É–¥—ñ–æ", callback_data="one_message_type_audio")],
        [InlineKeyboardButton(text="üé¨ –í—ñ–¥–µ–æ", callback_data="one_message_type_video")],
        [InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç", callback_data="one_message_type_document")],
        [InlineKeyboardButton(text="üé¨ –ì—ñ—Ñ–∫–∞", callback_data="one_message_type_animation")],
        [InlineKeyboardButton(text="üé≠ –°—Ç—ñ–∫–µ—Ä", callback_data="one_message_type_sticker")],
        [InlineKeyboardButton(text="üé§ –ì–æ–ª–æ—Å–æ–≤–µ", callback_data="one_message_type_voice")],
        [InlineKeyboardButton(text="üìã –®–∞–±–ª–æ–Ω–∏", callback_data="one_message_type_template")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Mass_broadcast")]
    ])

    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:", parse_mode='HTML', reply_markup=keyboard)
    await state.set_state(MassBroadcastStates.waiting_for_message)
    await callback.answer()
    

@router.callback_query(lambda c: c.data.startswith("one_message_type_"))
async def process_one_message_type_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    message_type = callback.data.replace("one_message_type_", "")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await state.update_data(message_type=message_type)
    
    if message_type == "text":
        await callback.message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:")
        await state.set_state(MassBroadcastStates.waiting_for_message)
    elif message_type == "template":
        # –ü–æ–∫–∞–∑—É—î–º–æ —à–∞–±–ª–æ–Ω–∏
        templates = template_manager.db.get_templates()
        if templates:
            keyboard = template_manager.get_template_keyboard(templates)
            await callback.message.answer(
                "üìã <b>–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:</b>",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            await callback.message.answer(
                "‚ùå <b>–®–∞–±–ª–æ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ</b>\n\n"
                "–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω, –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É –∑ –∫–æ–º–∞–Ω–¥–æ—é /add_template",
                parse_mode='HTML'
            )
    elif message_type in ["sticker", "voice"]:
        # –î–ª—è —Å—Ç—ñ–∫–µ—Ä—ñ–≤ —Ç–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø—ñ–¥–ø–∏—Å
        await callback.message.answer("üìé –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª:")
        await state.set_state(MassBroadcastStates.waiting_for_message)
    else:
        # –î–ª—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤
        media_type_names = {
            'photo': '—Ñ–æ—Ç–æ',
            'video': '–≤—ñ–¥–µ–æ', 
            'audio': '–∞—É–¥—ñ–æ',
            'document': '–¥–æ–∫—É–º–µ–Ω—Ç',
            'animation': '–≥—ñ—Ñ–∫—É'
        }
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó –ø—ñ–¥–ø–∏—Å–æ–º", callback_data="media_with_caption")],
            [InlineKeyboardButton(text="üìé –ë–µ–∑ –ø—ñ–¥–ø–∏—Å—É", callback_data="media_no_caption")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Mass_broadcast")]])    
        await callback.message.answer(
            f"üìé –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ {media_type_names.get(message_type, message_type)} –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:",
            parse_mode='HTML',
            reply_markup=keyboard
        )
        await state.set_state(MassBroadcastStates.waiting_for_message)
    await callback.answer()


@router.message(MassBroadcastStates.waiting_for_media_caption)
async def process_mass_one_media_caption(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–ø–∏—Å—É –¥–ª—è –º–µ–¥—ñ–∞"""
    caption = message.text.strip()
    data = await state.get_data()
    phone = data.get('selected_account_for_message')
    message_type = data.get('message_type')
    file_path = data.get('media_file_path')
    file_id = data.get('media_file_id')
        
    if not caption:
        await message.answer("‚ùå –ü—ñ–¥–ø–∏—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    if phone:
        # –¶–µ –ø—ñ–¥–ø–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥–ø–∏—Å–æ–º
        await save_account_message(state, phone, message_type, file_path, caption, file_id)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∞–∫–∫–∞—É–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        accounts_to_configure = data.get('accounts_to_configure', [])
        accounts_to_configure = [acc for acc in accounts_to_configure if acc['phone_number'] != phone]
        await state.update_data(accounts_to_configure=accounts_to_configure)
        
        await message.answer(f"‚úÖ –ü—ñ–¥–ø–∏—Å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone} –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        await show_remaining_accounts(message, state)
    else:
        # –¶–µ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
        await state.update_data(text=caption)
        await show_interval_settings(message, state)

@router.callback_query(lambda c: c.data in ["media_no_caption", "media_with_caption"])
async def process_media_caption_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—ñ–¥–ø–∏—Å—É –¥–ª—è –º–µ–¥—ñ–∞"""
    has_caption = callback.data == "media_with_caption"
    data = await state.get_data()
    message_type = data.get('message_type')
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—ñ–¥–ø–∏—Å
    await state.update_data(has_caption=has_caption)
    
    media_type_names = get_media_type_names()

    if has_caption:
        await callback.message.answer(
            f"üìé <b>–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ {media_type_names[message_type]} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:</b>\n\n"
            f"üìù –ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤–≤–µ–¥—ñ—Ç—å –ø—ñ–¥–ø–∏—Å:",
            parse_mode='HTML'
        )
    else:
        await callback.message.answer(
            f"üìé <b>–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ {media_type_names[message_type]} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:</b>\n\n"
            f"üìé –§–∞–π–ª –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É:",
            parse_mode='HTML'
        )
    
    await state.set_state(MassBroadcastStates.waiting_for_media_file)
    await callback.answer()



@router.message(MassBroadcastStates.waiting_for_message)
async def process_mass_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ (—Ç–µ–∫—Å—Ç –∞–±–æ –º–µ–¥—ñ–∞)"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ /stop_message
    if message.text and message.text.strip() == "/stop_message":
        await handle_stop_message_command(message, state)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —à–∞–±–ª–æ–Ω
    current_state = await state.get_state()
    if current_state == MassBroadcastStates.waiting_for_template_message:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ —à–∞–±–ª–æ–Ω
        await state.update_data(template_message=message)
        await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —à–∞–±–ª–æ–Ω—É:")
        await state.set_state(MassBroadcastStates.waiting_for_template_name)
        return
    elif current_state == MassBroadcastStates.waiting_for_template_name:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–∞–±–ª–æ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        data = await state.get_data()
        template_message = data.get('template_message')
        template_name = message.text.strip()
        
        if not template_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–∞–±–ª–æ–Ω
        success = await template_manager.save_template_from_message(template_message, template_name)
        
        if success:
            await message.answer(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —à–∞–±–ª–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        
        await state.clear()
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª
    if message.photo or message.video or message.audio or message.document or message.animation or message.sticker or message.voice:
        # –¶–µ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª
        await process_mass_media_file(message, state)
    else:
        # –¶–µ —Ç–µ–∫—Å—Ç
        message_text = message.text.strip()
        
        if not message_text:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await state.update_data(message_text=message_text)
        data = await state.get_data()
        is_one_message_for_all = not data.get('account_messages')

        if is_one_message_for_all:
            # –î–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
            await show_interval_settings(message, state)
            return 
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Ä–æ–∑—Å–∏–ª–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –†—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤", callback_data="mass_different_messages")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Mass_broadcast")]
        ])
        
        await message.answer(
            f"üìù <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!:</b> {message_text[:100]}{'...' if len(message_text) > 100 else ''}\n\n"
            f"–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–±–∞ –æ–±—Ä–∞—Ç–∏ —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

async def process_mass_media_file(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –º–µ–¥—ñ–∞
    if message.photo:
        message_type = "photo"
    elif message.video:
        message_type = "video"
    elif message.audio:
        message_type = "audio"
    elif message.document:
        message_type = "document"
    elif message.animation:
        message_type = "animation"
    elif message.sticker:
        message_type = "sticker"
    elif message.voice:
        message_type = "voice"
    else:
        await message.answer("‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É.")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤
    media_dir = "media_files"
    if not os.path.exists(media_dir):
        os.makedirs(media_dir)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ state
    data = await state.get_data()
    phone = data.get('selected_phone', 'mass_broadcast')

    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª
    file_id, file_path = await process_media_file_common(message, message_type, phone, media_dir)
    
    if not file_id or not file_path:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–µ–¥—ñ–∞
    update_data = {
        'message_type': message_type,
        'media_file_path': file_path,
        'media_file_id': file_id
    }

    
    await state.update_data(**update_data)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
    data = await state.get_data()
    is_one_message_for_all = not data.get('account_messages')
    
    if is_one_message_for_all:
        # –î–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
        await show_interval_settings(message, state)
        return  # –í–∞–∂–ª–∏–≤–æ! –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –ø—ñ–¥–ø–∏—Å—É
    keyboard, media_type_display = await handle_media_type_selection(message_type, is_mass_broadcast=True)
    
    if message_type == 'sticker':
        await message.answer(
            f"üìé <b>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {media_type_display}</b>\n\n"
            f"üÜî <b>ID —Å—Ç—ñ–∫–µ—Ä–∞:</b> {file_id}\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –ø—ñ–¥–ø–∏—Å—É:",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    else:
        await message.answer(
            f"üìé <b>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {media_type_display}</b>\n\n"
            f"üìÅ <b>–§–∞–π–ª:</b> {os.path.basename(file_path)}\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –ø—ñ–¥–ø–∏—Å—É:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

@router.callback_query(lambda c: c.data in ["mass_media_no_caption", "mass_media_with_caption"])
async def process_mass_media_caption_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—ñ–¥–ø–∏—Å—É –¥–ª—è –º–µ–¥—ñ–∞"""
    has_caption = callback.data == "mass_media_with_caption"
    data = await state.get_data()
    message_type = data.get('message_type')
    
# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—ñ–¥–ø–∏—Å
    await state.update_data(has_caption=has_caption)
    
    media_type_names = get_media_type_names()
    if has_caption:
       await callback.message.answer(
          f"üìù <b>–í–≤–µ–¥—ñ—Ç—å –ø—ñ–¥–ø–∏—Å –¥–ª—è {media_type_names[message_type]}:</b>\n\n"
          f"üìé –¶–µ–π –ø—ñ–¥–ø–∏—Å –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –¥–æ –≤—Å—ñ—Ö –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤ —É —Ä–æ–∑—Å–∏–ª—Ü—ñ",
          parse_mode='HTML'
       )
       await state.set_state(MassBroadcastStates.waiting_for_media_caption)
    else:
      # –ë–µ–∑ –ø—ñ–¥–ø–∏—Å—É - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
        await show_interval_settings(callback, state)
    await callback.answer()

@router.message(MassBroadcastStates.waiting_for_media_caption)
async def process_mass_media_caption(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–ø–∏—Å—É –¥–ª—è –º–µ–¥—ñ–∞"""
    caption = message.text.strip()
    data = await state.get_data()
    phone = data.get('selected_account_for_message')
    message_type = data.get('message_type')
    file_path = data.get('media_file_path')
    file_id = data.get('media_file_id')
        
    if not caption:
        await message.answer("‚ùå –ü—ñ–¥–ø–∏—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    if phone:
        # –¶–µ –ø—ñ–¥–ø–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥–ø–∏—Å–æ–º
        await save_account_message(state, phone, message_type, file_path, caption, file_id)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∞–∫–∫–∞—É–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        accounts_to_configure = data.get('accounts_to_configure', [])
        accounts_to_configure = [acc for acc in accounts_to_configure if acc['phone_number'] != phone]
        await state.update_data(accounts_to_configure=accounts_to_configure)
        
        await message.answer(f"‚úÖ –ü—ñ–¥–ø–∏—Å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone} –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        await show_remaining_accounts(message, state)
    else:
        # –¶–µ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
        await state.update_data(text=caption)
        await show_interval_settings(message, state)

@router.callback_query(lambda c: c.data in ["media_no_caption", "media_with_caption"])
async def process_media_caption_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—ñ–¥–ø–∏—Å—É –¥–ª—è –º–µ–¥—ñ–∞"""
    has_caption = callback.data == "media_with_caption"
    data = await state.get_data()
    phone = data.get('selected_account_for_message')
    message_type = data.get('message_type')
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—ñ–¥–ø–∏—Å
    await state.update_data(has_caption=has_caption)
    
    media_type_names = get_media_type_names()
    
    
    if has_caption:
        await callback.message.answer(
            f"üìé <b>–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ {media_type_names[message_type]} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}:</b>\n\n"
            f"üìù –ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤–≤–µ–¥—ñ—Ç—å –ø—ñ–¥–ø–∏—Å:",
            parse_mode='HTML'
        )
    else:
        await callback.message.answer(
            f"üìé <b>–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ {media_type_names[message_type]} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}:</b>\n\n"
            f"üìé –§–∞–π–ª –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É:",
            parse_mode='HTML'
        )
    
    await state.set_state(MassBroadcastStates.waiting_for_media_file)
    await callback.answer()

@router.callback_query(lambda c: c.data == "mass_same_message")
async def process_mass_same_message_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –æ–¥–Ω–∞–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    await show_interval_settings(callback, state)
    await callback.answer()

@router.callback_query(lambda c: c.data == "mass_different_messages")
async def process_mass_different_messages_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    accounts = db.get_accounts()
    
    if not accounts:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
        await callback.answer()
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await state.update_data(accounts_to_configure=accounts.copy())
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    await show_remaining_accounts(callback.message, state)
    await callback.answer()

async def show_remaining_accounts(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∏, —è–∫—ñ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    data = await state.get_data()
    accounts_to_configure = data.get('accounts_to_configure', [])
    account_messages = data.get('account_messages', {})
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ —Å—Ç–∞—Ç—É—Å–∏ —Ä–æ–∑—Å–∏–ª–∫–∏ (—Å—Ç–∞—Ä—à—ñ –∑–∞ 6 –≥–æ–¥–∏–Ω)
    db.cleanup_old_broadcast_statuses(6)
    
    # –í—ñ–¥–ª–∞–¥–æ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    print(f"DEBUG: accounts_to_configure count: {len(accounts_to_configure)}")
    print(f"DEBUG: account_messages count: {len(account_messages)}")
    print(f"DEBUG: account_messages keys: {list(account_messages.keys())}")
    
    if not accounts_to_configure:
        # –í—Å—ñ –∞–∫–∫–∞—É–Ω—Ç–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
        await show_interval_settings(message, state)
        return
    
    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–π–Ω—è—Ç—ñ –∞–∫–∫–∞—É–Ω—Ç–∏
    busy_accounts = []
    available_accounts = []
    for account in accounts_to_configure:
        phone = account['phone_number']
        is_broadcasting = db.is_account_broadcasting(phone)
        print(f"DEBUG: show_remaining_accounts - –∞–∫–∫–∞—É–Ω—Ç {phone}: is_broadcasting = {is_broadcasting}")
        if is_broadcasting:
            busy_accounts.append(phone)
        else:
            available_accounts.append(phone)
    
    print(f"DEBUG: show_remaining_accounts - busy_accounts: {busy_accounts}")
    print(f"DEBUG: show_remaining_accounts - available_accounts: {available_accounts}")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É
    keyboard_buttons = []
    for account in accounts_to_configure:
        phone = account['phone_number']
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–∫–∫–∞—É–Ω—Ç –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        is_broadcasting = db.is_account_broadcasting(phone)
        
        if is_broadcasting:
            button_text = f"üî¥ {phone}"
            # –ê–∫–∫–∞—É–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤–∏–±–æ—Ä—É
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data="account_busy"
            )])
        else:
            button_text = f"üì± {phone}"
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"mass_account_message_{phone}"
            )])
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫—É —Ä–æ–∑—Å–∏–ª–∫–∏ —è–∫—â–æ —î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if len(account_messages) > 0:
        keyboard_buttons.append([InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É", callback_data="start_different_messages_broadcast")])
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ —è–∫—â–æ —î –∑–∞–π–Ω—è—Ç—ñ –∞–∫–∫–∞—É–Ω—Ç–∏
    if busy_accounts:
        keyboard_buttons.append([InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å–∏ –∑–∞–π–Ω—è—Ç–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤", callback_data="clear_busy_accounts")])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="mass_finish_messages")])
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Mass_broadcast")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    configured_info = ""
    if account_messages:
        configured_info = "\n\nüìã <b>–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n"
        for phone, msg_data in account_messages.items():
            msg_type = msg_data.get('type', 'unknown')
            configured_info += f"‚Ä¢ {phone}: {msg_type}\n"
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–π–Ω—è—Ç—ñ –∞–∫–∫–∞—É–Ω—Ç–∏
    busy_info = ""
    if busy_accounts:
        busy_info = f"\n\nüî¥ <b>–ó–∞–π–Ω—è—Ç—ñ –∞–∫–∫–∞—É–Ω—Ç–∏ ({len(busy_accounts)}):</b>\n"
        for phone in busy_accounts:
            busy_info += f"‚Ä¢ {phone}\n"
    
    await message.answer(
        f"‚úÖ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è {len(account_messages)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤</b>\n\n"
        f"üì± –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {len(available_accounts)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤{configured_info}{busy_info}\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç –∞–±–æ –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Ä–æ–∑—Å–∏–ª–∫—É:",
        parse_mode='HTML',
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data == "account_busy")
async def account_busy_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∑–∞–π–Ω—è—Ç–∏–π –∞–∫–∫–∞—É–Ω—Ç"""
    await callback.message.answer(
        "üî¥ <b>–¶–µ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–∞–∑ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!</b>\n\n"
        "‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –∞–∫–∫–∞—É–Ω—Ç.",
        parse_mode='HTML'
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "clear_busy_accounts")
async def clear_busy_accounts_callback(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å–∏ –∑–∞–π–Ω—è—Ç–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    data = await state.get_data()
    accounts_to_configure = data.get('accounts_to_configure', [])
    
    cleared_count = 0
    for account in accounts_to_configure:
        phone = account['phone_number']
        if db.is_account_broadcasting(phone):
            count = db.clear_account_broadcast_status(phone)
            cleared_count += count
    
    if cleared_count > 0:
        await callback.message.answer(
            f"‚úÖ <b>–û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–∏ –¥–ª—è {cleared_count} —Ä–æ–∑—Å–∏–ª–æ–∫!</b>\n\n"
            f"–¢–µ–ø–µ—Ä –≤—Å—ñ –∞–∫–∫–∞—É–Ω—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.",
            parse_mode='HTML'
        )
        # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
        await show_remaining_accounts(callback.message, state)
    else:
        await callback.message.answer(
            "‚ÑπÔ∏è <b>–ù–µ–º–∞—î —Å—Ç–∞—Ç—É—Å—ñ–≤ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è</b>\n\n"
            "–í—Å—ñ –∞–∫–∫–∞—É–Ω—Ç–∏ –≤–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ñ.",
            parse_mode='HTML'
        )
    
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("mass_account_message_"))
async def process_mass_account_message_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    account_phone = callback.data.replace("mass_account_message_", "")
    
    # –í—ñ–¥–ª–∞–¥–æ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    print(f"DEBUG: Selected account for message: {account_phone}")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç
    await state.update_data(selected_account_for_message=account_phone)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–≥–ª–∏—Å—è
    data = await state.get_data()
    saved_account = data.get('selected_account_for_message')
    print(f"DEBUG: Saved selected_account_for_message: {saved_account}")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data="message_type_text")],
        [InlineKeyboardButton(text="üñºÔ∏è –§–æ—Ç–æ", callback_data="message_type_photo")],
        [InlineKeyboardButton(text="üéµ –ê—É–¥—ñ–æ", callback_data="message_type_audio")],
        [InlineKeyboardButton(text="üé¨ –í—ñ–¥–µ–æ", callback_data="message_type_video")],
        [InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç", callback_data="message_type_document")],
        [InlineKeyboardButton(text="üé¨ –ì—ñ—Ñ–∫–∞", callback_data="message_type_animation")],
        [InlineKeyboardButton(text="üé≠ –°—Ç—ñ–∫–µ—Ä", callback_data="message_type_sticker")],
        [InlineKeyboardButton(text="üé§ –ì–æ–ª–æ—Å–æ–≤–µ", callback_data="message_type_voice")],
        [InlineKeyboardButton(text="üìã –®–∞–±–ª–æ–Ω–∏", callback_data="message_type_template")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mass_different_messages")]
    ])
    
    await callback.message.answer(
        f"üì± <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:</b>\n"
        f"üìû <b>–ù–æ–º–µ—Ä:</b> {account_phone}\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
        parse_mode='HTML',
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("message_type_"))
async def process_message_type_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    message_type = callback.data.replace("message_type_", "")
    data = await state.get_data()
    phone = data.get('selected_account_for_message')
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await state.update_data(message_type=message_type)
    
    if message_type == "text":
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await callback.message.answer(
            f"üìù <b>–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}:</b>",
            parse_mode='HTML'
        )
        await state.set_state(MassBroadcastStates.waiting_for_account_message)
    elif message_type == "template":
        # –ü–æ–∫–∞–∑—É—î–º–æ —à–∞–±–ª–æ–Ω–∏
        templates = template_manager.db.get_templates()
        if templates:
            keyboard = template_manager.get_template_keyboard(templates)
            await callback.message.answer(
                f"üìã <b>–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}:</b>",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            await callback.message.answer(
                "‚ùå <b>–®–∞–±–ª–æ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ</b>\n\n"
                "–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω, –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É –∑ –∫–æ–º–∞–Ω–¥–æ—é /add_template",
                parse_mode='HTML'
            )
    else:
        # –î–ª—è –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        # –ü–æ–∫–∞–∑—É—î–º–æ –æ–ø—Ü—ñ—ó –¥–ª—è –º–µ–¥—ñ–∞
        keyboard, media_type_display = await handle_media_type_selection(message_type, phone)
        
        await callback.message.answer(
            f"üìé <b>–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ {media_type_display} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}:</b>\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
            parse_mode='HTML',
            reply_markup=keyboard
        )
        await state.set_state(MassBroadcastStates.waiting_for_media_file)
    
    await callback.answer()

@router.message(MassBroadcastStates.waiting_for_account_message)
async def process_account_message(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    text = message.text.strip()
    
    if not text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç
    data = await state.get_data()
    phone = data.get('selected_account_for_message')
    accounts_to_configure = data.get('accounts_to_configure', [])
    
    print(f"DEBUG: process_account_message - phone: {phone}")
    print(f"DEBUG: process_account_message - text: {text}")
    
    if not phone:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    await save_account_message(state, phone, 'text', None, text)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É
    accounts_to_configure = [acc for acc in accounts_to_configure if acc['phone_number'] != phone]
    await state.update_data(accounts_to_configure=accounts_to_configure)
    
    await message.answer(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone} –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç –∞–±–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
    await show_remaining_accounts(message, state)

@router.message(MassBroadcastStates.waiting_for_media_file)
async def process_media_file(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É"""
    data = await state.get_data()
    phone = data.get('selected_account_for_message')
    message_type = data.get('message_type')
    has_caption = data.get('has_caption', False)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤
    media_dir = "media_files"
    if not os.path.exists(media_dir):
        os.makedirs(media_dir)
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª
    file_id, file_path = await process_media_file_common(message, message_type, phone, media_dir)
    
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª
    update_data = {
        'media_file_path': file_path,
        'media_file_id': file_id
    }
    
    
    await state.update_data(**update_data)
    
    if has_caption:
        # –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥–ø–∏—Å
        await message.answer(
            f"üìù <b>–í–≤–µ–¥—ñ—Ç—å –ø—ñ–¥–ø–∏—Å –¥–ª—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É:</b>\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: {phone}\n"
            f"üìé –§–∞–π–ª: {os.path.basename(file_path)}",
            parse_mode='HTML'
        )
        await state.set_state(MassBroadcastStates.waiting_for_media_caption)
    else:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É
        await save_account_message(state, phone, message_type, file_path, None, file_id)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∞–∫–∫–∞—É–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        accounts_to_configure = data.get('accounts_to_configure', [])
        accounts_to_configure = [acc for acc in accounts_to_configure if acc['phone_number'] != phone]
        await state.update_data(accounts_to_configure=accounts_to_configure)
        
        await message.answer(f"‚úÖ –ú–µ–¥—ñ–∞-—Ñ–∞–π–ª –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone} –∑–±–µ—Ä–µ–∂–µ–Ω–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É!")
        await show_remaining_accounts(message, state)

@router.message(MassBroadcastStates.waiting_for_media_caption)
async def process_media_caption(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É –¥–ª—è –º–µ–¥—ñ–∞"""
    caption = message.text.strip()
    data = await state.get_data()
    phone = data.get('selected_account_for_message')
    message_type = data.get('message_type')
    file_path = data.get('media_file_path')
    file_id = data.get('media_file_id')
    
    if not caption:
        await message.answer("‚ùå –ü—ñ–¥–ø–∏—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥–ø–∏—Å–æ–º
    await save_account_message(state, phone, message_type, file_path, caption, file_id)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∞–∫–∫–∞—É–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    accounts_to_configure = data.get('accounts_to_configure', [])
    accounts_to_configure = [acc for acc in accounts_to_configure if acc['phone_number'] != phone]
    await state.update_data(accounts_to_configure=accounts_to_configure)
    
    await message.answer(f"‚úÖ –ü—ñ–¥–ø–∏—Å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone} –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    await show_remaining_accounts(message, state)

async def save_account_message(state: FSMContext, phone: str, message_type: str, file_path: str = None, text: str = None, file_id: str = None):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    data = await state.get_data()
    account_messages = data.get('account_messages', {})
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message_data = {
        'type': message_type,
        'text': text,
        'file_path': file_path,  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ file_path –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –º–µ–¥—ñ–∞
        'file_id': file_id
    }
    
    # –í—ñ–¥–ª–∞–¥–æ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    print(f"DEBUG: Saving message for phone {phone}")
    print(f"DEBUG: Message data: {message_data}")
    print(f"DEBUG: Current account_messages before save: {list(account_messages.keys())}")
    
    account_messages[phone] = message_data
    await state.update_data(account_messages=account_messages)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–≥–ª–∏—Å—è
    updated_data = await state.get_data()
    updated_account_messages = updated_data.get('account_messages', {})
    print(f"DEBUG: account_messages after save: {list(updated_account_messages.keys())}")
    print(f"DEBUG: Total messages saved: {len(updated_account_messages)}")

@router.callback_query(lambda c: c.data == "start_different_messages_broadcast")
async def start_different_messages_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    data = await state.get_data()
    account_messages = data.get('account_messages', {})
    
    if not account_messages:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        await callback.answer()
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    settings = db.get_mass_broadcast_settings()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö° 10 —Å–µ–∫—É–Ω–¥", callback_data="mass_interval_10")],
        [InlineKeyboardButton(text="‚è±Ô∏è 30 —Å–µ–∫—É–Ω–¥", callback_data="mass_interval_30")],
        [InlineKeyboardButton(text="‚è∞ 1 —Ö–≤–∏–ª–∏–Ω–∞", callback_data="mass_interval_60")],
        [InlineKeyboardButton(text="üïê 5 —Ö–≤–∏–ª–∏–Ω", callback_data="mass_interval_300")],
        [InlineKeyboardButton(text="üïë 15 —Ö–≤–∏–ª–∏–Ω", callback_data="mass_interval_900")],
        [InlineKeyboardButton(text="üïí 1 –≥–æ–¥–∏–Ω–∞", callback_data="mass_interval_3600")],
        [InlineKeyboardButton(text="üïì 6 –≥–æ–¥–∏–Ω", callback_data="mass_interval_21600")],
        [InlineKeyboardButton(text="üïî 24 –≥–æ–¥–∏–Ω–∏", callback_data="mass_interval_86400")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤–ª–∞—Å–Ω–∏–π", callback_data="mass_interval_custom")],
        [InlineKeyboardButton(text="üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="mass_random_interval")],
        [InlineKeyboardButton(text="üì® –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏", callback_data="mass_message_intervals")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mass_different_messages")]
    ])
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    summary_text = f"üìù <b>–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è {len(account_messages)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:</b>\n\n"
    for phone, msg_data in account_messages.items():
        if isinstance(msg_data, dict):
            msg_type = msg_data.get('type', 'text')
            text = msg_data.get('text', '')
            if msg_type == 'text':
                summary_text += f"üì± {phone}: {text[:30]}{'...' if len(text) > 30 else ''}\n"
            else:
                summary_text += f"üì± {phone}: {msg_type} {f'({text[:20]}...)' if text else ''}\n"
        else:
            summary_text += f"üì± {phone}: {str(msg_data)[:30]}{'...' if len(str(msg_data)) > 30 else ''}\n"
    
    summary_text += f"\n‚è±Ô∏è <b>–ü–æ—Ç–æ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª:</b> {settings['interval_seconds']} —Å–µ–∫—É–Ω–¥\n\n"
    summary_text += f"–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ —Ä–æ–∑—Å–∏–ª–∫–∞–º–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:"
    
    await callback.message.answer(summary_text, parse_mode='HTML', reply_markup=keyboard)
    await callback.answer()

@router.callback_query(lambda c: c.data == "mass_finish_messages")
async def process_mass_finish_messages_callback(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    await show_interval_settings(callback, state)
    await callback.answer()

async def show_interval_settings(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ FSM
    data = await state.get_data()
    message_text = data.get('message_text', '')
    account_messages = data.get('account_messages', {})
    template_name = data.get('template_name', '')
    template_id = data.get('template_id')
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    settings = db.get_mass_broadcast_settings()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö° 10 —Å–µ–∫—É–Ω–¥", callback_data="mass_interval_10")],
        [InlineKeyboardButton(text="‚è±Ô∏è 30 —Å–µ–∫—É–Ω–¥", callback_data="mass_interval_30")],
        [InlineKeyboardButton(text="‚è∞ 1 —Ö–≤–∏–ª–∏–Ω–∞", callback_data="mass_interval_60")],
        [InlineKeyboardButton(text="üïê 5 —Ö–≤–∏–ª–∏–Ω", callback_data="mass_interval_300")],
        [InlineKeyboardButton(text="üïë 15 —Ö–≤–∏–ª–∏–Ω", callback_data="mass_interval_900")],
        [InlineKeyboardButton(text="üïí 1 –≥–æ–¥–∏–Ω–∞", callback_data="mass_interval_3600")],
        [InlineKeyboardButton(text="üïì 6 –≥–æ–¥–∏–Ω", callback_data="mass_interval_21600")],
        [InlineKeyboardButton(text="üïî 24 –≥–æ–¥–∏–Ω–∏", callback_data="mass_interval_86400")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤–ª–∞—Å–Ω–∏–π", callback_data="mass_interval_custom")],
        [InlineKeyboardButton(text="üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="mass_random_interval")],
        [InlineKeyboardButton(text="üì® –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏", callback_data="mass_message_intervals")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mass_different_messages" if account_messages else "Mass_broadcast")]
    ])
    
    if account_messages:
        # –†—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message_info = f"üìù <b>–†—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {len(account_messages)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤</b>"
    elif template_name:
        # –®–∞–±–ª–æ–Ω
        message_info = f"üìã <b>–®–∞–±–ª–æ–Ω:</b> {template_name}\nüí¨ <b>–¢–µ–∫—Å—Ç:</b> {message_text[:50]}{'...' if len(message_text) > 50 else ''}"
    else:
        # –û–¥–Ω–∞–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message_info = f"üìù <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b> {message_text[:50]}{'...' if len(message_text) > 50 else ''}"
    
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.answer(
            f"‚è±Ô∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:</b>\n\n"
            f"{message_info}\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: {settings['interval_seconds']} —Å–µ–∫—É–Ω–¥\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ —Ä–æ–∑—Å–∏–ª–∫–∞–º–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    else:
        await message_or_callback.answer(
            f"‚è±Ô∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:</b>\n\n"
            f"{message_info}\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: {settings['interval_seconds']} —Å–µ–∫—É–Ω–¥\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ —Ä–æ–∑—Å–∏–ª–∫–∞–º–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

@router.callback_query(lambda c: c.data.startswith("mass_interval_"))
async def process_mass_interval_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    interval_text = callback.data.replace("mass_interval_", "")
    
    if interval_text == "custom":
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
        await state.set_state(MassBroadcastStates.waiting_for_interval)
    else:
        try:
            interval = int(interval_text)
            await state.update_data(interval=interval, use_random=False)
            logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {interval} —Å–µ–∫")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–≥–ª–∏—Å—è
            data_check = await state.get_data()
            logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: interval={data_check.get('interval')}, use_random={data_check.get('use_random')}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Ä—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            account_messages = data_check.get('account_messages', {})
            if account_messages:
                # –¶–µ —Ä—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –≥—Ä—É–ø
                await state.update_data(
                    message_type='different_messages',
                    message_text='–†—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤',
                    account_messages=account_messages
                )
                await show_package_selection(callback, state)
            else:
                # –¶–µ –∑–∞–≥–∞–ª—å–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
                await show_package_selection(callback, state)
        except ValueError:
            await callback.message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    
    await callback.answer()

@router.message(MassBroadcastStates.waiting_for_interval)
async def process_custom_interval(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É)"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ /stop_message
    if message.text and message.text.strip() == "/stop_message":
        await handle_stop_message_command(message, state)
        return
    
    try:
        interval = int(message.text.strip())
        
        if interval < 10 or interval > 86400:
            await message.answer("‚ùå –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 10 –¥–æ 86400 —Å–µ–∫—É–Ω–¥.")
            return
        
        await state.update_data(interval=interval, use_random=False)
        logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤–ª–∞—Å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {interval} —Å–µ–∫")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–≥–ª–∏—Å—è
        data_check = await state.get_data()
        logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: interval={data_check.get('interval')}, use_random={data_check.get('use_random')}")
        
        await message.answer(f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫—É–Ω–¥")
        await show_package_selection(message, state)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 10 –¥–æ 86400.")

@router.callback_query(lambda c: c.data == "mass_random_interval")
async def process_mass_random_interval_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    await callback.message.answer(
        "üé≤ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É:</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ –∫–æ–º—É:\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 30,120 (–≤—ñ–¥ 30 –¥–æ 120 —Å–µ–∫—É–Ω–¥)",
        parse_mode='HTML'
    )
    await state.set_state(MassBroadcastStates.waiting_for_random_settings)
    await callback.answer()

@router.callback_query(lambda c: c.data == "mass_message_intervals")
async def process_mass_message_intervals_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö° –®–≤–∏–¥–∫–∏–π (5-15 —Å–µ–∫)", callback_data="mass_msg_interval_5_15")],
        [InlineKeyboardButton(text="üïê –°–µ—Ä–µ–¥–Ω—ñ–π (10-30 —Å–µ–∫)", callback_data="mass_msg_interval_10_30")],
        [InlineKeyboardButton(text="üïë –ü–æ–≤—ñ–ª—å–Ω–∏–π (20-60 —Å–µ–∫)", callback_data="mass_msg_interval_20_60")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–ª–∞—Å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω", callback_data="mass_msg_interval_custom")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Mass_broadcast")]
    ])
    
    await callback.message.answer(
        "üì® <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏:</b>\n\n"
        "‚ö° <b>–®–≤–∏–¥–∫–∏–π:</b> 5-15 —Å–µ–∫—É–Ω–¥\n"
        "üïê <b>–°–µ—Ä–µ–¥–Ω—ñ–π:</b> 10-30 —Å–µ–∫—É–Ω–¥\n"
        "üïë <b>–ü–æ–≤—ñ–ª—å–Ω–∏–π:</b> 20-60 —Å–µ–∫—É–Ω–¥\n"
        "‚úèÔ∏è <b>–í–ª–∞—Å–Ω–∏–π:</b> –≤–≤–µ–¥—ñ—Ç—å min-max —á–µ—Ä–µ–∑ –∫–æ–º—É\n\n"
        "üí° <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> –¶–µ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ —Ä—ñ–∑–Ω—ñ –≥—Ä—É–ø–∏ –æ–¥–Ω–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º",
        parse_mode='HTML',
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("mass_msg_interval_"))
async def process_mass_message_interval_range_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥—ñ–∞–ø–∞–∑–æ–Ω—É —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏"""
    data = callback.data
    
    if data == "mass_msg_interval_custom":
        # –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω
        await callback.message.answer(
            "‚úèÔ∏è <b>–í–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏:</b>\n\n"
            "üìù <b>–§–æ—Ä–º–∞—Ç:</b> min,max (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 8,25)\n"
            "‚è±Ô∏è <b>–î—ñ–∞–ø–∞–∑–æ–Ω:</b> –≤—ñ–¥ 1 –¥–æ 300 —Å–µ–∫—É–Ω–¥\n\n"
            "üí° <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
            "‚Ä¢ 5,15 (–≤—ñ–¥ 5 –¥–æ 15 —Å–µ–∫—É–Ω–¥)\n"
            "‚Ä¢ 10,30 (–≤—ñ–¥ 10 –¥–æ 30 —Å–µ–∫—É–Ω–¥)\n"
            "‚Ä¢ 20,60 (–≤—ñ–¥ 20 –¥–æ 60 —Å–µ–∫—É–Ω–¥)",
            parse_mode='HTML'
        )
        await state.set_state(MassBroadcastStates.waiting_for_message_interval_config)
        await callback.answer()
        return
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏
    if data == "mass_msg_interval_5_15":
        min_interval, max_interval = 5, 15
    elif data == "mass_msg_interval_10_30":
        min_interval, max_interval = 10, 30
    elif data == "mass_msg_interval_20_60":
        min_interval, max_interval = 20, 60
    else:
        await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
    await state.update_data(
        message_interval=10,  # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–º—É)
        use_random_message_interval=True,
        min_message_interval=min_interval,
        max_message_interval=max_interval
    )
    
    await callback.answer(f"üì® –í–∏–±—Ä–∞–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ ({min_interval}-{max_interval} —Å–µ–∫)")
    await show_mass_broadcast_confirmation(callback, state)

@router.message(MassBroadcastStates.waiting_for_message_interval_config)
async def process_custom_mass_message_interval(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º–æ –≤–≤–µ–¥–µ–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω
        parts = message.text.strip().split(',')
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: min,max (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5,15)")
            return
        
        min_interval = int(parts[0].strip())
        max_interval = int(parts[1].strip())
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω
        if min_interval < 1 or max_interval > 300 or min_interval >= max_interval:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω. –ú—ñ–Ω—ñ–º—É–º: 1, –º–∞–∫—Å–∏–º—É–º: 300, min < max")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        await state.update_data(
            message_interval=10,  # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–º—É)
            use_random_message_interval=True,
            min_message_interval=min_interval,
            max_message_interval=max_interval
        )
        
        await message.answer(f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–ª–∞—Å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏: {min_interval}-{max_interval} —Å–µ–∫—É–Ω–¥")
        await show_mass_broadcast_confirmation(message, state)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: min,max (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5,15)")

@router.message(MassBroadcastStates.waiting_for_random_settings)
async def process_random_settings(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    try:
        settings_text = message.text.strip()
        min_interval, max_interval = map(int, settings_text.split(','))
        
        if 10 <= min_interval <= max_interval <= 86400:
            await state.update_data(
                interval=min_interval,  # –î–æ–¥–∞—î–º–æ interval –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                use_random=True,
                min_random=min_interval,
                max_random=max_interval
            )
            logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {min_interval}-{max_interval} —Å–µ–∫")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–≥–ª–∏—Å—è
            data_check = await state.get_data()
            logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: interval={data_check.get('interval')}, use_random={data_check.get('use_random')}, min_random={data_check.get('min_random')}, max_random={data_check.get('max_random')}")
            
            await message.answer(f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: {min_interval}-{max_interval} —Å–µ–∫—É–Ω–¥")
            await show_package_selection(message, state)
        else:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω. –ú—ñ–Ω—ñ–º—É–º: 10, –º–∞–∫—Å–∏–º—É–º: 86400. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 30,120). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

async def get_all_chats_for_account(account_phone: str):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —á–∞—Ç–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ñ"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∞
        accounts = db.get_accounts()
        account = None
        for acc in accounts:
            if acc['phone_number'] == account_phone:
                account = acc
                break
        
        if not account:
            logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return []
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
        session_name = f"sessions/temp_{account['phone_number'].replace('+', '').replace('-', '')}"
        client = TelegramClient(session_name, account['api_id'], account['api_hash'])
        
        try:
            await client.connect()
            
            if not await client.is_user_authorized():
                logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
                return []
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥—ñ–∞–ª–æ–≥–∏
            dialogs = await client.get_dialogs()
            groups = []
            
            for dialog in dialogs:
                if dialog.is_group or dialog.is_channel:
                    # –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø—É/–∫–∞–Ω–∞–ª
                    group_info = {
                        'group_id': str(dialog.id),
                        'name': dialog.name or f"–ì—Ä—É–ø–∞ {dialog.id}",
                        'type': 'group' if dialog.is_group else 'channel',
                        'account_phone': account_phone
                    }
                    groups.append(group_info)
            
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(groups)} —á–∞—Ç—ñ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ñ {account_phone}")
            return groups
            
        finally:
            try:
                await client.disconnect()
            except:
                pass
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —á–∞—Ç—ñ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}: {e}")
        return []

async def show_message_interval_settings(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö° –®–≤–∏–¥–∫–∏–π (5-15 —Å–µ–∫)", callback_data="mass_msg_interval_5_15")],
        [InlineKeyboardButton(text="üïê –°–µ—Ä–µ–¥–Ω—ñ–π (10-30 —Å–µ–∫)", callback_data="mass_msg_interval_10_30")],
        [InlineKeyboardButton(text="üïë –ü–æ–≤—ñ–ª—å–Ω–∏–π (20-60 —Å–µ–∫)", callback_data="mass_msg_interval_20_60")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–ª–∞—Å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω", callback_data="mass_msg_interval_custom")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_message_intervals")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Mass_broadcast")]
    ])
    
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.answer(
            "üì® <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏:</b>\n\n"
            "‚ö° <b>–®–≤–∏–¥–∫–∏–π:</b> 5-15 —Å–µ–∫—É–Ω–¥\n"
            "üïê <b>–°–µ—Ä–µ–¥–Ω—ñ–π:</b> 10-30 —Å–µ–∫—É–Ω–¥\n"
            "üïë <b>–ü–æ–≤—ñ–ª—å–Ω–∏–π:</b> 20-60 —Å–µ–∫—É–Ω–¥\n"
            "‚úèÔ∏è <b>–í–ª–∞—Å–Ω–∏–π:</b> –≤–≤–µ–¥—ñ—Ç—å min-max —á–µ—Ä–µ–∑ –∫–æ–º—É\n\n"
            "üí° <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> –¶–µ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ —Ä—ñ–∑–Ω—ñ –≥—Ä—É–ø–∏ –æ–¥–Ω–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º\n\n"
            "‚è≠Ô∏è <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:</b> –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    else:
        await message_or_callback.answer(
            "üì® <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏:</b>\n\n"
            "‚ö° <b>–®–≤–∏–¥–∫–∏–π:</b> 5-15 —Å–µ–∫—É–Ω–¥\n"
            "üïê <b>–°–µ—Ä–µ–¥–Ω—ñ–π:</b> 10-30 —Å–µ–∫—É–Ω–¥\n"
            "üïë <b>–ü–æ–≤—ñ–ª—å–Ω–∏–π:</b> 20-60 —Å–µ–∫—É–Ω–¥\n"
            "‚úèÔ∏è <b>–í–ª–∞—Å–Ω–∏–π:</b> –≤–≤–µ–¥—ñ—Ç—å min-max —á–µ—Ä–µ–∑ –∫–æ–º—É\n\n"
            "üí° <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> –¶–µ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ —Ä—ñ–∑–Ω—ñ –≥—Ä—É–ø–∏ –æ–¥–Ω–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º\n\n"
            "‚è≠Ô∏è <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:</b> –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            parse_mode='HTML',
            reply_markup=keyboard
        )

@router.callback_query(lambda c: c.data == "skip_message_intervals")
async def skip_message_intervals_callback(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏"""
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    await state.update_data(
        message_interval=10,
        use_random_message_interval=False,
        min_message_interval=5,
        max_message_interval=30
    )
    
    await callback.message.answer("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ (10 —Å–µ–∫—É–Ω–¥)")
    await show_mass_broadcast_confirmation(callback, state)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("mass_different_select_package_"))
async def process_different_messages_package_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–∫–µ—Ç—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    package_id = int(callback.data.replace("mass_different_select_package_", ""))
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –ø–∞–∫–µ—Ç
    await state.update_data(selected_package_id=package_id)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É
    await show_different_messages_confirmation(callback, state)

@router.callback_query(lambda c: c.data == "mass_different_select_all_packages")
async def process_different_messages_select_all_packages(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤—Å—ñ—Ö –ø–∞–∫–µ—Ç—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –≤—Å—ñ—Ö –ø–∞–∫–µ—Ç—ñ–≤
    await state.update_data(selected_package_id="all_packages")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É
    await show_different_messages_confirmation(callback, state)

async def show_different_messages_confirmation(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    data = await state.get_data()
    selected_package_id = data.get('selected_package_id')
    account_messages = data.get('account_messages', {})
    interval = data.get('interval', 60)
    
    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if selected_package_id == "all_packages":
        total_groups = "–≤—Å—ñ –ø–∞–∫–µ—Ç–∏ –≥—Ä—É–ø"
    else:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–±—Ä–∞–Ω–∏–π –ø–∞–∫–µ—Ç
        package_info = db.get_group_package(selected_package_id)
        total_groups = f"{package_info['groups_count']} –≥—Ä—É–ø" if package_info else "–Ω–µ–≤—ñ–¥–æ–º–æ"
    
    configured_accounts = list(account_messages.keys())
    accounts_count = len(configured_accounts)
    
    confirmation_text = f"üì§ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:</b>\n\n"
    confirmation_text += f"üë• <b>–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:</b> {accounts_count}\n"
    confirmation_text += f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç–∏:</b> {', '.join(configured_accounts)}\n"
    confirmation_text += f"üì¶ <b>–ì—Ä—É–ø:</b> {total_groups}\n"
    confirmation_text += f"‚è±Ô∏è <b>–Ü–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:</b> {interval} —Å–µ–∫\n\n"
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    confirmation_text += f"üìù <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n"
    for phone, msg_data in account_messages.items():
        if isinstance(msg_data, dict):
            msg_type = msg_data.get('type', 'text')
            text = msg_data.get('text', '')
            if msg_type == 'text':
                text_preview = text[:50] + "..." if len(text) > 50 else text
                confirmation_text += f"‚Ä¢ {phone}: {text_preview}\n"
            else:
                confirmation_text += f"‚Ä¢ {phone}: {msg_type} {f'({text[:20]}...)' if text else ''}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É", callback_data="start_different_messages_broadcast_final")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mass_different_messages")]
    ])
    
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.answer(confirmation_text, parse_mode='HTML', reply_markup=keyboard)
    else:
        await message_or_callback.answer(confirmation_text, parse_mode='HTML', reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "start_different_messages_broadcast_final")
async def start_different_messages_broadcast_final_callback(callback: CallbackQuery, state: FSMContext):
    """–§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    data = await state.get_data()
    account_messages = data.get('account_messages', {})
    selected_package_id = data.get('selected_package_id')
    interval = data.get('interval', 60)
    
    if not account_messages:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        await callback.answer()
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
    if selected_package_id == "all_packages":
        # –í—Å—ñ –ø–∞–∫–µ—Ç–∏
        selected_groups = []
        for phone in account_messages.keys():
            groups = db.get_all_groups_for_account(phone)
            for group in groups:
                group['account_phone'] = phone
                selected_groups.append(group)
    else:
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø–∞–∫–µ—Ç
        selected_groups = db.get_groups_in_package(selected_package_id)
    
    if not selected_groups:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        await callback.answer()
        return
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await start_different_messages_broadcast(callback.message, state, account_messages, selected_groups, interval)
    await callback.answer()

async def start_different_messages_broadcast(message_obj, state: FSMContext, account_messages: dict, selected_groups: list, interval: int):
    """–ó–∞–ø—É—Å–∫ —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
    logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–æ–∑—Å–∏–ª–∫–∏:")
    logger.info(f"   - –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤: {len(account_messages)}")
    logger.info(f"   - –ì—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏: {len(selected_groups)}")
    logger.info(f"   - –Ü–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {interval} —Å–µ–∫")
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∫–∏
        status_id = None
        first_account = list(account_messages.keys())[0] if account_messages else None
        if first_account:
            status_text = f"–†—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {len(account_messages)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"
            status_id = db.create_broadcast_status(first_account, status_text, len(selected_groups))
        
        # –ì—Ä—É–ø—É—î–º–æ –≥—Ä—É–ø–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        groups_by_account = {}
        for group in selected_groups:
            account_phone = group.get('account_phone')
            if account_phone and account_phone in account_messages:
                if account_phone not in groups_by_account:
                    groups_by_account[account_phone] = []
                groups_by_account[account_phone].append(group)
        
        total_sent = 0
        total_failed = 0
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        for account_phone, groups in groups_by_account.items():
            if not groups:
                continue
                
            message_data = account_messages[account_phone]
            logger.info(f"üì± –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone} –¥–æ {len(groups)} –≥—Ä—É–ø")
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø–∏
            for group in groups:
                try:
                    if message_data['type'] == 'text':
                        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        await send_text_message(account_phone, group['group_id'], message_data['text'])
                    else:
                        # –ú–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        await send_media_message(
                            account_phone, 
                            group['group_id'], 
                            message_data['type'], 
                            message_data.get('file_path'), 
                            message_data.get('text', ''),
                            message_data.get('file_id')
                        )
                    
                    total_sent += 1
                    logger.info(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø—É {group['group_id']} –∑ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                    
                    # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                    await asyncio.sleep(10)
                    
                except Exception as e:
                    total_failed += 1
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø—É {group['group_id']} –∑ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}: {e}")
            
            # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            if len(groups_by_account) > 1:  # –Ø–∫—â–æ —î —â–µ –∞–∫–∫–∞—É–Ω—Ç–∏
                logger.info(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ {interval} —Å–µ–∫ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º")
                await asyncio.sleep(interval)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        if status_id:
            db.update_broadcast_status(status_id, total_sent, total_failed, "completed")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"‚úÖ <b>–†–æ–∑—Å–∏–ª–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        result_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        result_text += f"‚Ä¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}\n"
        result_text += f"‚Ä¢ –ù–µ–≤–¥–∞–ª–æ: {total_failed}\n"
        result_text += f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {len(groups_by_account)}\n"
        result_text += f"‚Ä¢ –ì—Ä—É–ø –æ–±—Ä–æ–±–ª–µ–Ω–æ: {len(selected_groups)}"
        
        await message_obj.answer(result_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–∑—Å–∏–ª—Ü—ñ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")
        await message_obj.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–∑—Å–∏–ª—Ü—ñ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        if status_id:
            db.update_broadcast_status(status_id, total_sent, total_failed, "failed")
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
    await state.clear()

async def send_text_message(account_phone: str, group_id: str, text: str):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        client = db.get_client(account_phone)
        if not client:
            raise Exception(f"–ö–ª—ñ—î–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        success = await db.send_message_with_retry(
            client, 
            str(group_id), 
            f"–ì—Ä—É–ø–∞ {group_id}", 
            text,
            None
        )
        
        return success
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return False

async def send_media_message(account_phone: str, group_id: str, message_type: str, file_path: str = None, caption: str = None, file_id: str = None):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        client = db.get_client(account_phone)
        if not client:
            raise Exception(f"–ö–ª—ñ—î–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
        if message_type == 'photo':
            if file_path and os.path.exists(file_path):
                success = await db.send_photo_with_retry(client, str(group_id), file_path, caption)
            else:
                raise Exception("–§–∞–π–ª —Ñ–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        elif message_type == 'video':
            if file_path and os.path.exists(file_path):
                success = await db.send_video_with_retry(client, str(group_id), file_path, caption)
            else:
                raise Exception("–§–∞–π–ª –≤—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        elif message_type == 'audio':
            if file_path and os.path.exists(file_path):
                success = await db.send_audio_with_retry(client, str(group_id), file_path, caption)
            else:
                raise Exception("–§–∞–π–ª –∞—É–¥—ñ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        elif message_type == 'document':
            if file_path and os.path.exists(file_path):
                success = await db.send_document_with_retry(client, str(group_id), file_path, caption)
            else:
                raise Exception("–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        elif message_type == 'animation':
            if file_path and os.path.exists(file_path):
                success = await db.send_animation_with_retry(client, str(group_id), file_path, caption)
            else:
                raise Exception("–§–∞–π–ª –≥—ñ—Ñ–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        elif message_type == 'sticker':
            if file_id:
                success = await db.send_sticker_with_retry(client, str(group_id), file_id)
            else:
                raise Exception("ID —Å—Ç—ñ–∫–µ—Ä–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
        elif message_type == 'voice':
            if file_path and os.path.exists(file_path):
                success = await db.send_voice_with_retry(client, str(group_id), file_path, caption)
            else:
                raise Exception("–§–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            raise Exception(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –º–µ–¥—ñ–∞: {message_type}")
        
        return success
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return False

async def show_different_messages_package_selection(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –ø–∞–∫–µ—Ç—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    accounts = db.get_accounts()
    
    if not accounts:
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
        else:
            await message_or_callback.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–∞–∫–µ—Ç–∏ –≥—Ä—É–ø
    all_packages = []
    for account in accounts:
        packages = db.get_group_packages(account['phone_number'])
        for package in packages:
            package['account_phone'] = account['phone_number']
            all_packages.append(package)
    
    if not all_packages:
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer("‚ùå –ù–µ–º–∞—î –ø–∞–∫–µ—Ç—ñ–≤ –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        else:
            await message_or_callback.answer("‚ùå –ù–µ–º–∞—î –ø–∞–∫–µ—Ç—ñ–≤ –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç—ñ–≤
    packages_text = "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø–∞–∫–µ—Ç–∏ –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:</b>\n\n"
    
    keyboard_buttons = []
    for i, package in enumerate(all_packages[:10]):  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 10
        button_text = f"üì¶ {package['name']} ({package['groups_count']} –≥—Ä—É–ø)"
        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"mass_different_select_package_{package['id']}"
        )])
        packages_text += f"{i+1}. üì¶ <b>{package['name']}</b> ({package['groups_count']} –≥—Ä—É–ø)\n"
        packages_text += f"   üì± –ê–∫–∫–∞—É–Ω—Ç: {package['account_phone']}\n\n"
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –≤—Å—ñ—Ö –ø–∞–∫–µ—Ç—ñ–≤
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚úÖ –í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –ø–∞–∫–µ—Ç–∏",
        callback_data="mass_different_select_all_packages"
    )])
    keyboard_buttons.append([InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="mass_different_messages"
    )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.answer(packages_text, parse_mode='HTML', reply_markup=keyboard)
    else:
        await message_or_callback.answer(packages_text, parse_mode='HTML', reply_markup=keyboard)

async def show_package_selection(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –ø–∞–∫–µ—Ç—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    accounts = db.get_accounts()
    
    if not accounts:
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
        else:
            await message_or_callback.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–∞–∫–µ—Ç–∏ –≥—Ä—É–ø
    all_packages = []
    for account in accounts:
        packages = db.get_group_packages(account['phone_number'])
        for package in packages:
            package['account_phone'] = account['phone_number']
            all_packages.append(package)
    
    if not all_packages:
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer("‚ùå –ù–µ–º–∞—î –ø–∞–∫–µ—Ç—ñ–≤ –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        else:
            await message_or_callback.answer("‚ùå –ù–µ–º–∞—î –ø–∞–∫–µ—Ç—ñ–≤ –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç—ñ–≤
    packages_text = "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø–∞–∫–µ—Ç–∏ –≥—Ä—É–ø:</b>\n\n"
    
    keyboard_buttons = []
    for i, package in enumerate(all_packages[:10]):  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 10
        button_text = f"üì¶ {package['name']} ({package['groups_count']} –≥—Ä—É–ø)"
        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"mass_select_package_{package['id']}"
        )])
        packages_text += f"{i+1}. üì¶ <b>{package['name']}</b> ({package['groups_count']} –≥—Ä—É–ø)\n"
        packages_text += f"   üì± –ê–∫–∫–∞—É–Ω—Ç: {package['account_phone']}\n\n"
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –≤—Å—ñ—Ö –ø–∞–∫–µ—Ç—ñ–≤
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚úÖ –í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –ø–∞–∫–µ—Ç–∏",
        callback_data="mass_select_all_packages"
    )])
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–±–æ—Ä—É –≤—Å—ñ—Ö —á–∞—Ç—ñ–≤
    keyboard_buttons.append([InlineKeyboardButton(
        text="üåê –í—Å—ñ —á–∞—Ç–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ñ",
        callback_data="mass_select_all_chats"
    )])
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É
    keyboard_buttons.append([InlineKeyboardButton(
        text="üéØ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É",
        callback_data="mass_send_to_single_group"
    )])
    
    keyboard_buttons.append([InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="Mass_broadcast"
    )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.answer(packages_text, parse_mode='HTML', reply_markup=keyboard)
    else:
        await message_or_callback.answer(packages_text, parse_mode='HTML', reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("mass_select_package_"))
async def mass_select_package_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–∫–µ—Ç—É –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    package_id = int(callback.data.replace("mass_select_package_", ""))
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞—Å–µ–π–Ω–∏ –∑ –ø–∞–∫–µ—Ç—É
    groups = db.get_groups_by_package(package_id)
    
    if not groups:
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ø–∞–∫–µ—Ç—É –≥—Ä—É–ø.")
        await callback.answer()
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –±–∞—Å–µ–π–Ω–∏
    await state.update_data(selected_package_id=package_id, selected_groups=groups)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
    data = await state.get_data()
    if not data.get('message_interval') and not data.get('use_random_message_interval'):
        # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        await show_message_interval_settings(callback, state)
    else:
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await show_mass_broadcast_confirmation(callback, state)
    await callback.answer()

@router.callback_query(lambda c: c.data == "mass_select_all_packages")
async def mass_select_all_packages_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤—Å—ñ—Ö –ø–∞–∫–µ—Ç—ñ–≤"""
    accounts = db.get_accounts()
    all_groups = []
    
    for account in accounts:
        packages = db.get_group_packages(account['phone_number'])
        for package in packages:
            groups = db.get_groups_by_package(package['id'])
            all_groups.extend(groups)
    
    if not all_groups:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        await callback.answer()
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ –±–∞—Å–µ–π–Ω–∏
    await state.update_data(selected_package_id=0, selected_groups=all_groups)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    data = await state.get_data()
    if data.get('interval'):
        await show_message_interval_settings(callback, state)
        await callback.answer()
    else:
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await show_interval_settings(callback, state)
        await callback.answer()

@router.callback_query(lambda c: c.data == "mass_select_all_chats")
async def mass_select_all_chats_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤—Å—ñ—Ö —á–∞—Ç—ñ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ñ –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –≤—Å—ñ—Ö —á–∞—Ç—ñ–≤
    await state.update_data(selected_package_id="all_chats")  # "all_chats" –æ–∑–Ω–∞—á–∞—î –≤—Å—ñ —á–∞—Ç–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ñ
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    data = await state.get_data()
    if data.get('interval'):
        # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        logger.info("üìã –Ü–Ω—Ç–µ—Ä–≤–∞–ª –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏")
        await show_message_interval_settings(callback, state)
    else:
        # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
        logger.info("üìã –Ü–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
        await show_interval_settings(callback, state)
    
    await callback.answer()

@router.callback_query(lambda c: c.data == "mass_send_to_single_group")
async def mass_send_to_single_group_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É"""
    await callback.message.answer("üéØ –í–≤–µ–¥—ñ—Ç—å ID –≥—Ä—É–ø–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:")
    await state.set_state(MassBroadcastStates.waiting_for_single_group_id)
    await callback.answer()

@router.message(MassBroadcastStates.waiting_for_single_group_id)
async def process_mass_single_group_id(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ ID –æ–¥–Ω—ñ—î—ó –≥—Ä—É–ø–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"""
    group_id = message.text.strip()
    data = await state.get_data()
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ ID –≥—Ä—É–ø–∏
    if group_id.isdigit():
        if not group_id.startswith('-100'):
            full_group_id = f"-100{group_id}"
        else:
            full_group_id = group_id
    else:
        await message.answer("‚ùå ID –≥—Ä—É–ø–∏ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤—É –≥—Ä—É–ø—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è
    fake_group = {
        'id': 0,
        'name': f'–ì—Ä—É–ø–∞ {group_id}',
        'group_id': full_group_id,
        'group_username': None,
        'package_name': '–û–¥–Ω–∞ –≥—Ä—É–ø–∞',
        'account_phone': None  # –ë—É–¥–µ–º–æ –≤–∏–∑–Ω–∞—á–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ
    }
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É –≥—Ä—É–ø—É
    await state.update_data(selected_groups=[fake_group])
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    data = await state.get_data()
    logger.info(f"üîç process_mass_single_group_id: interval={data.get('interval')}, use_random={data.get('use_random')}")
    
    if data.get('interval'):
        # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        logger.info("üìã –Ü–Ω—Ç–µ—Ä–≤–∞–ª –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏")
        await show_message_interval_settings(message, state)
    else:
        # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
        logger.info("üìã –Ü–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
        await show_interval_settings(message, state)

async def show_mass_broadcast_confirmation(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    data = await state.get_data()
    selected_groups = data.get('selected_groups', [])
    selected_package_id = data.get('selected_package_id')
    message_text = data.get('message_text', '')
    message_type = data.get('message_type', 'text')
    file_path = data.get('media_file_path', '')
    account_messages = data.get('account_messages', {})
    
    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if selected_package_id == "all_chats":
        # –î–ª—è "–≤—Å—ñ—Ö —á–∞—Ç—ñ–≤" –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        total_groups = "–≤—Å—ñ —á–∞—Ç–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö"
    else:
        total_groups = len(selected_groups)
    
    # –Ø–∫—â–æ —î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤, —Ä–∞—Ö—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —ó—Ö
    if account_messages:
        configured_accounts = list(account_messages.keys())
        accounts_count = len(configured_accounts)
        confirmation_text = f"üì§ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:</b>\n\n"
        confirmation_text += f"üë• <b>–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤:</b> {accounts_count}\n"
        confirmation_text += f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç–∏:</b> {', '.join(configured_accounts)}\n"
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        confirmation_text += f"\nüìù <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n"
        for phone, msg_data in account_messages.items():
            if isinstance(msg_data, dict):
                msg_type = msg_data.get('type', 'text')
                text = msg_data.get('text', '')
                if msg_type == 'text':
                    text_preview = text[:50] + "..." if len(text) > 50 else text
                    confirmation_text += f"‚Ä¢ {phone}: {text_preview}\n"
                else:
                    confirmation_text += f"‚Ä¢ {phone}: {msg_type} {f'({text[:20]}...)' if text else ''}\n"
    else:
        accounts_count = len(set(group['account_phone'] for group in selected_groups if group['account_phone']))
        confirmation_text = f"üì§ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏:</b>\n\n"
        confirmation_text += f"üë• <b>–ê–∫–∫–∞—É–Ω—Ç—ñ–≤:</b> {accounts_count}\n"
    
    confirmation_text += f"üì¶ <b>–ì—Ä—É–ø:</b> {total_groups}\n"
    confirmation_text += f"üìù <b>–¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b> {message_type}\n"
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏, —è–∫—â–æ –≤—ñ–Ω –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π
    if data.get('use_random_cycle_interval'):
        cycle_min = data.get('cycle_interval_min')
        cycle_max = data.get('cycle_interval_max')
        if cycle_min and cycle_max:
            confirmation_text += f"üîÑ <b>–Ü–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª—É:</b> {cycle_min}-{cycle_max} —Å–µ–∫ (—Ä–∞–Ω–¥–æ–º)\n"
    elif data.get('cycle_interval'):
        confirmation_text += f"üîÑ <b>–Ü–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª—É:</b> {data.get('cycle_interval')} —Å–µ–∫\n"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —à–∞–±–ª–æ–Ω
    if data.get('template_file_path') or data.get('template_file_id'):
        # –¶–µ —à–∞–±–ª–æ–Ω
        template_info = template_manager.db.get_template(data.get('template_id', 0))
        if template_info:
            confirmation_text += f"üìã <b>–®–∞–±–ª–æ–Ω:</b> {template_info['name']}\n"
            if template_info.get('text'):
                text_preview = template_info['text'][:100] + "..." if len(template_info['text']) > 100 else template_info['text']
                confirmation_text += f"üìÑ <b>–¢–µ–∫—Å—Ç:</b> {text_preview}\n"
            if template_info.get('file_name'):
                confirmation_text += f"üìé <b>–§–∞–π–ª:</b> {template_info['file_name']}\n"
    elif message_type == 'text':
        confirmation_text += f"üìÑ <b>–¢–µ–∫—Å—Ç:</b> {message_text[:100]}{'...' if len(message_text) > 100 else ''}\n"
    else:
        confirmation_text += f"üìé <b>–§–∞–π–ª:</b> {os.path.basename(file_path) if file_path else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
    
    confirmation_text += "\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É?"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É", callback_data="confirm_mass_broadcast")],
        [InlineKeyboardButton(text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤ —Ü–∏–∫–ª—ñ", callback_data="confirm_loop_broadcast")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª—É", callback_data="set_cycle_interval")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="Mass_broadcast")]
    ])
    
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.answer(confirmation_text, parse_mode='HTML', reply_markup=keyboard)
    else:
        await message_or_callback.answer(confirmation_text, parse_mode='HTML', reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "confirm_mass_broadcast")
async def confirm_mass_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    data = await state.get_data()
    selected_groups = data.get('selected_groups', [])
    selected_package_id = data.get('selected_package_id')
    message_text = data.get('message_text', '')
    message_type = data.get('message_type', 'text')
    file_path = data.get('media_file_path', '')
    interval = data.get('interval', 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≥—Ä—É–ø–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
    if not selected_groups and selected_package_id != "all_chats":
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        await state.clear()
        await callback.answer()
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Ä—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    account_messages = data.get('account_messages', {})
    if account_messages:
        # –¶–µ —Ä—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
        message_data = account_messages
    else:
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
        if message_type == 'text':
            message_data = message_text
        elif data.get('template_file_path') or data.get('template_file_id'):
            # –¶–µ —à–∞–±–ª–æ–Ω
            message_data = {
                'type': message_type,
                'text': data.get('message_text', ''),
                'file_path': data.get('template_file_path'),
                'file_id': data.get('template_file_id')
            }
        else:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î file_path –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –º–µ–¥—ñ–∞ (–∫—Ä—ñ–º —Å—Ç—ñ–∫–µ—Ä—ñ–≤)
            if message_type != 'sticker' and not file_path:
                await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É.")
                await callback.answer()
                return
            elif message_type == 'sticker' and not data.get('media_file_id'):
                await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ID —Å—Ç—ñ–∫–µ—Ä–∞.")
                await callback.answer()
                return
            
            message_data = {
                'type': message_type,
                'text': data.get('text', ''),
                'file_path': file_path,
                'file_id': data.get('media_file_id')
            }
    
    # –û—á–∏—â—É—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await state.update_data(stop_broadcast=False)
    
    await callback.message.answer("üöÄ –ú–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É –∑–∞–ø—É—â–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å —á–µ—Ä–µ–∑ '–°—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è'.\n\n"
                                 "üõë –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop_message")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    account_interval_data = {
        'interval': data.get('interval'),
        'use_random': data.get('use_random'),
        'min_random': data.get('min_random'),
        'max_random': data.get('max_random')
    }
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    asyncio.create_task(mass_broadcast_process(
        message_data, interval, data.get('use_random', False), 
        data.get('min_random', 30), data.get('max_random', 120), 
        data.get('selected_package_id', 0), callback.message,
        data.get('message_interval', 10), data.get('use_random_message_interval', False), 
        data.get('min_message_interval', 5), data.get('max_message_interval', 30),
        account_messages=data.get('account_messages', {}),
        message_type=message_type,
        media_file_path=file_path,
        media_file_id=data.get('media_file_id'),
        selected_groups=data.get('selected_groups', []),
        state=state,
        account_interval_data=account_interval_data
    ))
    
    await state.clear()
    await callback.answer()



@router.callback_query(lambda c: c.data == "confirm_loop_broadcast")
async def confirm_loop_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    data = await state.get_data()
    selected_groups = data.get('selected_groups', [])
    selected_package_id = data.get('selected_package_id')
    message_text = data.get('message_text', '')
    message_type = data.get('message_type', 'text')
    file_path = data.get('media_file_path', '')
    # –õ–æ–≥—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ FSM –ø–µ—Ä–µ–¥ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    logger.info(f"üîç FSM –¥–∞–Ω—ñ –≤ confirm_loop_broadcast_callback: use_random_cycle_interval={data.get('use_random_cycle_interval')}, cycle_interval={data.get('cycle_interval')}, cycle_interval_min={data.get('cycle_interval_min')}, cycle_interval_max={data.get('cycle_interval_max')}, interval={data.get('interval')}")
    

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
    if data.get('use_random_cycle_interval'):
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª—É
        cycle_min = data.get('cycle_interval_min', 30)
        cycle_max = data.get('cycle_interval_max', 120)
        interval = random.randint(cycle_min, cycle_max)
        logger.info(f"üé≤ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª—É: {interval} —Å–µ–∫ (–¥—ñ–∞–ø–∞–∑–æ–Ω: {cycle_min}-{cycle_max})")
    else:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        interval = data.get('cycle_interval') or data.get('interval') or 60
        logger.info(f"‚è≥ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫ (cycle_interval={data.get('cycle_interval')}, interval={data.get('interval')})")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –±–∞—Å–µ–π–Ω–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
    if not selected_groups and selected_package_id != "all_chats":
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        await state.clear()
        await callback.answer()
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î account_messages (—Ä—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤)
    account_messages = data.get('account_messages', {})
    print(f"DEBUG: confirm_loop_broadcast_callback - account_messages: {account_messages}")
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if account_messages:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ account_messages –Ω–∞–ø—Ä—è–º—É
        message_data = account_messages
        print(f"DEBUG: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ account_messages –¥–ª—è —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")
    elif message_type == 'text':
        message_data = message_text
    elif data.get('template_file_path') or data.get('template_file_id'):
        # –¶–µ —à–∞–±–ª–æ–Ω
        message_data = {
            'type': message_type,
            'text': data.get('message_text', ''),
            'file_path': data.get('template_file_path'),
            'file_id': data.get('template_file_id')
        }
    else:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î file_path –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –º–µ–¥—ñ–∞ (–∫—Ä—ñ–º —Å—Ç—ñ–∫–µ—Ä—ñ–≤)
        if message_type != 'sticker' and not file_path:
            await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É.")
            await callback.answer()
            return
        elif message_type == 'sticker' and not data.get('media_file_id'):
            await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ID —Å—Ç—ñ–∫–µ—Ä–∞.")
            await callback.answer()
            return
        
        message_data = {
            'type': message_type,
            'text': data.get('text', ''),
            'file_path': file_path,
            'file_id': data.get('media_file_id')
        }
    
    # –û—á–∏—â—É—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await state.update_data(stop_broadcast=False)
    
    await callback.message.answer("üîÑ –¶–∏–∫–ª—ñ—á–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –∑–∞–ø—É—â–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å —á–µ—Ä–µ–∑ '–°—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è'.\n\n"
                                 "üõë –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop_message")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É —Ü–∏–∫–ª—É —Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø–µ—Ä–µ–¥ –æ—á–∏—â–µ–Ω–Ω—è–º —Å—Ç–∞–Ω—É
    cycle_interval_data = {
        'cycle_interval': data.get('cycle_interval'),
        'cycle_interval_min': data.get('cycle_interval_min'),
        'cycle_interval_max': data.get('cycle_interval_max'),
        'use_random_cycle_interval': data.get('use_random_cycle_interval')
    }
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    account_interval_data = {
        'interval': data.get('interval'),
        'use_random': data.get('use_random'),
        'min_random': data.get('min_random'),
        'max_random': data.get('max_random')
    }
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª—ñ—á–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    asyncio.create_task(loop_broadcast_process(
        message_data, interval, data.get('use_random', False), 
        data.get('min_random', 30), data.get('max_random', 120), 
        data.get('selected_package_id', 0), callback.message,
        data.get('message_interval', 10), data.get('use_random_message_interval', False), 
        data.get('min_message_interval', 5), data.get('max_message_interval', 30),
        account_messages=data.get('account_messages', {}),
        message_type=message_type,
        media_file_path=file_path,
        media_file_id=data.get('media_file_id'),
        selected_groups=data.get('selected_groups', []),
        state=state,
        cycle_interval_data=cycle_interval_data,
        account_interval_data=account_interval_data
    ))
    
    await state.clear()
    await callback.answer()

@router.callback_query(lambda c: c.data == "set_cycle_interval")
async def set_cycle_interval_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –¥–ª—è —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    await callback.message.answer(
        "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏:</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —á–µ—Ä–µ–∑ –∫–æ–º—É(–º—ñ–Ω—ñ–º—É–º 10, –º–∞–∫—Å–∏–º—É–º 3600):\n\n"
        "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:</b>\n"
        "‚Ä¢ 30-60 —Å–µ–∫ - —à–≤–∏–¥–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∞\n"
        "‚Ä¢ 60-120 —Å–µ–∫ - —Å–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å\n"
        "‚Ä¢ 120-300 —Å–µ–∫ - –ø–æ–≤—ñ–ª—å–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞",
        parse_mode='HTML'
    )
    await state.set_state(MassBroadcastStates.waiting_for_cycle_interval)
    await callback.answer()

@router.message(MassBroadcastStates.waiting_for_cycle_interval)
async def process_cycle_interval(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –¥–ª—è —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    try:
        text = message.text.strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥—ñ–∞–ø–∞–∑–æ–Ω (–º—ñ—Å—Ç–∏—Ç—å –∫–æ–º—É)
        if ',' in text:
            # –î—ñ–∞–ø–∞–∑–æ–Ω —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
            parts = text.split(',')
            if len(parts) != 2:
                await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: min,max (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 30,120)")
                return
            
            min_interval = int(parts[0].strip())
            max_interval = int(parts[1].strip())
            
            if min_interval < 10 or max_interval > 3600 or min_interval >= max_interval:
                await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω. –ú—ñ–Ω—ñ–º—É–º: 10, –º–∞–∫—Å–∏–º—É–º: 3600, min < max")
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
            await state.update_data(
                cycle_interval_min=min_interval,
                cycle_interval_max=max_interval,
                use_random_cycle_interval=True
            )
            
            logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª—É: {min_interval}-{max_interval} —Å–µ–∫, use_random_cycle_interval=True")
            await message.answer(f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {min_interval}-{max_interval} —Å–µ–∫—É–Ω–¥")
            
        else:
            # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
            interval = int(text)
            
            if interval < 10 or interval > 3600:
                await message.answer("‚ùå –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 10 –¥–æ 3600 —Å–µ–∫—É–Ω–¥.")
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
            await state.update_data(
                cycle_interval=interval,
                use_random_cycle_interval=False
            )
            
            logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª—É: {interval} —Å–µ–∫, use_random_cycle_interval=False")
            await message.answer(f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {interval} —Å–µ–∫—É–Ω–¥")
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await show_mass_broadcast_confirmation(message, state)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ –¥—ñ–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 60 –∞–±–æ 30,120).")

async def mass_broadcast_process(message_text, interval: int, use_random: bool, 
                               min_random: int, max_random: int, selected_package_id: int, message_obj,
                               message_interval: int = 10, use_random_message_interval: bool = False,
                               min_message_interval: int = 5, max_message_interval: int = 30,
                               account_messages: dict = None, stop_event: asyncio.Event = None,
                               message_type: str = None, media_file_path: str = None, media_file_id: str = None, selected_groups: list = None,
                               state: FSMContext = None, media_caption: str = None, account_interval_data: dict = None):
    """–ü—Ä–æ—Ü–µ—Å –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    
    logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")
    logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–æ–∑—Å–∏–ª–∫–∏:")
    logger.info(f"   - –Ü–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {interval} —Å–µ–∫ (—Ä–∞–Ω–¥–æ–º: {use_random})")
    logger.info(f"   - –Ü–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏: {message_interval} —Å–µ–∫ (—Ä–∞–Ω–¥–æ–º: {use_random_message_interval})")
    if use_random_message_interval:
        logger.info(f"   - –î—ñ–∞–ø–∞–∑–æ–Ω —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏: {min_message_interval}-{max_message_interval} —Å–µ–∫")
    logger.info(f"   - –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_type}")
    logger.info(f"   - –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤: {len(account_messages) if account_messages else 0}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∫–∏
    status_id = None
    try:
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
        if isinstance(message_text, str):
            status_text = message_text[:100] + "..." if len(message_text) > 100 else message_text
        else:
            status_text = f"{message_text.get('type', 'unknown')} message"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä—É–ø
        if selected_groups:
            total_groups = len(selected_groups)
        elif selected_package_id == "all_chats":
            # –î–ª—è –≤—Å—ñ—Ö —á–∞—Ç—ñ–≤ —Ä–∞—Ö—É—î–º–æ –ø—Ä–∏–±–ª–∏–∑–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            accounts = db.get_accounts()
            total_groups = len(accounts) * 10  # –ü—Ä–∏–±–ª–∏–∑–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
        else:
            total_groups = 0
        
        # –ù–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å - —Å—Ç–∞—Ç—É—Å–∏ –±—É–¥—É—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–∫—Ä–µ–º–æ
        status_id = None
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
    
    try:
        accounts = db.get_accounts()
        
        if not accounts:
            await message_obj.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
            return
        
        # –Ø–∫—â–æ —î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤, —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫–∫–∞—É–Ω—Ç–∏
        if account_messages:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∏
            configured_accounts = [acc for acc in accounts if acc['phone_number'] in account_messages]
            accounts = configured_accounts
            logger.info(f"üì± –§—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
            for phone in account_messages.keys():
                logger.info(f"   - {phone}: {account_messages[phone].get('type', 'text') if isinstance(account_messages[phone], dict) else 'text'}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
        if selected_groups:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞—Å–µ–π–Ω–∏ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–≤–∫–ª—é—á–∞—é—á–∏ –æ–¥–Ω—É –≥—Ä—É–ø—É)
            groups_to_send = selected_groups
        elif selected_package_id == "all_chats":
            # –í—Å—ñ —á–∞—Ç–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            all_groups = []
            for account in accounts:
                try:
                    groups = await get_all_chats_for_account(account['phone_number'])
                    all_groups.extend(groups)
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —á–∞—Ç—ñ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account['phone_number']}: {e}")
                    continue
            groups_to_send = all_groups
        elif selected_package_id == 0:
            # –í—Å—ñ –±–∞—Å–µ–π–Ω–∏
            all_groups = []
            for account in accounts:
                packages = db.get_group_packages(account['phone_number'])
                for package in packages:
                    groups = db.get_groups_by_package(package['id'])
                    all_groups.extend(groups)
            groups_to_send = all_groups
        else:
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø–∞–∫–µ—Ç
            groups_to_send = db.get_groups_by_package(selected_package_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É
        if len(groups_to_send) == 1 and groups_to_send[0].get('package_name') == '–û–¥–Ω–∞ –≥—Ä—É–ø–∞':
            # –¶–µ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∏
            single_group = groups_to_send[0]
            groups_by_account = {}
            for account in accounts:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –≥—Ä—É–ø–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                group_copy = single_group.copy()
                group_copy['account_phone'] = account['phone_number']
                groups_by_account[account['phone_number']] = [group_copy]
        else:
            # –ó–≤–∏—á–∞–π–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –ø–∞–∫–µ—Ç—ñ–≤ –≥—Ä—É–ø
            # –ì—Ä—É–ø—É—î–º–æ –±–∞—Å–µ–π–Ω–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            groups_by_account = {}
            for group in groups_to_send:
                account_phone = group['account_phone']
                if account_phone not in groups_by_account:
                    groups_by_account[account_phone] = []
                groups_by_account[account_phone].append(group)
        
        if not groups_by_account:
            await message_obj.answer("‚ùå –ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
            return
        
        logger.info(f"üì¶ –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏: {len(groups_to_send)} –≥—Ä—É–ø")
        logger.info(f"üë• –†–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö: {len(groups_by_account)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
        for account_phone, groups in groups_by_account.items():
            logger.info(f"   - {account_phone}: {len(groups)} –≥—Ä—É–ø")
        
        total_sent = 0
        total_failed = 0
        
        for account_phone, groups in groups_by_account.items():
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if state:
                data = await state.get_data()
                if data.get('stop_broadcast', False):
                    logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏")
                    await message_obj.answer("üõë –ú–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                    return
            
            try:
                logger.info(f"üì± –û–±—Ä–æ–±–ª—è—î–º–æ –∞–∫–∫–∞—É–Ω—Ç: {account_phone} ({len(groups)} –≥—Ä—É–ø)")
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∞
                account = None
                for acc in accounts:
                    if acc['phone_number'] == account_phone:
                        account = acc
                        break
                
                if not account:
                    logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
                    continue
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
                session_name = f"sessions/temp_{account_phone.replace('+', '').replace('-', '')}"
                logger.info(f"üîó –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}: {session_name}")
                client = TelegramClient(session_name, account['api_id'], account['api_hash'])
                
                logger.info(f"üîå –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ Telegram –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                await client.connect()
                
                # –†–µ—î—Å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç
                register_active_client(account_phone, client)
                
                if not await client.is_user_authorized():
                    logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
                    await client.disconnect()
                    continue
                
                logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_phone} —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
                
                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å running —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                try:
                    total_groups_for_account = len(groups)
                    message_preview = "–ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞"
                    if account_messages and account_phone in account_messages:
                        msg_data = account_messages[account_phone]
                        if isinstance(msg_data, dict):
                            msg_type = msg_data.get('type', 'text')
                            message_preview = f"–ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ ({msg_type})"
                    elif isinstance(message_text, str):
                        message_preview = message_text[:50] + "..." if len(message_text) > 50 else message_text
                    
                    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å running —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    db.set_broadcast_status(account_phone, message_preview, total_groups_for_account, 0, 0, 'running')
                    logger.info(f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å running –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É running –¥–ª—è {account_phone}: {e}")
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                if account_messages and account_phone in account_messages:
                    logger.info(f"üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                    current_message = account_messages[account_phone]
                else:
                    # –î–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —à–∞–±–ª–æ–Ω
                    if isinstance(message_text, dict) and message_text.get('type'):
                        # –¶–µ —à–∞–±–ª–æ–Ω
                        logger.info(f"üìã –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —à–∞–±–ª–æ–Ω: {message_text['type']}")
                        current_message = message_text
                    elif message_type and media_file_path:
                        # –¶–µ –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        logger.info(f"üìé –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_type}, —Ñ–∞–π–ª: {media_file_path}")
                        current_message = {
                            'type': message_type,
                            'text': media_caption or '',  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—ñ–¥–ø–∏—Å –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                            'file_path': media_file_path,
                            'file_id': media_file_id  # file_id –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ—ó
                        }
                    else:
                        # –¶–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        logger.info(f"üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                        current_message = message_text
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –±–∞—Å–µ–π–Ω–∏ —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                logger.info(f"üì§ –ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}: {len(groups)} –≥—Ä—É–ø")
                for j, group in enumerate(groups):
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–æ—é –≥—Ä—É–ø–æ—é
                    if state:
                        data = await state.get_data()
                        if data.get('stop_broadcast', False):
                            logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏")
                            await message_obj.answer("üõë –ú–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                            await client.disconnect()
                            return
                    
                    max_retries = 3
                    logger.info(f"üìã –û–±—Ä–æ–±–ª—è—î–º–æ –≥—Ä—É–ø—É {j+1}/{len(groups)}: {group['name']} (ID: {group['group_id']})")
                    for attempt in range(max_retries):
                        try:
                            group_id = int(group['group_id'])
                            
                            logger.info(f"üì§ –°–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries} –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø—É {group['name']} (ID: {group_id})")
                            logger.info(f"üîç –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π ID –∑ –±–∞–∑–∏: {group['group_id']}, –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–π: {group_id}")
                        
                            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                            await message_obj.answer(f"üì§ <b>–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n\n"
                                                   f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {account_phone}\n"
                                                   f"üìù <b>–ì—Ä—É–ø–∞:</b> {group['name']}\n"
                                                   f"üÜî <b>ID –≥—Ä—É–ø–∏:</b> {group_id}\n"
                                                   f"üìà <b>–ü—Ä–æ–≥—Ä–µ—Å:</b> {j+1}/{len(groups)}",
                                                   parse_mode='HTML')
                            
                            success = await db.send_message_with_retry(
                                client, 
                                str(group_id), 
                                group['name'], 
                                current_message,
                                message_obj
                            )
                            
                            if success:
                                total_sent += 1
                                logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø—É {group['name']} ({group_id})")
                                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                                
                                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∫–∏
                                if status_id:
                                    try:
                                        db.update_broadcast_status(status_id, sent_count=total_sent, failed_count=total_failed)
                                    except Exception as e:
                                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
                            else:
                                total_failed += 1
                                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É {group['name']} ({group_id})")
                                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                                
                                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∫–∏
                                if status_id:
                                    try:
                                        db.update_broadcast_status(status_id, sent_count=total_sent, failed_count=total_failed)
                                    except Exception as e:
                                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
                            
                            # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                            if j < len(groups) - 1:  # –ù–µ —á–µ–∫–∞—î–º–æ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞—Ç—Ä–∏–º–∫–æ—é
                                if state:
                                    data = await state.get_data()
                                    if data.get('stop_broadcast', False):
                                        logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏")
                                        await message_obj.answer("üõë –ú–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                                        await client.disconnect()
                                        return
                                
                                if use_random_message_interval:
                                    delay = random.randint(min_message_interval, max_message_interval)
                                    await message_obj.answer(f"‚è≥ <b>–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏:</b>\n\n"
                                                           f"üïê <b>–ß–µ–∫–∞—î–º–æ:</b> {delay} —Å–µ–∫—É–Ω–¥\n"
                                                           f"üìä <b>–î—ñ–∞–ø–∞–∑–æ–Ω:</b> {min_message_interval}-{max_message_interval} —Å–µ–∫\n"
                                                           f"üìù <b>–ì—Ä—É–ø–∞:</b> {group['name']}\n"
                                                           f"üìà <b>–ü—Ä–æ–≥—Ä–µ—Å:</b> {j+1}/{len(groups)}",
                                                           parse_mode='HTML')
                                else:
                                    delay = message_interval
                                    await message_obj.answer(f"‚è≥ <b>–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏:</b>\n\n"
                                                           f"üïê <b>–ß–µ–∫–∞—î–º–æ:</b> {delay} —Å–µ–∫—É–Ω–¥\n"
                                                           f"üìù <b>–ì—Ä—É–ø–∞:</b> {group['name']}\n"
                                                           f"üìà <b>–ü—Ä–æ–≥—Ä–µ—Å:</b> {j+1}/{len(groups)}",
                                                           parse_mode='HTML')
                                
                                logger.info(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏: {delay} —Å–µ–∫—É–Ω–¥")
                                await asyncio.sleep(delay)
                                
                            break  # –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É retry
                            
                        except FloodWaitError as flood_error:
                            # FloodWait –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ database.py
                            total_failed += 1
                            logger.error(f"‚ùå FloodWait Error –≤ –º–∞—Å–æ–≤—ñ–π —Ä–æ–∑—Å–∏–ª—Ü—ñ: {flood_error}")
                            logger.error(f"‚è≥ FloodWait: {flood_error.seconds} —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥—Ä—É–ø–∏ {group['name']}")
                            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è FloodWait: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                            logger.info(f"üß™ FloodWaitError –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤ mass_broadcast.py, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥—Ä—É–ø–∏")
                            break
                        
                        except Exception as e:
                            error_msg = str(e)
                            logger.warning(f"‚ö†Ô∏è –°–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries} –Ω–µ–≤–¥–∞–ª–∞ –¥–ª—è –≥—Ä—É–ø–∏ {group['name']}: {error_msg}")
                            
                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏
                            if "Could not find the input entity" in error_msg:
                                logger.error(f"‚ùå –ì—Ä—É–ø–∞ {group['name']} (ID: {group_id}) –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                                logger.error(f"üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏: –≥—Ä—É–ø–∞ –≤–∏–¥–∞–ª–µ–Ω–∞, –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π, –≥—Ä—É–ø–∞ —Å—Ç–∞–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—é")
                                await message_obj.answer(f"‚ùå <b>–ì—Ä—É–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:</b>\n\n"
                                                       f"üìù <b>–ì—Ä—É–ø–∞:</b> {group['name']}\n"
                                                       f"üÜî <b>ID:</b> {group_id}\n"
                                                       f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {account_phone}\n\n"
                                                       f"üí° <b>–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:</b>\n"
                                                       f"‚Ä¢ –ì—Ä—É–ø–∞ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞\n"
                                                       f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –≤ –≥—Ä—É–ø—ñ\n"
                                                       f"‚Ä¢ –ì—Ä—É–ø–∞ —Å—Ç–∞–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—é",
                                                       parse_mode='HTML')
                                total_failed += 1
                                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                                break
                            elif "Chat admin privileges are required" in error_msg:
                                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø—É {group['name']}")
                                total_failed += 1
                                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                                break
                            elif any(restriction in error_msg for restriction in [
                                "CHAT_SEND_PHOTOS_FORBIDDEN", "CHAT_SEND_MEDIA_FORBIDDEN", 
                                "CHAT_SEND_VIDEOS_FORBIDDEN", "CHAT_SEND_AUDIOS_FORBIDDEN"
                            ]):
                                logger.warning(f"‚ö†Ô∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –º–µ–¥—ñ–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∞ –≤ –≥—Ä—É–ø—ñ {group['name']}")
                                total_failed += 1
                                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                                break
                            elif attempt < max_retries - 1:
                                # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                                retry_delay = random.randint(5, 15)
                                logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥")
                                await asyncio.sleep(retry_delay)
                                continue
                            else:
                                total_failed += 1
                                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ –≥—Ä—É–ø—É {group['name']} –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±: {e}")
                                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                                break
                
                logger.info(f"üîå –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                await client.disconnect()
                unregister_active_client(account_phone)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ completed –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
                try:
                    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —É—Å–ø—ñ—à–Ω—ñ —Ç–∞ –Ω–µ–≤–¥–∞–ª—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    account_sent = 0
                    account_failed = 0
                    for group in groups:
                        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à —Ç–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫, –∞–ª–µ –ø–æ–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
                        pass
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ completed
                    db.update_broadcast_status_by_phone(account_phone, account_sent, account_failed, 'completed')
                    logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å completed –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è {account_phone}: {e}")
                
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞—Ç—Ä–∏–º–∫–æ—é –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                if state:
                    data = await state.get_data()
                    if data.get('stop_broadcast', False):
                        logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏")
                        await message_obj.answer("üõë –ú–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                        return
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                if account_interval_data:
                    if account_interval_data.get('use_random'):
                        delay = random.randint(account_interval_data.get('min_random', 30), account_interval_data.get('max_random', 120))
                        logger.info(f"üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {delay} —Å–µ–∫ (–¥—ñ–∞–ø–∞–∑–æ–Ω: {account_interval_data.get('min_random')}-{account_interval_data.get('max_random')})")
                    else:
                        delay = account_interval_data.get('interval', interval)
                        logger.info(f"‚è≥ –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {delay} —Å–µ–∫")
                else:
                    # Fallback –¥–æ FSM –¥–∞–Ω–∏—Ö
                    data = await state.get_data()
                    delay = data.get('interval') or interval or 60
                    logger.info(f"‚è≥ Fallback —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {delay} —Å–µ–∫ (data.interval={data.get('interval')}, param.interval={interval})")
                await asyncio.sleep(delay)
                
                logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±—Ä–æ–±–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}: {e}")
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ failed –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                try:
                    db.update_broadcast_status_by_phone(account_phone, 0, len(groups), 'failed')
                    logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å failed –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                except Exception as status_error:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É failed –¥–ª—è {account_phone}: {status_error}")
                
                continue
        
        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä—É–ø
        total_groups = sum(len(groups) for groups in groups_by_account.values())
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
        success_rate = (total_sent / (total_sent + total_failed) * 100) if (total_sent + total_failed) > 0 else 0
        
        logger.info("üèÅ –ú–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        logger.info(f"üìä –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
        logger.info(f"üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%")
        logger.info(f"üë• –ê–∫–∫–∞—É–Ω—Ç—ñ–≤: {len(groups_by_account)}")
        logger.info(f"üì¶ –ì—Ä—É–ø: {total_groups}")
        
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∫–∏
        if status_id:
            try:
                db.update_broadcast_status(status_id, status='completed')
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"""
üìä <b>–ú–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>

‚úÖ <b>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {total_sent}
‚ùå <b>–ü–æ–º–∏–ª–æ–∫:</b> {total_failed}
üìà <b>–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å:</b> {success_rate:.1f}%
üë• <b>–ê–∫–∫–∞—É–Ω—Ç—ñ–≤:</b> {len(groups_by_account)}
üì¶ <b>–ì—Ä—É–ø:</b> {total_groups}

üìã <b>–î–µ—Ç–∞–ª—ñ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö:</b>
        """
        
        # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ –∫–æ–∂–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        for account_phone, groups in groups_by_account.items():
            account_sent = 0
            account_failed = 0
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            result_text += f"üì± {account_phone}: {len(groups)} –≥—Ä—É–ø\n"
        
        result_text += f"\nüìä <b>–°—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∫–∏:</b> –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        if status_id:
            result_text += f"\nüÜî <b>ID —Å—Ç–∞—Ç—É—Å—É:</b> {status_id}"
        
        await message_obj.answer(result_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –º–∞—Å–æ–≤—ñ–π —Ä–æ–∑—Å–∏–ª—Ü—ñ: {e}")
        logger.error(f"üìä –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent if 'total_sent' in locals() else 0}, –Ω–µ–≤–¥–∞–ª–æ={total_failed if 'total_failed' in locals() else 0}")
        await message_obj.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –º–∞—Å–æ–≤—ñ–π —Ä–æ–∑—Å–∏–ª—Ü—ñ: {e}")
        return

async def loop_broadcast_process(message_text, interval: int, use_random: bool, 
                               min_random: int, max_random: int, selected_package_id: int, message_obj,
                               message_interval: int = 10, use_random_message_interval: bool = False,
                               min_message_interval: int = 5, max_message_interval: int = 30,
                               account_messages: dict = None, stop_event: asyncio.Event = None,
                               message_type: str = None, media_file_path: str = None, media_file_id: str = None, selected_groups: list = None,
                               state: FSMContext = None, media_caption: str = None, cycle_interval_data: dict = None, account_interval_data: dict = None):
    """–ü—Ä–æ—Ü–µ—Å —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    
    logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")
    logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–æ–∑—Å–∏–ª–∫–∏: interval={interval}, use_random={use_random}, package_id={selected_package_id}")
    logger.info(f"üì± –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_type}, media_file_path={media_file_path}")
    print(f"DEBUG: loop_broadcast_process - account_messages: {account_messages}")
    print(f"DEBUG: loop_broadcast_process - message_text: {message_text}")
    print(f"DEBUG: loop_broadcast_process - message_type: {message_type}")
    print(f"DEBUG: loop_broadcast_process - media_file_path: {media_file_path}")
    
    await message_obj.answer("üîÑ –¶–∏–∫–ª—ñ—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop_message")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        if db is None:
            logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!")
            await message_obj.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")
            return
        
        logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–µ")
        accounts = db.get_accounts()
        logger.info(f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ {len(accounts) if accounts else 0} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        
        if not accounts:
            logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
            await message_obj.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
            return
        
        # –Ø–∫—â–æ —î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤, —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫–∫–∞—É–Ω—Ç–∏
        if account_messages:
            logger.info(f"üîß –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫–∫–∞—É–Ω—Ç–∏ –∑–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏: {len(account_messages)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∏
            configured_accounts = [acc for acc in accounts if acc['phone_number'] in account_messages]
            accounts = configured_accounts
            logger.info(f"‚úÖ –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞—Å–µ–π–Ω–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
        logger.info(f"üì¶ –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏: selected_package_id={selected_package_id}, selected_groups={len(selected_groups) if selected_groups else 0}")
        if selected_groups:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞—Å–µ–π–Ω–∏ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–≤–∫–ª—é—á–∞—é—á–∏ –æ–¥–Ω—É –≥—Ä—É–ø—É)
            logger.info(f"üìã –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –≥—Ä—É–ø–∏: {len(selected_groups)} –≥—Ä—É–ø")
            groups_to_send = selected_groups
        elif selected_package_id == "all_chats":
            # –í—Å—ñ —á–∞—Ç–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            logger.info("üìã –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —á–∞—Ç–∏ –∑ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
            all_groups = []
            for account in accounts:
                try:
                    logger.info(f"üîç –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Ç–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {account['phone_number']}")
                    groups = await get_all_chats_for_account(account['phone_number'])
                    all_groups.extend(groups)
                    logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(groups)} —á–∞—Ç—ñ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account['phone_number']}")
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —á–∞—Ç—ñ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account['phone_number']}: {e}")
                    continue
            groups_to_send = all_groups
            logger.info(f"üìä –í—Å—å–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–æ {len(groups_to_send)} —á–∞—Ç—ñ–≤ –∑ —É—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
        elif selected_package_id == 0:
            # –í—Å—ñ –±–∞—Å–µ–π–Ω–∏
            logger.info("üìã –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –±–∞—Å–µ–π–Ω–∏ –∑ —É—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
            all_groups = []
            for account in accounts:
                packages = db.get_group_packages(account['phone_number'])
                logger.info(f"üì¶ –ê–∫–∫–∞—É–Ω—Ç {account['phone_number']}: {len(packages)} –ø–∞–∫–µ—Ç—ñ–≤")
                for package in packages:
                    groups = db.get_groups_by_package(package['id'])
                    all_groups.extend(groups)
                    logger.info(f"üìã –ü–∞–∫–µ—Ç {package['name']}: {len(groups)} –≥—Ä—É–ø")
            groups_to_send = all_groups
            logger.info(f"üìä –í—Å—å–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–æ {len(groups_to_send)} –≥—Ä—É–ø –∑ —É—Å—ñ—Ö –±–∞—Å–µ–π–Ω—ñ–≤")
        else:
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø–∞–∫–µ—Ç
            logger.info(f"üìã –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø–∏ –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞–∫–µ—Ç—É: {selected_package_id}")
            groups_to_send = db.get_groups_by_package(selected_package_id)
            logger.info(f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ {len(groups_to_send) if groups_to_send else 0} –≥—Ä—É–ø –∑ –ø–∞–∫–µ—Ç—É {selected_package_id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É
        if len(groups_to_send) == 1 and groups_to_send[0].get('package_name') == '–û–¥–Ω–∞ –≥—Ä—É–ø–∞':
            # –¶–µ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∏
            logger.info("üéØ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É - —Ä–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø–æ –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö")
            single_group = groups_to_send[0]
            groups_by_account = {}
            for account in accounts:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –≥—Ä—É–ø–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                group_copy = single_group.copy()
                group_copy['account_phone'] = account['phone_number']
                groups_by_account[account['phone_number']] = [group_copy]
            logger.info(f"üìä –†–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ –æ–¥–Ω—É –≥—Ä—É–ø—É –ø–æ {len(groups_by_account)} –∞–∫–∫–∞—É–Ω—Ç–∞—Ö")
        else:
            # –ó–≤–∏—á–∞–π–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –ø–∞–∫–µ—Ç—ñ–≤ –≥—Ä—É–ø
            # –ì—Ä—É–ø—É—î–º–æ –±–∞—Å–µ–π–Ω–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            logger.info("üìã –ì—Ä—É–ø—É—î–º–æ –≥—Ä—É–ø–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö")
            groups_by_account = {}
            for group in groups_to_send:
                account_phone = group['account_phone']
                if account_phone not in groups_by_account:
                    groups_by_account[account_phone] = []
                groups_by_account[account_phone].append(group)
            logger.info(f"üìä –ì—Ä—É–ø–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω—ñ –ø–æ {len(groups_by_account)} –∞–∫–∫–∞—É–Ω—Ç–∞—Ö")
        
        if not groups_by_account:
            logger.error("‚ùå –ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏")
            await message_obj.answer("‚ùå –ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
            return
        
        total_sent = 0
        total_failed = 0
        cycle_count = 0
        
        logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤, {len(groups_to_send)} –≥—Ä—É–ø")

        # –¶–∏–∫–ª—ñ—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞: –∫–æ–∂–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ –≤—Å—ñ—Ö —Å–≤–æ—ó—Ö –±–∞—Å–µ–π–Ω–∞—Ö, –ø–æ—Ç—ñ–º –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
        while True:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ–≥–æ —Ü–∏–∫–ª—É
            if state:
                data = await state.get_data()
                if data.get('stop_broadcast', False):
                    logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏")
                    await message_obj.answer("üõë –¶–∏–∫–ª—ñ—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                    break
            
            cycle_count += 1
            logger.info(f"üîÑ –ü–æ—á–∞—Ç–æ–∫ —Ü–∏–∫–ª—É #{cycle_count}")
            await message_obj.answer(f"üîÑ <b>–ü–æ—á–∞—Ç–æ–∫ —Ü–∏–∫–ª—É #{cycle_count}</b>\n\n"
                                   f"üë• <b>–ê–∫–∫–∞—É–Ω—Ç—ñ–≤:</b> {len(accounts)}\n"
                                   f"üì¶ <b>–ì—Ä—É–ø:</b> {len(groups_to_send)}",
                                   parse_mode='HTML')
            
            # –ù–ï –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ü–∏–∫–ª—É
            # –°—Ç–∞—Ç—É—Å –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –π–æ–≥–æ –æ–±—Ä–æ–±–∫–æ—é
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            for account_phone, groups in groups_by_account.items():
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                if state:
                    data = await state.get_data()
                    if data.get('stop_broadcast', False):
                        logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏")
                        await message_obj.answer("üõë –¶–∏–∫–ª—ñ—á–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                        return
                
                try:
                    logger.info(f"üì± –û–±—Ä–æ–±–ª—è—î–º–æ –∞–∫–∫–∞—É–Ω—Ç: {account_phone} ({len(groups)} –≥—Ä—É–ø)")
                    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∞
                    account = None
                    for acc in accounts:
                        if acc['phone_number'] == account_phone:
                            account = acc
                            break
                    
                    if not account:
                        logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
                        continue
                    
                    await message_obj.answer(f"üì± <b>–†–æ–∑—Å–∏–ª–∫–∞ –∑ –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {account_phone}\n"
                                           f"üì¶ <b>–ì—Ä—É–ø –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:</b> {len(groups)}",
                                           parse_mode='HTML')
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
                    session_name = f"sessions/temp_{account_phone.replace('+', '').replace('-', '')}"
                    logger.info(f"üîó –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}: {session_name}")
                    client = TelegramClient(session_name, account['api_id'], account['api_hash'])
                    
                    logger.info(f"üîå –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ Telegram –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                    await client.connect()
                    
                    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç
                    register_active_client(account_phone, client)
                    
                    if not await client.is_user_authorized():
                        logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
                        await client.disconnect()
                        continue
                    
                    logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_phone} —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
                    
                    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å running –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                    try:
                        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä—É–ø –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                        total_groups = len(groups)
                        message_preview = "–¶–∏–∫–ª—ñ—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞"
                        if account_messages and account_phone in account_messages:
                            msg_data = account_messages[account_phone]
                            if isinstance(msg_data, dict):
                                msg_type = msg_data.get('type', 'text')
                                message_preview = f"–¶–∏–∫–ª—ñ—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ ({msg_type})"
                        
                        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å running
                        db.set_broadcast_status(account_phone, message_preview, total_groups, 0, 0, 'running')
                        logger.info(f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å running –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                    except Exception as e:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É running –¥–ª—è {account_phone}: {e}")
                    
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    if account_messages and account_phone in account_messages:
                        logger.info(f"üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                        current_message = account_messages[account_phone]
                        logger.info(f"DEBUG: current_message –¥–ª—è {account_phone}: {current_message}")
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î file_path –¥–ª—è –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                        if isinstance(current_message, dict) and current_message.get('type') in ['photo', 'video', 'audio', 'document', 'sticker', 'voice', 'animation']:
                            file_path = current_message.get('file_path')
                            file_id = current_message.get('file_id')
                            logger.info(f"DEBUG: –ú–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {account_phone}: file_path={file_path}, file_id={file_id}")
                            
                            if not file_path and not file_id:
                                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                                await message_obj.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                                await client.disconnect()
                                continue
                            elif file_path and not os.path.exists(file_path):
                                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª {file_path} –Ω–µ —ñ—Å–Ω—É—î –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                                await message_obj.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª {file_path} –Ω–µ —ñ—Å–Ω—É—î –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                                await client.disconnect()
                                continue
                    else:
                        # –î–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –º–µ–¥—ñ–∞
                        if message_type and media_file_path:
                            # –¶–µ –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                            logger.info(f"üìé –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_type}, —Ñ–∞–π–ª: {media_file_path}")
                            current_message = {
                                'type': message_type,
                                'text': media_caption or '',  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—ñ–¥–ø–∏—Å –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                                'file_path': media_file_path,
                                'file_id': media_file_id  # file_id –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ—ó
                            }
                        else:
                            # –¶–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                            logger.info(f"üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                            current_message = message_text
                        
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø–∏ —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    logger.info(f"üì§ –ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}: {len(groups)} –≥—Ä—É–ø")
                    for j, group in enumerate(groups):
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–æ—é –≥—Ä—É–ø–æ—é
                        if state:
                            data = await state.get_data()
                            if data.get('stop_broadcast', False):
                                logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏")
                                await message_obj.answer("üõë –¶–∏–∫–ª—ñ—á–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                                await client.disconnect()
                                return
                        
                        max_retries = 3
                        logger.info(f"üìã –û–±—Ä–æ–±–ª—è—î–º–æ –≥—Ä—É–ø—É {j+1}/{len(groups)}: {group['name']} (ID: {group['group_id']})")
                        for attempt in range(max_retries):
                            try:
                                group_id = int(group['group_id'])
                                
                                logger.info(f"üîç –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π ID –∑ –±–∞–∑–∏: {group['group_id']}, –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–π: {group_id}")
                                
                                # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                                await message_obj.answer(f"üì§ <b>–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n\n"
                                                       f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {account_phone}\n"
                                                       f"üìù <b>–ì—Ä—É–ø–∞:</b> {group['name']}\n"
                                                       f"üÜî <b>ID –±–∞—Å–µ–π–Ω–∏:</b> {group_id}\n"
                                                       f"üìà <b>–ü—Ä–æ–≥—Ä–µ—Å:</b> {j+1}/{len(groups)}",
                                                       parse_mode='HTML')
                                
                                logger.info(f"üì§ –°–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries} –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø—É {group['name']} (ID: {group_id})")
                                success = await db.send_message_with_retry(
                                    client, 
                                    str(group_id), 
                                    group['name'], 
                                    current_message,
                                    message_obj
                                )
                                
                                if success:
                                    total_sent += 1
                                    logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø—É {group['name']} ({group_id})")
                                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")

                                else:
                                    total_failed += 1
                                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É {group['name']} ({group_id})")
                                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                                    
                                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                                if j < len(groups) - 1:  # –ù–µ —á–µ–∫–∞—î–º–æ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞—Ç—Ä–∏–º–∫–æ—é
                                    if state:
                                        data = await state.get_data()
                                        if data.get('stop_broadcast', False):
                                            logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏")
                                            await message_obj.answer("üõë –¶–∏–∫–ª—ñ—á–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                                            await client.disconnect()
                                            return
                                    
                                    if use_random_message_interval:
                                        delay = random.randint(min_message_interval, max_message_interval)
                                        await message_obj.answer(f"‚è≥ <b>–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏:</b>\n\n"
                                                               f"üïê <b>–ß–µ–∫–∞—î–º–æ:</b> {delay} —Å–µ–∫—É–Ω–¥\n"
                                                               f"üìä <b>–î—ñ–∞–ø–∞–∑–æ–Ω:</b> {min_message_interval}-{max_message_interval} —Å–µ–∫\n"
                                                               f"üìù <b>–ì—Ä—É–ø–∞:</b> {group['name']}\n"
                                                               f"üìà <b>–ü—Ä–æ–≥—Ä–µ—Å:</b> {j+1}/{len(groups)}",
                                                               parse_mode='HTML')
                                    else:
                                        delay = message_interval
                                        await message_obj.answer(f"‚è≥ <b>–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏:</b>\n\n"
                                                               f"üïê <b>–ß–µ–∫–∞—î–º–æ:</b> {delay} —Å–µ–∫—É–Ω–¥\n"
                                                               f"üìù <b>–ì—Ä—É–ø–∞:</b> {group['name']}\n"
                                                               f"üìà <b>–ü—Ä–æ–≥—Ä–µ—Å:</b> {j+1}/{len(groups)}",
                                                               parse_mode='HTML')
                                    
                                    await asyncio.sleep(delay)
                                
                                break  # –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É retry
                                    
                                    
                            except FloodWaitError as flood_error:
                                # FloodWait –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ database.py
                                total_failed += 1
                                logger.error(f"‚ùå FloodWait Error –≤ —Ü–∏–∫–ª—ñ—á–Ω—ñ–π —Ä–æ–∑—Å–∏–ª—Ü—ñ: {flood_error}")
                                logger.error(f"‚è≥ FloodWait: {flood_error.seconds} —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥—Ä—É–ø–∏ {group['name']}")
                                logger.info(f"–ß–µ–∫–∞—î–º–æ {flood_error.seconds} —Å–µ–∫—É–Ω–¥")
                                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è FloodWait: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                                logger.info(f"üß™ FloodWaitError –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤ —Ü–∏–∫–ª—ñ—á–Ω—ñ–π —Ä–æ–∑—Å–∏–ª—Ü—ñ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥—Ä—É–ø–∏")
                                break
                                    
                            except Exception as e:
                                error_msg = str(e)
                                logger.warning(f"‚ö†Ô∏è –°–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries} –Ω–µ–≤–¥–∞–ª–∞ –¥–ª—è –≥—Ä—É–ø–∏ {group['name']}: {error_msg}")
                                
                                if "Could not find the input entity" in error_msg:
                                    logger.error(f"‚ùå –ì—Ä—É–ø–∞ {group['name']} (ID: {group_id}) –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                                    logger.error(f"üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏: –≥—Ä—É–ø–∞ –≤–∏–¥–∞–ª–µ–Ω–∞, –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π, –≥—Ä—É–ø–∞ —Å—Ç–∞–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—é")
                                    await message_obj.answer(f"‚ùå <b>–ì—Ä—É–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:</b>\n\n"
                                                           f"üìù <b>–ì—Ä—É–ø–∞:</b> {group['name']}\n"
                                                           f"üÜî <b>ID:</b> {group_id}\n"
                                                           f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {account_phone}\n\n"
                                                           f"üí° <b>–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:</b>\n"
                                                           f"‚Ä¢ –ì—Ä—É–ø–∞ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞\n"
                                                           f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –≤ –≥—Ä—É–ø—ñ\n"
                                                           f"‚Ä¢ –ì—Ä—É–ø–∞ —Å—Ç–∞–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—é",
                                                           parse_mode='HTML')
                                    total_failed += 1
                                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                                    break
                                elif attempt < max_retries - 1:
                                    retry_delay = random.randint(5, 15)
                                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥")
                                    await asyncio.sleep(retry_delay)
                                    continue
                                else:
                                    total_failed += 1
                                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ –≥—Ä—É–ø—É {group['name']} –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±: {e}")
                                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                                    break
                        
                    logger.info(f"üîå –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                    await client.disconnect()
                    unregister_active_client(account_phone)
                    
                    # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞–∫–∫–∞—É–Ω—Ç)
                    if account_phone != list(groups_by_account.keys())[-1]:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞—Ç—Ä–∏–º–∫–æ—é –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                        if state:
                            data = await state.get_data()
                            if data.get('stop_broadcast', False):
                                logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏")
                                await message_obj.answer("üõë –¶–∏–∫–ª—ñ—á–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                                return
                        
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                        if account_interval_data:
                            if account_interval_data.get('use_random'):
                                delay = random.randint(account_interval_data.get('min_random', 30), account_interval_data.get('max_random', 120))
                                logger.info(f"üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {delay} —Å–µ–∫ (–¥—ñ–∞–ø–∞–∑–æ–Ω: {account_interval_data.get('min_random')}-{account_interval_data.get('max_random')})")
                            else:
                                delay = account_interval_data.get('interval', interval)
                                logger.info(f"‚è≥ –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {delay} —Å–µ–∫")
                        else:
                            # Fallback –¥–æ FSM –¥–∞–Ω–∏—Ö
                            data = await state.get_data()
                            delay = data.get('interval') or interval or 60
                            logger.info(f"‚è≥ Fallback —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {delay} —Å–µ–∫ (data.interval={data.get('interval')}, param.interval={interval})")
                        await message_obj.answer(f"‚è≥ <b>–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:</b>\n\n"
                                               f"üïê <b>–ß–µ–∫–∞—î–º–æ:</b> {delay} —Å–µ–∫—É–Ω–¥\n"
                                               f"üì± <b>–ù–∞—Å—Ç—É–ø–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b> {list(groups_by_account.keys())[list(groups_by_account.keys()).index(account_phone) + 1]}",
                                               parse_mode='HTML')
                        await asyncio.sleep(delay)
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
                    try:
                        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                        account_sent = 0
                        account_failed = 0
                        for group in groups:
                            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                            # –ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            pass
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ completed
                        db.update_broadcast_status_by_phone(account_phone, total_sent, total_failed, 'completed')
                        logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å completed –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                    except Exception as e:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è {account_phone}: {e}")
                    
                    logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±—Ä–æ–±–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}: {e}")
                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ failed –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                    try:
                        db.update_broadcast_status_by_phone(account_phone, 0, len(groups), 'failed')
                        logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å failed –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}")
                    except Exception as status_error:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É failed –¥–ª—è {account_phone}: {status_error}")
                    
                    continue
            
            # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏ (—Ä–∞–Ω–¥–æ–º–Ω–∞ –≤—ñ–¥ 10 –¥–æ 120 —Å–µ–∫—É–Ω–¥)
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞—Ç—Ä–∏–º–∫–æ—é –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏
            if state:
                data = await state.get_data()
                if data.get('stop_broadcast', False):
                    logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏")
                    await message_obj.answer("üõë –¶–∏–∫–ª—ñ—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                    break
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É —Ü–∏–∫–ª—É
            if cycle_interval_data:
                logger.info(f"üîç –î–∞–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É —Ü–∏–∫–ª—É: use_random_cycle_interval={cycle_interval_data.get('use_random_cycle_interval')}, cycle_interval={cycle_interval_data.get('cycle_interval')}, cycle_interval_min={cycle_interval_data.get('cycle_interval_min')}, cycle_interval_max={cycle_interval_data.get('cycle_interval_max')}")
                
                # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ü–∏–∫–ª—É
                if cycle_interval_data.get('use_random_cycle_interval'):
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª—É
                    cycle_min = cycle_interval_data.get('cycle_interval_min', 30)
                    cycle_max = cycle_interval_data.get('cycle_interval_max', 60)
                    delay = random.randint(cycle_min, cycle_max)
                    logger.info(f"üé≤ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏: {delay} —Å–µ–∫—É–Ω–¥ (–¥—ñ–∞–ø–∞–∑–æ–Ω: {cycle_min}-{cycle_max})")
                else:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
                    delay = cycle_interval_data.get('cycle_interval') or 60
                    logger.info(f"‚è≥ –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏: {delay} —Å–µ–∫—É–Ω–¥")
            else:
                # Fallback –¥–æ FSM –¥–∞–Ω–∏—Ö (—è–∫—â–æ cycle_interval_data –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ)
                data = await state.get_data()
                logger.info(f"üîç Fallback –¥–æ FSM –¥–∞–Ω–∏—Ö: use_random_cycle_interval={data.get('use_random_cycle_interval')}, cycle_interval={data.get('cycle_interval')}")
                delay = data.get('cycle_interval') or data.get('interval') or 60
                logger.info(f"‚è≥ Fallback —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏: {delay} —Å–µ–∫—É–Ω–¥")
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª—É #{cycle_count}: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ä–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            use_random_for_message = False
            if cycle_interval_data:
                use_random_for_message = cycle_interval_data.get('use_random_cycle_interval', False)
            else:
                data = await state.get_data()
                use_random_for_message = data.get('use_random_cycle_interval', False)
            
            if use_random_for_message:
                cycle_min = cycle_interval_data.get('cycle_interval_min', 30) if cycle_interval_data else 30
                cycle_max = cycle_interval_data.get('cycle_interval_max', 120) if cycle_interval_data else 120
                await message_obj.answer(f"‚è≥ <b>–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏:</b>\n\n"
                                       f"üïê <b>–ß–µ–∫–∞—î–º–æ:</b> {delay} —Å–µ–∫—É–Ω–¥\n"
                                       f"üé≤ <b>–†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª:</b> {cycle_min}-{cycle_max} —Å–µ–∫\n"
                                       f"üîÑ <b>–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ü–∏–∫–ª:</b> #{cycle_count + 1}",
                                       parse_mode='HTML')
            else:
                await message_obj.answer(f"‚è≥ <b>–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏:</b>\n\n"
                                       f"üïê <b>–ß–µ–∫–∞—î–º–æ:</b> {delay} —Å–µ–∫—É–Ω–¥\n"
                                       f"üîÑ <b>–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ü–∏–∫–ª:</b> #{cycle_count + 1}",
                                       parse_mode='HTML')
            
            await asyncio.sleep(delay)

    except Exception as e:  # except –¥–ª—è try –±–ª–æ–∫—É –Ω–∞ –ª—ñ–Ω—ñ—ó 1586
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ—á–Ω—ñ–π —Ä–æ–∑—Å–∏–ª—Ü—ñ: {e}")
        logger.error(f"üìä –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent if 'total_sent' in locals() else 0}, –Ω–µ–≤–¥–∞–ª–æ={total_failed if 'total_failed' in locals() else 0}")
        await message_obj.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ—á–Ω—ñ–π —Ä–æ–∑—Å–∏–ª—Ü—ñ: {e}")
        return
    
    logger.info("üèÅ –¶–∏–∫–ª—ñ—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    logger.info(f"üìä –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ={total_sent}, –Ω–µ–≤–¥–∞–ª–æ={total_failed}")

@router.message(Command("stop_message"))
async def stop_message_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –∑—É–ø–∏–Ω–∫–∏ –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    await handle_stop_message_command(message, state)

#====================== –û–ë–†–û–ë–ö–ê –®–ê–ë–õ–û–ù–Ü–í ======================

@router.callback_query(lambda c: c.data.startswith("select_template_"))
async def select_template_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —à–∞–±–ª–æ–Ω—É"""
    print(f"DEBUG: select_template_callback called with data: {callback.data}")
    template_id = int(callback.data.replace("select_template_", ""))
    print(f"DEBUG: Extracted template_id: {template_id}")
    template = template_manager.get_template_for_broadcast(template_id)
    print(f"DEBUG: Retrieved template: {template}")
    
    if not template:
        await callback.message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await callback.answer()
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ä—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    data = await state.get_data()
    selected_account = data.get('selected_account_for_message')
    
    print(f"DEBUG: select_template_callback - selected_account: {selected_account}")
    print(f"DEBUG: select_template_callback - template_id: {template_id}")
    
    if selected_account:
        # –¶–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        print(f"DEBUG: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–∞–±–ª–æ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account}")
        print(f"DEBUG: template data: {template}")
        print(f"DEBUG: file_path: {template.get('file_path')}")
        print(f"DEBUG: file_id: {template.get('file_id')}")
        await save_account_message(state, selected_account, template['type'], template.get('file_path'), template.get('text', ''), template.get('file_id'))
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É
        accounts_to_configure = data.get('accounts_to_configure', [])
        accounts_to_configure = [acc for acc in accounts_to_configure if acc['phone_number'] != selected_account]
        await state.update_data(accounts_to_configure=accounts_to_configure)
        
        await callback.message.answer(f"‚úÖ –®–∞–±–ª–æ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account} –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç –∞–±–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
        await show_remaining_accounts(callback.message, state)
    else:
        # –¶–µ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —à–∞–±–ª–æ–Ω—É
        await state.update_data(
            message_type=template['type'],
            message_text=template.get('text', ''),
            template_file_path=template.get('file_path'),
            template_file_id=template.get('file_id'),
            template_id=template_id
        )
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        template_info = template_manager.db.get_template(template_id)
        icon = template_manager._get_template_icon(template['type'])
        
        confirmation_text = f"‚úÖ <b>–®–∞–±–ª–æ–Ω –æ–±—Ä–∞–Ω–æ:</b>\n\n"
        confirmation_text += f"{icon} <b>–ù–∞–∑–≤–∞:</b> {template_info['name']}\n"
        confirmation_text += f"üìù <b>–¢–∏–ø:</b> {template['type']}\n"
        
        if template.get('text'):
            text_preview = template['text'][:100] + "..." if len(template['text']) > 100 else template['text']
            confirmation_text += f"üí¨ <b>–¢–µ–∫—Å—Ç:</b> {text_preview}\n"
        
        if template.get('file_path'):
            confirmation_text += f"üìé <b>–§–∞–π–ª:</b> {template_info['file_name']}\n"
        
        confirmation_text += "\nüöÄ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —Ü–∏–º —à–∞–±–ª–æ–Ω–æ–º?"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="confirm_template_selection")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="Mass_broadcast")]
        ])
        
        await callback.message.answer(confirmation_text, parse_mode='HTML', reply_markup=keyboard)
    
    await callback.answer()

@router.callback_query(lambda c: c.data == "confirm_template_selection")
async def confirm_template_selection_callback(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É —à–∞–±–ª–æ–Ω—É"""
    data = await state.get_data()
    message_type = data.get('message_type')
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —à–∞–±–ª–æ–Ω
    if data.get('template_file_path') or data.get('template_file_id'):
        # –¶–µ —à–∞–±–ª–æ–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
        await show_message_interval_settings(callback, state)
    elif message_type == 'text':
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
        await show_message_interval_settings(callback, state)
    else:
        # –î–ª—è –º–µ–¥—ñ–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
        await show_message_interval_settings(callback, state)
    
    await callback.answer()

@router.callback_query(lambda c: c.data == "add_template")
async def add_template_callback(callback: CallbackQuery, state: FSMContext):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω—É"""
    await callback.message.answer(
        "üìã <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω—É</b>\n\n"
        "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ —Ç–æ—â–æ), —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏ —è–∫ —à–∞–±–ª–æ–Ω.\n\n"
        "–ü—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —à–∞–±–ª–æ–Ω—É.",
        parse_mode='HTML'
    )
    await state.set_state(MassBroadcastStates.waiting_for_template_message)
    await callback.answer()

@router.callback_query(lambda c: c.data == "edit_templates")
async def edit_templates_callback(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤"""
    templates = template_manager.db.get_templates()
    if templates:
        keyboard = template_manager.get_templates_list_keyboard()
        await callback.message.answer(
            "‚úèÔ∏è <b>–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:</b>",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    else:
        await callback.message.answer(
            "‚ùå <b>–®–∞–±–ª–æ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ</b>\n\n"
            "–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω, –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É –∑ –∫–æ–º–∞–Ω–¥–æ—é /add_template",
            parse_mode='HTML'
        )
    await callback.answer()

@router.callback_query(lambda c: c.data == "close_templates")
async def close_templates_callback(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é —à–∞–±–ª–æ–Ω—ñ–≤"""
    await callback.message.answer("‚ùå –ú–µ–Ω—é —à–∞–±–ª–æ–Ω—ñ–≤ –∑–∞–∫—Ä–∏—Ç–æ")
    await callback.answer()

@router.callback_query(lambda c: c.data == "back_to_templates")
async def back_to_templates_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω—ñ–≤"""
    templates = template_manager.db.get_templates()
    if templates:
        keyboard = template_manager.get_template_keyboard(templates)
        await callback.message.answer(
            "üìã <b>–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω:</b>",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    await callback.answer()

