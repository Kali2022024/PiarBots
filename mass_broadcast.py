import asyncio
import logging
import os
import random
from aiogram import Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from telethon import TelegramClient
from states import MassBroadcastStates
from utils import download_media_file, get_media_type_from_file

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ (–±—É–¥—É—Ç—å —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É)
db = None
bot = None

def init_mass_broadcast_module(database, telegram_bot):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    global db, bot
    db = database
    bot = telegram_bot

@router.callback_query(lambda c: c.data == "Mass_broadcast")
async def mass_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    accounts = db.get_accounts()
    
    if not accounts:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤. –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.")
        await callback.answer()
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    settings = db.get_mass_broadcast_settings()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    settings_text = f"‚öôÔ∏è <b>–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏:</b>\n\n"
    settings_text += f"‚è±Ô∏è <b>–Ü–Ω—Ç–µ—Ä–≤–∞–ª:</b> {settings['interval_seconds']} —Å–µ–∫—É–Ω–¥\n"
    if settings['use_random_interval']:
        settings_text += f"üé≤ <b>–†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª:</b> {settings['min_random_seconds']}-{settings['max_random_seconds']} —Å–µ–∫—É–Ω–¥\n"
    else:
        settings_text += f"üé≤ <b>–†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª:</b> –í–∏–º–∫–Ω–µ–Ω–æ\n"
    settings_text += f"üë• <b>–ê–∫–∫–∞—É–Ω—Ç—ñ–≤:</b> {len(accounts)}\n\n"
    settings_text += "üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–¥—ñ–∞-—Ñ–∞–π–ª –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏:\n"
    settings_text += "–î–ª—è —Ç–æ–≥–æ —â–æ–± –æ–±—Ä–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É üìù –†—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –†—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤", callback_data="mass_different_messages")]
    ])

    await callback.message.answer(settings_text, parse_mode='HTML', reply_markup=keyboard)
    await state.set_state(MassBroadcastStates.waiting_for_message)
    await callback.answer()

@router.message(MassBroadcastStates.waiting_for_message)
async def process_mass_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ (—Ç–µ–∫—Å—Ç –∞–±–æ –º–µ–¥—ñ–∞)"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª
    if message.photo or message.video or message.audio or message.document:
        # –¶–µ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª
        await process_mass_media_file(message, state)
    else:
        # –¶–µ —Ç–µ–∫—Å—Ç
        message_text = message.text.strip()
        
        if not message_text:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await state.update_data(message_text=message_text)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Ä–æ–∑—Å–∏–ª–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –†—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤", callback_data="mass_different_messages")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Mass_broadcast")]
        ])
        
        await message.answer(
            f"üìù <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b> {message_text[:100]}{'...' if len(message_text) > 100 else ''}\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

async def process_mass_media_file(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤
    media_dir = "media_files"
    if not os.path.exists(media_dir):
        os.makedirs(media_dir)
    
    file_id = None
    file_path = None
    message_type = None
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –º–µ–¥—ñ–∞ —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ file_id
    if message.photo:
        file_id = message.photo[-1].file_id
        message_type = "photo"
        file_path = f"{media_dir}/mass_photo_{file_id}.jpg"
    elif message.video:
        file_id = message.video.file_id
        message_type = "video"
        file_path = f"{media_dir}/mass_video_{file_id}.mp4"
    elif message.audio:
        file_id = message.audio.file_id
        message_type = "audio"
        file_path = f"{media_dir}/mass_audio_{file_id}.mp3"
    elif message.document:
        file_id = message.document.file_id
        message_type = "document"
        file_path = f"{media_dir}/mass_document_{file_id}"
    
    if not file_id:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
    success = await download_media_file(bot, file_id, file_path)
    
    if not success:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–µ–¥—ñ–∞
    await state.update_data(
        message_type=message_type,
        file_path=file_path,
        file_id=file_id
    )
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –ø—ñ–¥–ø–∏—Å—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ë–µ–∑ –ø—ñ–¥–ø–∏—Å—É", callback_data="mass_media_no_caption")],
        [InlineKeyboardButton(text="üìù –ó –ø—ñ–¥–ø–∏—Å–æ–º", callback_data="mass_media_with_caption")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Mass_broadcast")]
    ])
    
    await message.answer(
        f"üìé <b>–ú–µ–¥—ñ–∞-—Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:</b>\n"
        f"üìÅ <b>–¢–∏–ø:</b> {message_type}\n"
        f"üìÇ <b>–§–∞–π–ª:</b> {os.path.basename(file_path)}\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –ø—ñ–¥–ø–∏—Å—É:",
        parse_mode='HTML',
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data in ["mass_media_no_caption", "mass_media_with_caption"])
async def process_mass_media_caption_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—ñ–¥–ø–∏—Å—É –¥–ª—è –º–µ–¥—ñ–∞"""
    data = await state.get_data()
    message_type = data.get('message_type')
    file_path = data.get('file_path')
    
    if callback.data == "mass_media_no_caption":
        # –ë–µ–∑ –ø—ñ–¥–ø–∏—Å—É
        await state.update_data(text="")
        await show_interval_settings(callback, state)
    else:
        # –ó –ø—ñ–¥–ø–∏—Å–æ–º
        await callback.message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –ø—ñ–¥–ø–∏—Å –¥–ª—è –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É:")
        await state.set_state(MassBroadcastStates.waiting_for_media_caption)
    
    await callback.answer()

@router.message(MassBroadcastStates.waiting_for_media_caption)
async def process_mass_media_caption(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–ø–∏—Å—É –¥–ª—è –º–µ–¥—ñ–∞"""
    caption = message.text.strip()
    await state.update_data(text=caption)
    await show_interval_settings(message, state)

@router.callback_query(lambda c: c.data == "mass_same_message")
async def process_mass_same_message_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –æ–¥–Ω–∞–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    await show_interval_settings(callback, state)
    await callback.answer()

@router.callback_query(lambda c: c.data == "mass_different_messages")
async def process_mass_different_messages_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    accounts = db.get_accounts()
    
    if not accounts:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
        await callback.answer()
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await state.update_data(accounts_to_configure=accounts.copy())
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    await show_remaining_accounts(callback.message, state)
    await callback.answer()

async def show_remaining_accounts(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∏, —è–∫—ñ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    data = await state.get_data()
    accounts_to_configure = data.get('accounts_to_configure', [])
    
    if not accounts_to_configure:
        # –í—Å—ñ –∞–∫–∫–∞—É–Ω—Ç–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
        await show_interval_settings(message, state)
        return
    
    # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –∞–∫–∫–∞—É–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É
    current_account = accounts_to_configure[0]
    account_phone = current_account['phone_number']
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data=f"message_type_text_{account_phone}")],
        [InlineKeyboardButton(text="üìé –ú–µ–¥—ñ–∞-—Ñ–∞–π–ª", callback_data=f"message_type_media_{account_phone}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Mass_broadcast")]
    ])
    
    await message.answer(
        f"üì± <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:</b>\n"
        f"üìû <b>–ù–æ–º–µ—Ä:</b> {account_phone}\n"
        f"üë§ <b>–Ü–º'—è:</b> {current_account.get('first_name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
        parse_mode='HTML',
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith("message_type_"))
async def process_message_type_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    data = callback.data.replace("message_type_", "")
    message_type, account_phone = data.split("_", 1)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    account_messages = state.get_data().get('account_messages', {})
    account_messages[account_phone] = {'type': message_type}
    await state.update_data(account_messages=account_messages)
    
    if message_type == "text":
        # –ó–∞–ø–∏—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await callback.message.answer(f"üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}:")
        await state.set_state(MassBroadcastStates.waiting_for_account_message)
    else:
        # –ó–∞–ø–∏—Ç—É—î–º–æ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª
        await callback.message.answer(f"üìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–¥—ñ–∞-—Ñ–∞–π–ª –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}:")
        await state.set_state(MassBroadcastStates.waiting_for_media_file)
    
    await callback.answer()

@router.message(MassBroadcastStates.waiting_for_account_message)
async def process_account_message(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    text = message.text.strip()
    
    if not text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç
    data = await state.get_data()
    accounts_to_configure = data.get('accounts_to_configure', [])
    
    if not accounts_to_configure:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        return
    
    current_account = accounts_to_configure[0]
    account_phone = current_account['phone_number']
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    account_messages = data.get('account_messages', {})
    account_messages[account_phone]['text'] = text
    await state.update_data(account_messages=account_messages)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É
    accounts_to_configure.pop(0)
    await state.update_data(accounts_to_configure=accounts_to_configure)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç –∞–±–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
    await show_remaining_accounts(message, state)

@router.message(MassBroadcastStates.waiting_for_media_file)
async def process_media_file(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ process_mass_media_file, –∞–ª–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    # –¶–µ —Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–¥—ñ —Ç—É—Ç –±—É–¥–µ –ø–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
    await message.answer("üìé –ú–µ–¥—ñ–∞-—Ñ–∞–π–ª –æ–±—Ä–æ–±–ª–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤.")
    await show_interval_settings(message, state)

async def show_interval_settings(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    settings = db.get_mass_broadcast_settings()
    
    settings_text = f"‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤:</b>\n\n"
    settings_text += f"‚è±Ô∏è <b>–ü–æ—Ç–æ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª:</b> {settings['interval_seconds']} —Å–µ–∫—É–Ω–¥\n"
    settings_text += f"üé≤ <b>–†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª:</b> {'–£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['use_random_interval'] else '–í–∏–º–∫–Ω–µ–Ω–æ'}\n"
    if settings['use_random_interval']:
        settings_text += f"üìä <b>–î—ñ–∞–ø–∞–∑–æ–Ω:</b> {settings['min_random_seconds']}-{settings['max_random_seconds']} —Å–µ–∫—É–Ω–¥\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è±Ô∏è 30 —Å–µ–∫—É–Ω–¥", callback_data="mass_interval_30")],
        [InlineKeyboardButton(text="‚è±Ô∏è 60 —Å–µ–∫—É–Ω–¥", callback_data="mass_interval_60")],
        [InlineKeyboardButton(text="‚è±Ô∏è 120 —Å–µ–∫—É–Ω–¥", callback_data="mass_interval_120")],
        [InlineKeyboardButton(text="‚è±Ô∏è 300 —Å–µ–∫—É–Ω–¥", callback_data="mass_interval_300")],
        [InlineKeyboardButton(text="üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="mass_random_interval")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–ª–∞—Å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="mass_custom_interval")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Mass_broadcast")]
    ])
    
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.answer(settings_text, parse_mode='HTML', reply_markup=keyboard)
    else:
        await message_or_callback.answer(settings_text, parse_mode='HTML', reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("mass_interval_"))
async def process_mass_interval_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    interval_text = callback.data.replace("mass_interval_", "")
    
    if interval_text == "custom":
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
        await state.set_state(MassBroadcastStates.waiting_for_interval)
    else:
        try:
            interval = int(interval_text)
            await state.update_data(interval=interval, use_random=False)
            await show_package_selection(callback, state)
        except ValueError:
            await callback.message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    
    await callback.answer()

@router.callback_query(lambda c: c.data == "mass_random_interval")
async def process_mass_random_interval_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    await callback.message.answer("üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –ø–∞–∫–µ—Ç—ñ–≤.")
    await state.update_data(use_random=True)
    await show_package_selection(callback, state)
    await callback.answer()

async def show_package_selection(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –ø–∞–∫–µ—Ç—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    accounts = db.get_accounts()
    
    if not accounts:
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
        else:
            await message_or_callback.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–∞–∫–µ—Ç–∏ –≥—Ä—É–ø
    all_packages = []
    for account in accounts:
        packages = db.get_group_packages(account['phone_number'])
        for package in packages:
            package['account_phone'] = account['phone_number']
            all_packages.append(package)
    
    if not all_packages:
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer("‚ùå –ù–µ–º–∞—î –ø–∞–∫–µ—Ç—ñ–≤ –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        else:
            await message_or_callback.answer("‚ùå –ù–µ–º–∞—î –ø–∞–∫–µ—Ç—ñ–≤ –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç—ñ–≤
    packages_text = "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø–∞–∫–µ—Ç–∏ –≥—Ä—É–ø:</b>\n\n"
    
    keyboard_buttons = []
    for i, package in enumerate(all_packages[:10]):  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 10
        button_text = f"üì¶ {package['name']} ({package['groups_count']} –≥—Ä—É–ø)"
        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"mass_select_package_{package['id']}"
        )])
        packages_text += f"{i+1}. üì¶ <b>{package['name']}</b> ({package['groups_count']} –≥—Ä—É–ø)\n"
        packages_text += f"   üì± –ê–∫–∫–∞—É–Ω—Ç: {package['account_phone']}\n\n"
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –≤—Å—ñ—Ö –ø–∞–∫–µ—Ç—ñ–≤
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚úÖ –í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –ø–∞–∫–µ—Ç–∏",
        callback_data="mass_select_all_packages"
    )])
    
    keyboard_buttons.append([InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="Mass_broadcast"
    )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.answer(packages_text, parse_mode='HTML', reply_markup=keyboard)
    else:
        await message_or_callback.answer(packages_text, parse_mode='HTML', reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("mass_select_package_"))
async def mass_select_package_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–∫–µ—Ç—É –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    package_id = int(callback.data.replace("mass_select_package_", ""))
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø–∏ –∑ –ø–∞–∫–µ—Ç—É
    groups = db.get_groups_by_package(package_id)
    
    if not groups:
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ø–∞–∫–µ—Ç—É –≥—Ä—É–ø.")
        await callback.answer()
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –≥—Ä—É–ø–∏
    await state.update_data(selected_package_id=package_id, selected_groups=groups)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await show_mass_broadcast_confirmation(callback, state)
    await callback.answer()

@router.callback_query(lambda c: c.data == "mass_select_all_packages")
async def mass_select_all_packages_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤—Å—ñ—Ö –ø–∞–∫–µ—Ç—ñ–≤"""
    accounts = db.get_accounts()
    all_groups = []
    
    for account in accounts:
        packages = db.get_group_packages(account['phone_number'])
        for package in packages:
            groups = db.get_groups_by_package(package['id'])
            all_groups.extend(groups)
    
    if not all_groups:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        await callback.answer()
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ –≥—Ä—É–ø–∏
    await state.update_data(selected_package_id=0, selected_groups=all_groups)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await show_mass_broadcast_confirmation(callback, state)
    await callback.answer()

async def show_mass_broadcast_confirmation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    data = await state.get_data()
    selected_groups = data.get('selected_groups', [])
    message_text = data.get('message_text', '')
    message_type = data.get('message_type', 'text')
    file_path = data.get('file_path', '')
    
    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_groups = len(selected_groups)
    accounts_count = len(set(group['account_phone'] for group in selected_groups))
    
    confirmation_text = f"üì§ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏:</b>\n\n"
    confirmation_text += f"üë• <b>–ê–∫–∫–∞—É–Ω—Ç—ñ–≤:</b> {accounts_count}\n"
    confirmation_text += f"üì¶ <b>–ì—Ä—É–ø:</b> {total_groups}\n"
    confirmation_text += f"üìù <b>–¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b> {message_type}\n"
    
    if message_type == 'text':
        confirmation_text += f"üìÑ <b>–¢–µ–∫—Å—Ç:</b> {message_text[:100]}{'...' if len(message_text) > 100 else ''}\n"
    else:
        confirmation_text += f"üìé <b>–§–∞–π–ª:</b> {os.path.basename(file_path) if file_path else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
    
    confirmation_text += "\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É?"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É", callback_data="confirm_mass_broadcast")],
        [InlineKeyboardButton(text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤ —Ü–∏–∫–ª—ñ", callback_data="confirm_loop_broadcast")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="Mass_broadcast")]
    ])
    
    await callback.message.answer(confirmation_text, parse_mode='HTML', reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "confirm_mass_broadcast")
async def confirm_mass_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    data = await state.get_data()
    selected_groups = data.get('selected_groups', [])
    message_text = data.get('message_text', '')
    message_type = data.get('message_type', 'text')
    file_path = data.get('file_path', '')
    interval = data.get('interval', 60)
    use_random = data.get('use_random', False)
    
    if not selected_groups:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        await state.clear()
        await callback.answer()
        return
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if message_type == 'text':
        message_data = message_text
    else:
        message_data = {
            'type': message_type,
            'text': data.get('text', ''),
            'file_path': file_path
        }
    
    await callback.message.answer("üöÄ –ú–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É –∑–∞–ø—É—â–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å —á–µ—Ä–µ–∑ '–°—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è'.")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    asyncio.create_task(mass_broadcast_process(
        message_data, interval, use_random, 30, 120, 0, callback.message,
        account_messages=data.get('account_messages', {}),
        message_type=message_type,
        media_file_path=file_path
    ))
    
    await state.clear()
    await callback.answer()

@router.callback_query(lambda c: c.data == "confirm_loop_broadcast")
async def confirm_loop_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    data = await state.get_data()
    selected_groups = data.get('selected_groups', [])
    message_text = data.get('message_text', '')
    message_type = data.get('message_type', 'text')
    file_path = data.get('file_path', '')
    interval = data.get('interval', 60)
    use_random = data.get('use_random', False)
    
    if not selected_groups:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        await state.clear()
        await callback.answer()
        return
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if message_type == 'text':
        message_data = message_text
    else:
        message_data = {
            'type': message_type,
            'text': data.get('text', ''),
            'file_path': file_path
        }
    
    await callback.message.answer("üîÑ –¶–∏–∫–ª—ñ—á–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –∑–∞–ø—É—â–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å —á–µ—Ä–µ–∑ '–°—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è'.")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª—ñ—á–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    asyncio.create_task(loop_broadcast_process(
        message_data, interval, use_random, 30, 120, 0, callback.message,
        account_messages=data.get('account_messages', {}),
        message_type=message_type,
        media_file_path=file_path
    ))
    
    await state.clear()
    await callback.answer()

async def mass_broadcast_process(message_text, interval: int, use_random: bool, 
                               min_random: int, max_random: int, selected_package_id: int, message_obj,
                               message_interval: int = 10, use_random_message_interval: bool = False,
                               min_message_interval: int = 5, max_message_interval: int = 30,
                               account_messages: dict = None, stop_event: asyncio.Event = None,
                               message_type: str = None, media_file_path: str = None):
    """–ü—Ä–æ—Ü–µ—Å –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    try:
        accounts = db.get_accounts()
        
        if not accounts:
            await message_obj.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤.")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
        if selected_package_id == 0:
            # –í—Å—ñ –≥—Ä—É–ø–∏
            all_groups = []
            for account in accounts:
                packages = db.get_group_packages(account['phone_number'])
                for package in packages:
                    groups = db.get_groups_by_package(package['id'])
                    all_groups.extend(groups)
            groups_to_send = all_groups
        else:
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø–∞–∫–µ—Ç
            groups_to_send = db.get_groups_by_package(selected_package_id)
        
        if not groups_to_send:
            await message_obj.answer("‚ùå –ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
            return
        
        # –ì—Ä—É–ø—É—î–º–æ –≥—Ä—É–ø–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        groups_by_account = {}
        for group in groups_to_send:
            account_phone = group['account_phone']
            if account_phone not in groups_by_account:
                groups_by_account[account_phone] = []
            groups_by_account[account_phone].append(group)
        
        total_sent = 0
        total_failed = 0
        
        for account_phone, groups in groups_by_account.items():
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∞
                account = None
                for acc in accounts:
                    if acc['phone_number'] == account_phone:
                        account = acc
                        break
                
                if not account:
                    logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    continue
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
                session_name = f"sessions/temp_{account_phone.replace('+', '').replace('-', '')}"
                client = TelegramClient(session_name, account['api_id'], account['api_hash'])
                
                await client.connect()
                
                if not await client.is_user_authorized():
                    logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
                    await client.disconnect()
                    continue
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                if account_messages and account_phone in account_messages:
                    account_message = account_messages[account_phone]
                    if account_message['type'] == 'text':
                        current_message = account_message['text']
                    else:
                        current_message = {
                            'type': account_message['type'],
                            'text': account_message.get('text', ''),
                            'file_path': account_message.get('file_path', '')
                        }
                else:
                    current_message = message_text
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø–∏ —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                for group in groups:
                    try:
                        group_id = int(group['group_id'])
                        
                        success = await db.send_message_with_retry(
                            client, 
                            group_id, 
                            group['name'], 
                            current_message,
                            message_obj
                        )
                        
                        if success:
                            total_sent += 1
                        else:
                            total_failed += 1
                        
                        # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                        if use_random_message_interval:
                            delay = random.randint(min_message_interval, max_message_interval)
                        else:
                            delay = message_interval
                        
                        await asyncio.sleep(delay)
                        
                    except Exception as e:
                        total_failed += 1
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ –≥—Ä—É–ø—É {group['name']}: {e}")
                
                await client.disconnect()
                
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                if use_random:
                    delay = random.randint(min_random, max_random)
                else:
                    delay = interval
                
                await asyncio.sleep(delay)
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}: {e}")
                continue
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"""
üìä <b>–ú–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>

‚úÖ <b>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {total_sent}
‚ùå <b>–ü–æ–º–∏–ª–æ–∫:</b> {total_failed}
üë• <b>–ê–∫–∫–∞—É–Ω—Ç—ñ–≤:</b> {len(groups_by_account)}
üì¶ <b>–ì—Ä—É–ø:</b> {len(groups_to_send)}
        """
        
        await message_obj.answer(result_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤—ñ–π —Ä–æ–∑—Å–∏–ª—Ü—ñ: {e}")
        await message_obj.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤—ñ–π —Ä–æ–∑—Å–∏–ª—Ü—ñ: {e}")

async def loop_broadcast_process(message_text, interval: int, use_random: bool, 
                               min_random: int, max_random: int, selected_package_id: int, message_obj,
                               message_interval: int = 10, use_random_message_interval: bool = False,
                               min_message_interval: int = 5, max_message_interval: int = 30,
                               account_messages: dict = None, stop_event: asyncio.Event = None,
                               message_type: str = None, media_file_path: str = None):
    """–ü—Ä–æ—Ü–µ—Å —Ü–∏–∫–ª—ñ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    await message_obj.answer("üîÑ –¶–∏–∫–ª—ñ—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop_broadcast")
    
    cycle_count = 0
    
    while True:
        try:
            cycle_count += 1
            await message_obj.answer(f"üîÑ –ü–æ—á–∞—Ç–æ–∫ —Ü–∏–∫–ª—É #{cycle_count}")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–∞—Å–æ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É
            await mass_broadcast_process(
                message_text, interval, use_random, min_random, max_random, 
                selected_package_id, message_obj, message_interval, 
                use_random_message_interval, min_message_interval, max_message_interval,
                account_messages, stop_event, message_type, media_file_path
            )
            
            # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏
            if use_random:
                delay = random.randint(min_random, max_random)
            else:
                delay = interval
            
            await message_obj.answer(f"‚è≥ –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(delay)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ—á–Ω—ñ–π —Ä–æ–∑—Å–∏–ª—Ü—ñ: {e}")
            await message_obj.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ—á–Ω—ñ–π —Ä–æ–∑—Å–∏–ª—Ü—ñ: {e}")
            break

@router.callback_query(lambda c: c.data == "stop_broadcast")
async def stop_broadcast_callback(callback: CallbackQuery):
    """–ó—É–ø–∏–Ω–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏"""
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑—É–ø–∏–Ω–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫
    await callback.message.answer("üõë –ö–æ–º–∞–Ω–¥–∞ –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –±—É–¥—É—Ç—å –∑—É–ø–∏–Ω–µ–Ω—ñ.")
    await callback.answer()
