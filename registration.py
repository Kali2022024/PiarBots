import logging
import os
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError, PhoneCodeExpiredError, PhoneNumberInvalidError
from states import RegistrationStates
from utils import show_accounts_list, start_registration_process

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ (–±—É–¥—É—Ç—å —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É)
API_ID = 0
API_HASH = ""
db = None

def init_registration_module(api_id, api_hash, database):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"""
    global API_ID, API_HASH, db
    API_ID = api_id
    API_HASH = api_hash
    db = database

@router.message(RegistrationStates.waiting_for_phone)
async def process_phone_number(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    phone_number = message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
    if not phone_number.startswith('+') or len(phone_number) < 10:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (—Ñ–æ—Ä–º–∞—Ç +380XXXXXXXXX):")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–∫–∫–∞—É–Ω—Ç –≤–∂–µ —ñ—Å–Ω—É—î
    accounts = db.get_accounts()
    for account in accounts:
        if account['phone_number'] == phone_number:
            await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!")
            await state.clear()
            return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(phone_number=phone_number)
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
        session_name = f"sessions/temp_{phone_number.replace('+', '').replace('-', '')}"
        client = TelegramClient(session_name, API_ID, API_HASH)
        
        await message.answer("üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram...")
        await client.connect()
        
        if not await client.is_user_authorized():
            await message.answer(f"üì± –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–¥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞ {phone_number}...")
            try:
                await client.send_code_request(phone_number)
                await message.answer("‚úÖ –ö–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:")
                await state.set_state(RegistrationStates.waiting_for_code)
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç –≤ —Å—Ç–∞–Ω—ñ
                await state.update_data(client=client)
            except Exception as e:
                await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ–¥—É: {e}")
                await client.disconnect()
                await state.clear()
                return
        else:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
            await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!")
            await client.disconnect()
            await state.clear()
            
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        await state.clear()

@router.message(RegistrationStates.waiting_for_code)
async def process_verification_code(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–¥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    code = message.text.strip()
    data = await state.get_data()
    phone_number = data['phone_number']
    client = data['client']
    
    try:
        await client.sign_in(phone=phone_number, code=code)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        me = await client.get_me()
        session_string = client.session.save()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        success = db.add_account(
            phone_number=phone_number,
            api_id=API_ID,
            api_hash=API_HASH,
            session_string=session_string,
            first_name=me.first_name,
            last_name=me.last_name,
            username=me.username,
            user_id=me.id
        )
        
        if success:
            success_message = f"""
‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!</b>

üì± <b>–ù–æ–º–µ—Ä:</b> {phone_number}
üë§ <b>–Ü–º'—è:</b> {me.first_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üë§ <b>–ü—Ä—ñ–∑–≤–∏—â–µ:</b> {me.last_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üîó <b>Username:</b> @{me.username or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üÜî <b>ID:</b> {me.id}
            """
            await message.answer(success_message, parse_mode='HTML')
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö!")
            
    except SessionPasswordNeededError:
        await message.answer("üîê –£–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–≤–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é (2FA). –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:")
        await state.set_state(RegistrationStates.waiting_for_password)
        return
    except PhoneCodeInvalidError:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    except PhoneCodeExpiredError:
        await message.answer("‚ùå –ö–æ–¥ –∑–∞—Å—Ç–∞—Ä—ñ–≤! –ü–æ—á–Ω—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /register_number")
        await client.disconnect()
        await state.clear()
        return
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        await client.disconnect()
        await state.clear()
        return
    
    finally:
        if 'client' in data:
            await client.disconnect()
        await state.clear()

@router.message(RegistrationStates.waiting_for_password)
async def process_2fa_password(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–∞—Ä–æ–ª—è 2FA"""
    password = message.text.strip()
    data = await state.get_data()
    phone_number = data['phone_number']
    client = data['client']
    
    try:
        await client.sign_in(password=password)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        me = await client.get_me()
        session_string = client.session.save()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        success = db.add_account(
            phone_number=phone_number,
            api_id=API_ID,
            api_hash=API_HASH,
            session_string=session_string,
            first_name=me.first_name,
            last_name=me.last_name,
            username=me.username,
            user_id=me.id
        )
        
        if success:
            success_message = f"""
‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!</b>

üì± <b>–ù–æ–º–µ—Ä:</b> {phone_number}
üë§ <b>–Ü–º'—è:</b> {me.first_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üë§ <b>–ü—Ä—ñ–∑–≤–∏—â–µ:</b> {me.last_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üîó <b>Username:</b> @{me.username or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üÜî <b>ID:</b> {me.id}
            """
            await message.answer(success_message, parse_mode='HTML')
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö!")
            
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
    finally:
        await client.disconnect()
        await state.clear()

@router.callback_query(lambda c: c.data == "delete_account")
async def delete_account_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback.message.answer("üîÑ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    await state.set_state(RegistrationStates.waiting_for_phone_to_delete)
    await callback.answer()

@router.message(RegistrationStates.waiting_for_phone_to_delete)
async def process_delete_phone(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    phone_number = message.text.strip()
    
    if not phone_number.startswith('+') or len(phone_number) < 10:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (—Ñ–æ—Ä–º–∞—Ç +380XXXXXXXXX):")
        return
    
    success = db.delete_account(phone_number)
    if success:
        await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω!")
    
    await state.clear()

@router.message(Command("register_number"))
async def cmd_register_number(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /register_number"""
    await start_registration_process(message, state)

@router.message(Command("accounts"))
async def cmd_accounts(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /accounts - –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    await show_accounts_list(message, db)

@router.message(Command("delete_account"))
async def cmd_delete_account(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /delete_account - –≤–∏–¥–∞–ª—è—î –∞–∫–∫–∞—É–Ω—Ç"""
    await message.answer("üîÑ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")
    await state.set_state(RegistrationStates.waiting_for_phone_to_delete)
