import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from config import TELEGRAM_BOT_TOKEN

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ –º–æ–¥—É–ª—ñ
from database import Database
from states import *
from utils import show_accounts_list
from registration import router as registration_router, init_registration_module
from groups import router as groups_router, init_groups_module
from broadcast import router as broadcast_router, init_broadcast_module
from mass_broadcast import router as mass_broadcast_router, init_mass_broadcast_module
from join_groups import router as join_groups_router, init_join_groups_module

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# API –¥–∞–Ω—ñ –∑ .env —Ñ–∞–π–ª—É
API_ID = int(os.getenv("API_ID", "0"))
API_HASH = os.getenv("API_HASH", "")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—ñ–≤
init_registration_module(API_ID, API_HASH, db)
init_groups_module(db)
init_broadcast_module(db)
init_mass_broadcast_module(db, bot)
init_join_groups_module(db)


# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ RANDOM_STICKERS –≤ database –º–æ–¥—É–ª—å
import database
RANDOM_STICKERS = database.RANDOM_STICKERS

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    welcome_text = f"""
üçΩÔ∏è –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Piar Bot

üÜî –í–∞—à ID: {message.from_user.id}

–Ø –±–æ—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º–∏ –≤ telegram)

üí° –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/register_number - –ü—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
/accounts - –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
/delete_account - –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç
/status_account - —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤", callback_data="accounts")],
        [InlineKeyboardButton(text="üì± –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä", callback_data="register_number")],
        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")],
        [InlineKeyboardButton(text="üì§ –ó–∞–ø—É—Å–∫ —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è", callback_data="Message_in_all_chat_for_account")],
        [InlineKeyboardButton(text="üë• –î–æ–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø", callback_data="Groups_for_account")],
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏—Å—å –≤ –≥—Ä—É–ø–∏", callback_data="join_groups")],
        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞–∫–µ—Ç –≥—Ä—É–ø", callback_data="delete_group_package")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è", callback_data="broadcast_status")],
        [InlineKeyboardButton(text="üì§ –ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞", callback_data="Mass_broadcast")]
    ])
    
    await message.answer(welcome_text, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "accounts")
async def accounts_callback(callback):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    await show_accounts_list(callback, db)
    await callback.answer()

@router.callback_query(lambda c: c.data == "register_number")
async def register_number_callback(callback, state):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞"""
    from utils import start_registration_process
    await start_registration_process(callback, state)
    await callback.answer()

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏
        dp.include_router(router)
        dp.include_router(registration_router)
        dp.include_router(groups_router)
        dp.include_router(broadcast_router)
        dp.include_router(mass_broadcast_router)
        dp.include_router(join_groups_router)
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    asyncio.run(main())
