import asyncio
import logging
import os
import sqlite3
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from config import TELEGRAM_BOT_TOKEN

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ –º–æ–¥—É–ª—ñ
from database import Database
from states import *
from utils import show_accounts_list
from registration import router as registration_router, init_registration_module
from groups import router as groups_router, init_groups_module
from mass_broadcast import router as mass_broadcast_router, init_mass_broadcast_module
from join_groups import router as join_groups_router, init_join_groups_module
from templates import TemplateManager

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# API –¥–∞–Ω—ñ –∑ .env —Ñ–∞–π–ª—É
API_ID = int(os.getenv("API_ID", "0"))
API_HASH = os.getenv("API_HASH", "")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∞–±–ª–æ–Ω—ñ–≤
template_manager = TemplateManager(bot)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—ñ–≤
init_registration_module(API_ID, API_HASH, db)
init_groups_module(db)
init_mass_broadcast_module(db, bot)
init_join_groups_module(db)


# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ RANDOM_STICKERS –≤ database –º–æ–¥—É–ª—å
import database
RANDOM_STICKERS = database.RANDOM_STICKERS

@router.message(Command("start_bot"))
async def cmd_start(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    welcome_text = f"""
üçΩÔ∏è –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Piar Bot

üÜî –í–∞—à ID: {message.from_user.id}

–Ø –±–æ—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º–∏ –≤ telegram)

üí° –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/register_number - –ü—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
/accounts - –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
/delete_account - –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç
/stop_message - –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤", callback_data="accounts")],
        [InlineKeyboardButton(text="üì± –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä", callback_data="register_number")],
        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")],
        [InlineKeyboardButton(text="üë• –î–æ–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø", callback_data="Groups_for_account")],
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏—Å—å –≤ –≥—Ä—É–ø–∏", callback_data="join_groups")],
        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞–∫–µ—Ç –≥—Ä—É–ø", callback_data="delete_group_package")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è", callback_data="broadcast_status")],
        [InlineKeyboardButton(text="üì§ –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ —Ä–æ–æ–∑—Å–∏–ª–∫–∞", callback_data="Mass_broadcast")],
        [InlineKeyboardButton(text="üõë –ó—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫–∏", callback_data="stop_all_broadcasts")],
        [InlineKeyboardButton(text="üõë –ó—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="stop_account_broadcast")],
        [InlineKeyboardButton(text="üìã –®–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", callback_data="templates_menu")]
    ])
    
    await message.answer(welcome_text, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "stop_all_broadcasts")
async def stop_all_broadcasts_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑—É–ø–∏–Ω–∫–∏ –≤—Å—ñ—Ö —Ä–æ–∑—Å–∏–ª–æ–∫"""
    from mass_broadcast import handle_stop_message_command
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–º–∞–Ω–¥–æ—é
    class FakeMessage:
        def __init__(self, callback_message):
            self.text = "/stop_message"
            self.answer = callback_message.answer
    
    fake_message = FakeMessage(callback.message)
    await handle_stop_message_command(fake_message, state)
    await callback.answer()

@router.callback_query(lambda c: c.data == "stop_account_broadcast")
async def stop_account_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback.message.answer(
        "üõë <b>–ó—É–ø–∏–Ω–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
        "üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞, —Ä–æ–∑—Å–∏–ª–∫—É —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—É–ø–∏–Ω–∏—Ç–∏:\n\n"
        "üìù <b>–ü—Ä–∏–∫–ª–∞–¥:</b> <code>+380123456789</code>\n\n"
        "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–æ–π —Å–∞–º–∏–π —Ñ–æ—Ä–º–∞—Ç, —â–æ –π –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∞–∫–∫–∞—É–Ω—Ç–∞",
        parse_mode='HTML'
    )
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    await state.set_state("waiting_for_phone_to_stop")
    await callback.answer()

@router.message(lambda message: message.text and message.text.startswith('+') and len(message.text) > 10)
async def process_phone_to_stop(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏"""
    current_state = await state.get_state()
    
    if current_state == "waiting_for_phone_to_stop":
        phone_number = message.text.strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–∫–∫–∞—É–Ω—Ç —ñ—Å–Ω—É—î
        accounts = db.get_accounts()
        account_exists = any(acc['phone_number'] == phone_number for acc in accounts)
        
        if not account_exists:
            await message.answer(
                f"‚ùå <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!</b>\n\n"
                f"üì± –ù–æ–º–µ—Ä: {phone_number}\n"
                f"‚ÑπÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n\n"
                f"üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
                parse_mode='HTML'
            )
            return
        
        # –ó—É–ø–∏–Ω—è—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            with sqlite3.connect(db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE broadcast_status 
                    SET status = 'completed', finished_at = CURRENT_TIMESTAMP
                    WHERE account_phone = ? AND status IN ('pending', 'running')
                """, (phone_number,))
                updated_count = cursor.rowcount
                conn.commit()
            
            # –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç Telegram –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            from mass_broadcast import disconnect_account_client
            disconnect_success = await disconnect_account_client(phone_number)
                
            if updated_count > 0:
                disconnect_info = "üîå –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π" if disconnect_success else "‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –Ω–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π"
                await message.answer(
                    f"üõë <b>–†–æ–∑—Å–∏–ª–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ!</b>\n\n"
                    f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {phone_number}\n"
                    f"‚úÖ –ó—É–ø–∏–Ω–µ–Ω–æ {updated_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫\n"
                    f"{disconnect_info}\n\n"
                    f"üìä –ê–∫–∫–∞—É–Ω—Ç —Ç–µ–ø–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –Ω–æ–≤–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫",
                    parse_mode='HTML'
                )
            else:
                disconnect_info = "üîå –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π" if disconnect_success else "‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –Ω–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π"
                await message.answer(
                    f"‚ÑπÔ∏è <b>–ê–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                    f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {phone_number}\n"
                    f"{disconnect_info}\n"
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –≤–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –Ω–æ–≤–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫",
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone_number}: {e}")
            await message.answer(
                f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ —Ä–æ–∑—Å–∏–ª–∫–∏!</b>\n\n"
                f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {phone_number}\n"
                f"‚ö†Ô∏è –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                parse_mode='HTML'
            )
        
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        await state.clear()

@router.message(Command("add_template"))
async def cmd_add_template(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É"""
    await message.answer(
        "üìã <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω—É</b>\n\n"
        "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ —Ç–æ—â–æ), —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏ —è–∫ —à–∞–±–ª–æ–Ω.\n\n"
        "–ü—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —à–∞–±–ª–æ–Ω—É.",
        parse_mode='HTML'
    )
    await state.set_state(MassBroadcastStates.waiting_for_template_message)

@router.callback_query(lambda c: c.data == "accounts")
async def accounts_callback(callback):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    await show_accounts_list(callback, db)
    await callback.answer()

@router.callback_query(lambda c: c.data == "register_number")
async def register_number_callback(callback, state):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞"""
    from utils import start_registration_process
    await start_registration_process(callback, state)
    await callback.answer()

#====================== –û–ë–†–û–ë–ö–ê –®–ê–ë–õ–û–ù–Ü–í ======================

@router.callback_query(lambda c: c.data == "templates_menu")
async def templates_menu_callback(callback):
    """–ú–µ–Ω—é —à–∞–±–ª–æ–Ω—ñ–≤"""
    templates = template_manager.db.get_templates()
    if templates:
        keyboard = template_manager.get_template_keyboard(templates)
        await callback.message.answer(
            "üìã <b>–ú–µ–Ω—é —à–∞–±–ª–æ–Ω—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π:",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —à–∞–±–ª–æ–Ω", callback_data="add_template")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        await callback.message.answer(
            "üìã <b>–ú–µ–Ω—é —à–∞–±–ª–æ–Ω—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å</b>\n\n"
            "‚ùå –®–∞–±–ª–æ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ\n\n"
            "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π —à–∞–±–ª–æ–Ω, –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É:",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    await callback.answer()

@router.callback_query(lambda c: c.data == "add_template")
async def add_template_callback(callback, state: FSMContext):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω—É"""
    await callback.message.answer(
        "üìã <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω—É</b>\n\n"
        "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ —Ç–æ—â–æ), —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏ —è–∫ —à–∞–±–ª–æ–Ω.\n\n"
        "–ü—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —à–∞–±–ª–æ–Ω—É.",
        parse_mode='HTML'
    )
    await state.set_state(MassBroadcastStates.waiting_for_template_message)
    await callback.answer()

@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_callback(callback):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await cmd_start(callback.message)
    await callback.answer()

@router.message(MassBroadcastStates.waiting_for_template_message)
async def process_template_message(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —à–∞–±–ª–æ–Ω—É"""
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ —à–∞–±–ª–æ–Ω
    await state.update_data(template_message=message)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —à–∞–±–ª–æ–Ω—É:")
    await state.set_state(MassBroadcastStates.waiting_for_template_name)

@router.message(MassBroadcastStates.waiting_for_template_name)
async def process_template_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ —à–∞–±–ª–æ–Ω—É"""
    data = await state.get_data()
    template_message = data.get('template_message')
    template_name = message.text.strip()
    
    if not template_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–∞–±–ª–æ–Ω
    success = await template_manager.save_template_from_message(template_message, template_name)
    
    if success:
        await message.answer(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —à–∞–±–ª–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    
    await state.clear()

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω—ñ–≤

@router.callback_query(lambda c: c.data == "mass_different_messages")
async def mass_different_messages_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    from mass_broadcast import process_mass_different_messages_callback
    await process_mass_different_messages_callback(callback, state)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("edit_template_"))
async def edit_template_callback(callback: CallbackQuery):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É"""
    template_id = int(callback.data.replace("edit_template_", ""))
    template_info = template_manager.db.get_template(template_id)
    
    if template_info:
        keyboard = template_manager.get_edit_template_keyboard(template_id)
        await callback.message.answer(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É:</b> {template_info['name']}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    else:
        await callback.message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("delete_template_"))
async def delete_template_callback(callback: CallbackQuery):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É"""
    template_id = int(callback.data.replace("delete_template_", ""))
    template_info = template_manager.db.get_template(template_id)
    
    if template_info:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"confirm_delete_template_{template_id}")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="templates_menu")]
        ])
        await callback.message.answer(
            f"üóëÔ∏è <b>–í–∏–¥–∞–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É</b>\n\n"
            f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —à–∞–±–ª–æ–Ω '{template_info['name']}'?\n\n"
            "‚ö†Ô∏è –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏!",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    else:
        await callback.message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("confirm_delete_template_"))
async def confirm_delete_template_callback(callback: CallbackQuery):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É"""
    template_id = int(callback.data.replace("confirm_delete_template_", ""))
    
    success = template_manager.db.delete_template(template_id)
    if success:
        await callback.message.answer("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —à–∞–±–ª–æ–Ω—É")
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é —à–∞–±–ª–æ–Ω—ñ–≤
    await templates_menu_callback(callback)

@router.callback_query(lambda c: c.data == "close_templates")
async def close_templates_callback(callback: CallbackQuery):
    """–ó–∞–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é —à–∞–±–ª–æ–Ω—ñ–≤"""
    await callback.message.edit_text(
        "üéØ <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n"
        "üì± <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "‚Ä¢ <code>/start</code> - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "‚Ä¢ <code>/stop_message</code> - –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ —Ä–æ–∑—Å–∏–ª–∫–∏\n\n"
        "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
        "‚Ä¢ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤\n"
        "‚Ä¢ –ú–∞—Å–æ–≤—ñ —Ä–æ–∑—Å–∏–ª–∫–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —à–∞–±–ª–æ–Ω–∞–º–∏\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± –ê–∫–∫–∞—É–Ω—Ç–∏", callback_data="accounts")],
            [InlineKeyboardButton(text="üì¢ –ú–∞—Å–æ–≤—ñ —Ä–æ–∑—Å–∏–ª–∫–∏", callback_data="Mass_broadcast")],
            [InlineKeyboardButton(text="üìù –®–∞–±–ª–æ–Ω–∏", callback_data="templates_menu")],
            [InlineKeyboardButton(text="üõë –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ —Ä–æ–∑—Å–∏–ª–∫–∏", callback_data="stop_all_broadcasts")],
            [InlineKeyboardButton(text="üõë –ó—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="stop_account_broadcast")]
        ])
    )
    await callback.answer()

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏
        dp.include_router(router)
        dp.include_router(registration_router)
        dp.include_router(groups_router)
        dp.include_router(mass_broadcast_router)
        dp.include_router(join_groups_router)
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...")
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –æ—á–∏—â–µ–Ω–Ω—è
        try:
            from mass_broadcast import disconnect_all_active_clients, cleanup_hanging_tasks
            logger.info("üßπ –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤...")
            
            # –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤—Å—ñ –∫–ª—ñ—î–Ω—Ç–∏
            await disconnect_all_active_clients()
            
            # –û—á–∏—â–∞—î–º–æ –∑–∞–≤–∏—Å–ª—ñ –∑–∞–¥–∞—á—ñ
            await cleanup_hanging_tasks()
            
            logger.info("‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as cleanup_error:
            logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ: {cleanup_error}")
        
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        
        # –ù–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ—Å—É—Ä—Å–∏
        try:
            from mass_broadcast import disconnect_all_active_clients, cleanup_hanging_tasks
            await disconnect_all_active_clients()
            await cleanup_hanging_tasks()
        except:
            pass
        
        raise

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ü—Ä–æ–≥—Ä–∞–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏")
