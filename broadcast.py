import asyncio
import logging
from aiogram import Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from telethon import TelegramClient
from states import BroadcastStates, GroupStates

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ (–±—É–¥—É—Ç—å —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É)
db = None

def init_broadcast_module(database):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    global db
    db = database

async def send_broadcast_message(account_phone: str, message_text: str, groups: list, status_id: int, message_obj=None):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ –≥—Ä—É–ø–∞—Ö"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∞
        accounts = db.get_accounts()
        account = None
        for acc in accounts:
            if acc['phone_number'] == account_phone:
                account = acc
                break
        
        if not account:
            logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            db.update_broadcast_status(status_id, status='failed')
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
        session_name = f"sessions/temp_{account_phone.replace('+', '').replace('-', '')}"
        client = TelegramClient(session_name, account['api_id'], account['api_hash'])
        
        await client.connect()
        
        if not await client.is_user_authorized():
            logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
            db.update_broadcast_status(status_id, status='failed')
            await client.disconnect()
            return
        
        sent_count = 0
        failed_count = 0
        
        for group in groups:
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ ID –≥—Ä—É–ø–∏ –≤ int
                group_id = int(group['group_id'])
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ retry –ª–æ–≥—ñ–∫–æ—é
                success = await db.send_message_with_retry(
                    client, 
                    group_id, 
                    group['name'], 
                    message_text,
                    message_obj
                )
                
                if success:
                    sent_count += 1
                else:
                    failed_count += 1
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
                db.update_broadcast_status(status_id, sent_count=sent_count, failed_count=failed_count)
                
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                await asyncio.sleep(2)
                
            except Exception as e:
                failed_count += 1
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ –≥—Ä—É–ø—É {group['name']} (ID: {group['group_id']}): {e}")
                db.update_broadcast_status(status_id, sent_count=sent_count, failed_count=failed_count)
        
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è
        db.update_broadcast_status(status_id, status='completed')
        logger.info(f"‚úÖ –†–æ–∑—Å–∏–ª–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –ü–æ–º–∏–ª–æ–∫: {failed_count}")
        
        await client.disconnect()
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—ñ: {e}")
        db.update_broadcast_status(status_id, status='failed')

@router.callback_query(lambda c: c.data == "Message_in_all_chat_for_account")
async def message_in_all_chat_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫—É —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è"""
    accounts = db.get_accounts()
    
    if not accounts:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤. –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.")
        await callback.answer()
        return
    
    await callback.message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è:")
    await state.set_state(BroadcastStates.waiting_for_message)
    await callback.answer()

@router.message(BroadcastStates.waiting_for_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è"""
    message_text = message.text.strip()
    
    if not message_text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(message_text=message_text)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É
    accounts = db.get_accounts()
    keyboard_buttons = []
    
    for account in accounts:
        packages = db.get_group_packages(account['phone_number'])
        total_groups = sum(p['groups_count'] for p in packages)
        button_text = f"üì± {account['phone_number']} ({len(packages)} –ø–∞–∫–µ—Ç—ñ–≤, {total_groups} –≥—Ä—É–ø)"
        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"select_account_for_broadcast_{account['phone_number']}"
        )])
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É
    keyboard_buttons.append([InlineKeyboardButton(
        text="üéØ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É",
        callback_data="send_to_single_group"
    )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(
        "üë§ –û–±–µ—Ä—ñ—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É:",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith("select_account_for_broadcast_"))
async def select_account_for_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è"""
    account_phone = callback.data.replace("select_account_for_broadcast_", "")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞–∫–µ—Ç–∏ –≥—Ä—É–ø –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    packages = db.get_group_packages(account_phone)
    
    if not packages:
        await callback.message.answer(f"‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone} –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤ –≥—Ä—É–ø. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –≥—Ä—É–ø–∏.")
        await callback.answer()
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç
    await state.update_data(selected_account=account_phone)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É
    keyboard_buttons = []
    for package in packages:
        button_text = f"üì¶ {package['name']} ({package['groups_count']} –≥—Ä—É–ø)"
        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"select_package_{package['id']}"
        )])
    
    keyboard_buttons.append([InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="Mass_broadcast"
    )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    packages_text = f"üì¶ <b>–ü–∞–∫–µ—Ç–∏ –≥—Ä—É–ø –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_phone}:</b>\n\n"
    for package in packages:
        packages_text += f"üì¶ {package['name']} ({package['groups_count']} –≥—Ä—É–ø)\n"
    
    await callback.message.answer(
        packages_text + "\n–û–±–µ—Ä—ñ—Ç—å –ø–∞–∫–µ—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è:",
        parse_mode='HTML',
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("select_package_"))
async def select_package_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–∫–µ—Ç—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è"""
    package_id = int(callback.data.replace("select_package_", ""))
    data = await state.get_data()
    account_phone = data['selected_account']
    message_text = data['message_text']
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø–∏ –∑ –ø–∞–∫–µ—Ç—É
    selected_groups = db.get_groups_by_package(package_id)
    
    if not selected_groups:
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ø–∞–∫–µ—Ç—É –≥—Ä—É–ø.")
        await callback.answer()
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –≥—Ä—É–ø–∏
    await state.update_data(selected_groups=selected_groups)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    confirmation_text = f"üì§ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è:</b>\n\n"
    confirmation_text += f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {account_phone}\n"
    confirmation_text += f"üì¶ <b>–ü–∞–∫–µ—Ç:</b> {selected_groups[0].get('package_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
    confirmation_text += f"üë• <b>–ì—Ä—É–ø–∏:</b> {len(selected_groups)}\n"
    confirmation_text += f"üìù <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{message_text}\n\n"
    confirmation_text += "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è?"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="Mass_broadcast")]
    ])
    
    await callback.message.answer(confirmation_text, parse_mode='HTML', reply_markup=keyboard)
    await callback.answer()

@router.callback_query(lambda c: c.data == "send_to_single_group")
async def send_to_single_group_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É"""
    await callback.message.answer("üéØ –í–≤–µ–¥—ñ—Ç—å ID –≥—Ä—É–ø–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:")
    await state.set_state(GroupStates.waiting_for_single_group_id)
    await callback.answer()

@router.message(GroupStates.waiting_for_single_group_id)
async def process_single_group_id(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ ID –æ–¥–Ω—ñ—î—ó –≥—Ä—É–ø–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"""
    group_id = message.text.strip()
    data = await state.get_data()
    message_text = data['message_text']
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ ID –≥—Ä—É–ø–∏
    if group_id.isdigit():
        if not group_id.startswith('-100'):
            full_group_id = f"-100{group_id}"
        else:
            full_group_id = group_id
    else:
        await message.answer("‚ùå ID –≥—Ä—É–ø–∏ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤—É –≥—Ä—É–ø—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è
    fake_group = {
        'id': 0,
        'name': f'–ì—Ä—É–ø–∞ {group_id}',
        'group_id': full_group_id,
        'group_username': None,
        'package_name': '–û–¥–Ω–∞ –≥—Ä—É–ø–∞'
    }
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É –≥—Ä—É–ø—É
    await state.update_data(selected_groups=[fake_group])
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    confirmation_text = f"üì§ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É:</b>\n\n"
    confirmation_text += f"üéØ <b>–ì—Ä—É–ø–∞:</b> {group_id}\n"
    confirmation_text += f"üìù <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{message_text}\n\n"
    confirmation_text += "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É?"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="Mass_broadcast")]
    ])
    
    await message.answer(confirmation_text, parse_mode='HTML', reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "confirm_broadcast")
async def confirm_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è"""
    data = await state.get_data()
    account_phone = data.get('selected_account')
    message_text = data['message_text']
    selected_groups = data['selected_groups']
    
    # –Ø–∫—â–æ —Ü–µ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –æ–¥–Ω—É –≥—Ä—É–ø—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç
    if not account_phone:
        accounts = db.get_accounts()
        if accounts:
            account_phone = accounts[0]['phone_number']
        else:
            await callback.message.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.")
            await state.clear()
            await callback.answer()
            return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è
    status_id = db.create_broadcast_status(account_phone, message_text, len(selected_groups))
    
    if status_id:
        await callback.message.answer("üöÄ –†–æ–∑—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å —á–µ—Ä–µ–∑ '–°—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è'.")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
        asyncio.create_task(send_broadcast_message(account_phone, message_text, selected_groups, status_id, callback.message))
    else:
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è.")
    
    await state.clear()
    await callback.answer()

@router.callback_query(lambda c: c.data == "broadcast_status")
async def broadcast_status_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å—É —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è"""
    statuses = db.get_broadcast_statuses()
    
    if not statuses:
        await callback.message.answer("üìä –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–∞–Ω—å.")
        await callback.answer()
        return
    
    status_text = "üìä <b>–°—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è:</b>\n\n"
    
    for status in statuses[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 5
        status_emoji = "üü¢" if status['status'] == 'completed' else "üî¥" if status['status'] == 'failed' else "üü°"
        status_text += f"{status_emoji} <b>{status['phone_number']}</b>\n"
        status_text += f"üìù {status['message_text'][:50]}...\n"
        status_text += f"üìä {status['sent_count']}/{status['total_groups']} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ\n"
        status_text += f"‚è∞ {status['started_at']}\n\n"
    
    await callback.message.answer(status_text, parse_mode='HTML')
    await callback.answer()
