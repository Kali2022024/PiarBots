import asyncio
import logging
import random
from aiogram import Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from telethon import TelegramClient
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from states import JoinGroupsStates

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ (–±—É–¥—É—Ç—å —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É)
db = None

def init_join_groups_module(database):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø"""
    global db
    db = database

@router.callback_query(lambda c: c.data == "join_groups")
async def join_groups_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø"""
    accounts = db.get_accounts()
    
    if not accounts:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤. –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.")
        await callback.answer()
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    keyboard_buttons = []
    for account in accounts:
        button_text = f"üì± {account['phone_number']} ({account['first_name'] or '–ë–µ–∑ —ñ–º–µ–Ω—ñ'})"
        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"select_account_for_join_{account['phone_number']}"
        )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.answer(
        "üë§ –û–±–µ—Ä—ñ—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("select_account_for_join_"))
async def select_account_for_join_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø"""
    account_phone = callback.data.replace("select_account_for_join_", "")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç
    await state.update_data(selected_account=account_phone)
    
    await callback.message.answer(
        "üìã –í–≤–µ–¥—ñ—Ç—å ID –≥—Ä—É–ø –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º—É, –¥–æ —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å:\n\n"
        "üìù <b>–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:</b>\n"
        "‚Ä¢ ID –≥—Ä—É–ø: 2105953426,2064362674,2133142559 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—Å—Ç—å—Å—è -100)\n"
        "‚Ä¢ Username: @groupname, @channelname\n"
        "‚Ä¢ –ü–æ—Å–∏–ª–∞–Ω–Ω—è: https://t.me/groupname\n"
        "‚Ä¢ Invite –ø–æ—Å–∏–ª–∞–Ω–Ω—è: https://t.me/joinchat/AAAAAEkk2WdoDrB4-Q8-gg\n\n"
        "üí° <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> –ú–æ–∂–Ω–∞ –∑–º—ñ—à—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –≤ –æ–¥–Ω–æ–º—É —Å–ø–∏—Å–∫—É\n"
        "üé≤ <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –≤—ñ–¥ 60 –¥–æ 360 —Å–µ–∫—É–Ω–¥",
        parse_mode='HTML'
    )
    await state.set_state(JoinGroupsStates.waiting_for_group_ids)
    await callback.answer()

@router.message(JoinGroupsStates.waiting_for_group_ids)
async def process_group_ids_for_join(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Å–ø–∏—Å–∫—É ID –≥—Ä—É–ø –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è"""
    group_ids_text = message.text.strip()
    data = await state.get_data()
    account_phone = data['selected_account']
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ –∫–æ–º–∞—Ö
    group_ids = [gid.strip() for gid in group_ids_text.split(',') if gid.strip()]
    
    if not group_ids:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    # –í–∞–ª—ñ–¥—É—î–º–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –≥—Ä—É–ø
    valid_group_ids = []
    for group_input in group_ids:
        group_input = group_input.strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏
        if group_input.isdigit():
            # –ó–≤–∏—á–∞–π–Ω–∏–π ID –≥—Ä—É–ø–∏
            valid_group_ids.append(group_input)
        elif group_input.startswith('@'):
            # Username
            valid_group_ids.append(group_input)
        elif group_input.startswith('https://t.me/'):
            # –ü–æ—Å–∏–ª–∞–Ω–Ω—è
            valid_group_ids.append(group_input)
        elif group_input.startswith('t.me/'):
            # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –±–µ–∑ https
            valid_group_ids.append(f"https://{group_input}")
        else:
            await message.answer(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç '{group_input}'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ID, @username –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø
    await state.update_data(group_ids=valid_group_ids)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö° 5 —Å–µ–∫—É–Ω–¥", callback_data="interval_5")],
        [InlineKeyboardButton(text="‚è±Ô∏è 10 —Å–µ–∫—É–Ω–¥", callback_data="interval_10")],
        [InlineKeyboardButton(text="‚è∞ 15 —Å–µ–∫—É–Ω–¥", callback_data="interval_15")],
        [InlineKeyboardButton(text="üïê 30 —Å–µ–∫—É–Ω–¥", callback_data="interval_30")],
        [InlineKeyboardButton(text="üïë 60 —Å–µ–∫—É–Ω–¥", callback_data="interval_60")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤–ª–∞—Å–Ω–∏–π", callback_data="interval_custom")],
        [InlineKeyboardButton(text="üé≤ –†–∞–Ω–¥–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="_random_interval")]
    ])
    
    await message.answer(
        f"‚è±Ô∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É:</b>\n\n"
        f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {account_phone}\n"
        f"üë• <b>–ì—Ä—É–ø –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è:</b> {len(valid_group_ids)}\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è–º–∏ –¥–æ –≥—Ä—É–ø:",
        parse_mode='HTML',
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith("interval_"))
async def process_interval_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    interval_data = callback.data.replace("interval_", "")
    
    if interval_data == "custom":
        await callback.message.answer(
            "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–≤—ñ–¥ 5 –¥–æ 60):"
        )
        await state.set_state(JoinGroupsStates.waiting_for_interval)
    else:
        try:
            interval = int(interval_data)
            await state.update_data(interval=interval)
            await start_join_groups_process(callback, state)
        except ValueError:
            await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É.")
    
    await callback.answer()

@router.message(JoinGroupsStates.waiting_for_interval)
async def process_custom_interval(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–ª–∞—Å–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    try:
        interval = int(message.text.strip())
        if 5 <= interval <= 60:
            await state.update_data(interval=interval)
            await start_join_groups_process(message, state)
        else:
            await message.answer("‚ùå –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 5 –¥–æ 60 —Å–µ–∫—É–Ω–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 5 –¥–æ 60. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

@router.callback_query(lambda c: c.data == "_random_interval")
async def process_random_interval_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    # –ü–æ–∫–∞–∑—É—î–º–æ –æ–ø—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö° –®–≤–∏–¥–∫–∏–π (10-40 —Å–µ–∫)", callback_data="random_interval_10_40")],
        [InlineKeyboardButton(text="üïê –°–µ—Ä–µ–¥–Ω—ñ–π (30-120 —Å–µ–∫)", callback_data="random_interval_30_120")],
        [InlineKeyboardButton(text="üïë –ü–æ–≤—ñ–ª—å–Ω–∏–π (60-360 —Å–µ–∫)", callback_data="random_interval_60_360")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–ª–∞—Å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω", callback_data="random_interval_custom")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="join_groups")]
    ])
    
    await callback.message.answer(
        "üé≤ <b>–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É:</b>\n\n"
        "‚ö° <b>–®–≤–∏–¥–∫–∏–π:</b> 10-40 —Å–µ–∫—É–Ω–¥\n"
        "üïê <b>–°–µ—Ä–µ–¥–Ω—ñ–π:</b> 30-120 —Å–µ–∫—É–Ω–¥\n"
        "üïë <b>–ü–æ–≤—ñ–ª—å–Ω–∏–π:</b> 60-360 —Å–µ–∫—É–Ω–¥\n"
        "‚úèÔ∏è <b>–í–ª–∞—Å–Ω–∏–π:</b> –≤–≤–µ–¥—ñ—Ç—å min-max —á–µ—Ä–µ–∑ –∫–æ–º—É",
        parse_mode='HTML',
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("random_interval_"))
async def process_random_interval_range_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    data = callback.data
    
    if data == "random_interval_custom":
        # –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω
        await callback.message.answer(
            "‚úèÔ∏è <b>–í–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É:</b>\n\n"
            "üìù <b>–§–æ—Ä–º–∞—Ç:</b> min,max (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15,90)\n"
            "‚è±Ô∏è <b>–î—ñ–∞–ø–∞–∑–æ–Ω:</b> –≤—ñ–¥ 5 –¥–æ 3600 —Å–µ–∫—É–Ω–¥\n\n"
            "üí° <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
            "‚Ä¢ 10,40 (–≤—ñ–¥ 10 –¥–æ 40 —Å–µ–∫—É–Ω–¥)\n"
            "‚Ä¢ 30,120 (–≤—ñ–¥ 30 –¥–æ 120 —Å–µ–∫—É–Ω–¥)\n"
            "‚Ä¢ 60,300 (–≤—ñ–¥ 60 –¥–æ 300 —Å–µ–∫—É–Ω–¥)",
            parse_mode='HTML'
        )
        await state.set_state(JoinGroupsStates.waiting_for_random_interval_config)
        await callback.answer()
        return
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏
    if data == "random_interval_10_40":
        min_interval, max_interval = 10, 40
    elif data == "random_interval_30_120":
        min_interval, max_interval = 30, 120
    elif data == "random_interval_60_360":
        min_interval, max_interval = 60, 360
    else:
        await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    await state.update_data(
        interval="_random_interval",
        min_random_interval=min_interval,
        max_random_interval=max_interval
    )
    
    await start_join_groups_process(callback, state)
    await callback.answer()

@router.message(JoinGroupsStates.waiting_for_random_interval_config)
async def process_custom_random_interval(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–ª–∞—Å–Ω–æ–≥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    try:
        interval_text = message.text.strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç min,max
        if ',' not in interval_text:
            await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç min,max (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15,90). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        min_str, max_str = interval_text.split(',', 1)
        min_interval = int(min_str.strip())
        max_interval = int(max_str.strip())
        
        # –í–∞–ª—ñ–¥—É—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω
        if not (5 <= min_interval <= 3600 and 5 <= max_interval <= 3600):
            await message.answer("‚ùå –î—ñ–∞–ø–∞–∑–æ–Ω –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 5 –¥–æ 3600 —Å–µ–∫—É–Ω–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        if min_interval >= max_interval:
            await message.answer("‚ùå –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –º–µ–Ω—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        await state.update_data(
            interval="_random_interval",
            min_random_interval=min_interval,
            max_random_interval=max_interval
        )
        
        await start_join_groups_process(message, state)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ min,max (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15,90). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

async def start_join_groups_process(message_or_callback, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø"""
    data = await state.get_data()
    account_phone = data['selected_account']
    group_ids = data['group_ids']
    interval = data.get('interval', 10)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    confirmation_text = f"üì§ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø:</b>\n\n"
    confirmation_text += f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {account_phone}\n"
    confirmation_text += f"üë• <b>–ì—Ä—É–ø –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è:</b> {len(group_ids)}\n"
    
    if interval == "_random_interval":
        min_interval = data.get('min_random_interval', 10)
        max_interval = data.get('max_random_interval', 40)
        confirmation_text += f"üé≤ <b>–Ü–Ω—Ç–µ—Ä–≤–∞–ª:</b> –†–∞–Ω–¥–æ–º–Ω–∏–π ({min_interval}-{max_interval} —Å–µ–∫)\n"
    else:
        confirmation_text += f"‚è±Ô∏è <b>–Ü–Ω—Ç–µ—Ä–≤–∞–ª:</b> {interval} —Å–µ–∫—É–Ω–¥\n"
    
    confirmation_text += f"\nüìã <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø:</b>\n"
    for i, group_id in enumerate(group_ids[:5], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5
        confirmation_text += f"{i}. {group_id}\n"
    
    if len(group_ids) > 5:
        confirmation_text += f"... —Ç–∞ —â–µ {len(group_ids) - 5} –≥—Ä—É–ø\n"
    
    confirmation_text += "\nüöÄ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è?"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_join_groups")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="join_groups")]
    ])
    
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.answer(confirmation_text, parse_mode='HTML', reply_markup=keyboard)
    else:
        await message_or_callback.answer(confirmation_text, parse_mode='HTML', reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "confirm_join_groups")
async def confirm_join_groups_callback(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø"""
    data = await state.get_data()
    account_phone = data['selected_account']
    group_ids = data['group_ids']
    interval = data.get('interval', 10)
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    interval_data = None
    if interval == "_random_interval":
        interval_data = {
            'min': data.get('min_random_interval', 10),
            'max': data.get('max_random_interval', 40)
        }
    
    await callback.message.answer("üöÄ –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø –∑–∞–ø—É—â–µ–Ω–æ! –ü—Ä–æ—Ü–µ—Å –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    asyncio.create_task(join_groups_process(account_phone, group_ids, interval, callback.message, interval_data))
    
    await state.clear()
    await callback.answer()

async def join_groups_process(account_phone: str, group_ids: list, interval_type, message_obj, interval_data=None):
    """–ü—Ä–æ—Ü–µ—Å –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∞
        accounts = db.get_accounts()
        account = None
        for acc in accounts:
            if acc['phone_number'] == account_phone:
                account = acc
                break
        
        if not account:
            await message_obj.answer(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
        session_name = f"sessions/temp_{account_phone.replace('+', '').replace('-', '')}"
        client = TelegramClient(session_name, account['api_id'], account['api_hash'])
        
        await client.connect()
        
        if not await client.is_user_authorized():
            await message_obj.answer(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_phone} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
            await client.disconnect()
            return
        
        joined_count = 0
        failed_count = 0
        already_joined = 0
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–∫–µ—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä—É–ø
        package_name = f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–∞–∫–µ—Ç {account_phone}"
        package_id = db.create_group_package(package_name, account_phone)
        
        async def wait_between_groups(current_index, total_groups):
            """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º—ñ–∂ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è–º–∏"""
            if current_index < total_groups - 1:  # –ù–µ —á–µ–∫–∞—î–º–æ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≥—Ä—É–ø–∏
                if interval_type == "_random_interval" and interval_data:
                    wait_time = random.randint(interval_data['min'], interval_data['max'])
                else:
                    wait_time = interval_type
                
                await message_obj.answer(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –≥—Ä—É–ø–æ—é...")
                await asyncio.sleep(wait_time)
        
        for i, group_input in enumerate(group_ids):
            try:
                await message_obj.answer(f"üîÑ –û–±—Ä–æ–±–∫–∞ –≥—Ä—É–ø–∏ {i+1}/{len(group_ids)}: {group_input}")
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –≥—Ä—É–ø
                if group_input.isdigit():
                    # ID –≥—Ä—É–ø–∏
                    group_id = f"-100{group_input}"
                    try:
                        entity = await client.get_entity(int(group_id))
                        group_name = getattr(entity, 'title', f'–ì—Ä—É–ø–∞ {group_input}')
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –ø—Ä–∏—î–¥–Ω–∞–Ω—ñ
                        if db.group_exists_for_account(group_id, account_phone):
                            already_joined += 1
                            await message_obj.answer(f"‚ÑπÔ∏è –ì—Ä—É–ø–∞ {group_name} –≤–∂–µ –¥–æ–¥–∞–Ω–∞ –¥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
                        else:
                            # –ü—Ä–∏—î–¥–Ω—É—î–º–æ—Å—è –¥–æ –≥—Ä—É–ø–∏
                            await client(JoinChannelRequest(entity))
                            joined_count += 1
                            
                            # –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                            db.add_group(group_name, group_id, None, account_phone, package_id)
                            await message_obj.answer(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–Ω–æ –¥–æ –≥—Ä—É–ø–∏ {group_name}")
                    
                    except Exception as entity_error:
                        failed_count += 1
                        await message_obj.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥—Ä—É–ø–∏ {group_input}: {str(entity_error)[:100]}")
                
                elif group_input.startswith('@'):
                    # Username
                    try:
                        entity = await client.get_entity(group_input)
                        group_name = getattr(entity, 'title', group_input)
                        group_id = str(entity.id)
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –ø—Ä–∏—î–¥–Ω–∞–Ω—ñ
                        if db.group_exists_for_account(group_id, account_phone):
                            already_joined += 1
                            await message_obj.answer(f"‚ÑπÔ∏è –ì—Ä—É–ø–∞ {group_name} –≤–∂–µ –¥–æ–¥–∞–Ω–∞ –¥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
                        else:
                            # –ü—Ä–∏—î–¥–Ω—É—î–º–æ—Å—è –¥–æ –≥—Ä—É–ø–∏
                            await client(JoinChannelRequest(entity))
                            joined_count += 1
                            
                            # –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                            db.add_group(group_name, group_id, group_input, account_phone, package_id)
                            await message_obj.answer(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–Ω–æ –¥–æ –≥—Ä—É–ø–∏ {group_name}")
                    
                    except Exception as entity_error:
                        failed_count += 1
                        await message_obj.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥—Ä—É–ø–∏ {group_input}: {str(entity_error)[:100]}")
                
                elif group_input.startswith('https://t.me/'):
                    # –ü–æ—Å–∏–ª–∞–Ω–Ω—è
                    try:
                        if '/joinchat/' in group_input:
                            # Invite –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                            invite_hash = group_input.split('/joinchat/')[-1]
                            entity = await client(ImportChatInviteRequest(invite_hash))
                            group_name = getattr(entity, 'title', '–ì—Ä—É–ø–∞ –∑ invite')
                            group_id = str(entity.id)
                        else:
                            # –ó–≤–∏—á–∞–π–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                            username = group_input.replace('https://t.me/', '').replace('@', '')
                            entity = await client.get_entity(f"@{username}")
                            group_name = getattr(entity, 'title', username)
                            group_id = str(entity.id)
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –ø—Ä–∏—î–¥–Ω–∞–Ω—ñ
                        if db.group_exists_for_account(group_id, account_phone):
                            already_joined += 1
                            await message_obj.answer(f"‚ÑπÔ∏è –ì—Ä—É–ø–∞ {group_name} –≤–∂–µ –¥–æ–¥–∞–Ω–∞ –¥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
                        else:
                            # –ü—Ä–∏—î–¥–Ω—É—î–º–æ—Å—è –¥–æ –≥—Ä—É–ø–∏
                            await client(JoinChannelRequest(entity))
                            joined_count += 1
                            
                            # –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                            db.add_group(group_name, group_id, f"@{username}", account_phone, package_id)
                            await message_obj.answer(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–Ω–æ –¥–æ –≥—Ä—É–ø–∏ {group_name}")
                    
                    except Exception as entity_error:
                        failed_count += 1
                        await message_obj.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥—Ä—É–ø–∏ {group_input}: {str(entity_error)[:100]}")
                
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è–º–∏ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≥—Ä—É–ø–∞ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞)
                await wait_between_groups(i, len(group_ids))
                    
            except Exception as e:
                failed_count += 1
                await message_obj.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥—Ä—É–ø–∏ {group_input}: {str(e)[:100]}")
                await wait_between_groups(i, len(group_ids))
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
        summary_text = f"üìä <b>–ü—ñ–¥—Å—É–º–æ–∫ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø:</b>\n\n"
        summary_text += f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {account_phone}\n"
        summary_text += f"‚úÖ <b>–£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–Ω–æ:</b> {joined_count}\n"
        summary_text += f"‚ùå <b>–ü–æ–º–∏–ª–æ–∫:</b> {failed_count}\n"
        summary_text += f"‚ÑπÔ∏è <b>–í–∂–µ –±—É–ª–∏ –¥–æ–¥–∞–Ω—ñ:</b> {already_joined}\n"
        summary_text += f"üì¶ <b>–ü–∞–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ:</b> {package_name}"
        
        await message_obj.answer(summary_text, parse_mode='HTML')
        
        await client.disconnect()
        
    except Exception as e:
        await message_obj.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ –¥–æ –≥—Ä—É–ø: {str(e)[:200]}")
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ –¥–æ –≥—Ä—É–ø: {e}")
